# Catppuccin theme for tmux
# Colors
set -g @catppuccin_flavour 'mocha'

# Status bar
set -g status-style bg=default,fg=white
set -g status-left-style bg=default,fg=white
set -g status-right-style bg=default,fg=white

# Window status
set -g window-status-style bg=default,fg=gray
set -g window-status-current-style bg=default,fg=white
set -g window-status-activity-style bg=default,fg=red
set -g window-status-bell-style bg=default,fg=yellow

# Pane borders
set -g pane-border-style bg=default,fg=gray
set -g pane-active-border-style bg=default,fg=white

# Messages
set -g message-style bg=default,fg=white
set -g message-command-style bg=default,fg=white

# Status bar content
set -g status-left "#[fg=white]#S #[fg=gray]|"
set -g status-right "#[fg=gray]| #[fg=white]%H:%M #[fg=gray]| #[fg=white]%d-%b-%Y #[fg=gray]| #[fg=white]#H #[fg=gray]"

# Window status format
set -g window-status-format "#[fg=gray]#I:#W"
set -g window-status-current-format "#[fg=white]#I:#W"

# Status bar position
set -g status-justify left
set -g status-interval 10

# -- general -------------------------------------------------------------------

set -g default-terminal "screen-256color"

%if #{||:#{m/ri:mintty|iTerm,#{TERM_PROGRAM}},#{!=:#{XTERM_VERSION},}}
set -g extended-keys on
%endif
set -s escape-time 10
set -sg repeat-time 600
set -s focus-events on

set -g prefix2 C-a
bind C-a send-prefix -2

set -q -g status-utf8 on
setw -q -g utf8 on

set -g history-limit 5000

# edit configuration
%if #{>=:#{version},3.0}
bind e new-window -n "#{TMUX_CONF_LOCAL}" -e EDITOR="$EDITOR" sh -c 'case "${EDITOR:-vim}" in *vim*) ${EDITOR:-vim} -c ":set syntax=tmux" "$TMUX_CONF_LOCAL";; *) $EDITOR "$TMUX_CONF_LOCAL";; esac && "$TMUX_PROGRAM" ${TMUX_SOCKET:+-S "$TMUX_SOCKET"} source "$TMUX_CONF" \; display "$TMUX_CONF_LOCAL sourced"'
%else
set-environment -g EDITOR "$EDITOR"
bind e new-window -n "#{TMUX_CONF_LOCAL}" sh -c 'case "${EDITOR:-vim}" in *vim*) ${EDITOR:-vim} -c ":set syntax=tmux" "$TMUX_CONF_LOCAL";; *) $EDITOR "$TMUX_CONF_LOCAL";; esac && "$TMUX_PROGRAM" ${TMUX_SOCKET:+-S "$TMUX_SOCKET"} source "$TMUX_CONF" \; display "$TMUX_CONF_LOCAL sourced"'
%endif

# reload configuration
bind r run "sh -c '\"\$TMUX_PROGRAM\" \${TMUX_SOCKET:+-S \"\$TMUX_SOCKET\"} source \"\$TMUX_CONF\"'" \; display "#{TMUX_CONF} sourced"

# -- display -------------------------------------------------------------------

set -g base-index 1
setw -g pane-base-index 1
setw -g automatic-rename on
set -g renumber-windows on
set -g set-titles on
set -g display-panes-time 800
set -g display-time 1000

# clear both screen and history
bind -n C-l send-keys C-l \; run 'sleep 0.2' \; clear-history

# activity
set -g monitor-activity on
set -g visual-activity off

# -- navigation ----------------------------------------------------------------

# create session
bind C-c new-session

# find session
bind C-f command-prompt -p find-session 'switch-client -t %%'

# session navigation
bind BTab switch-client -l

# split current window horizontally
bind - split-window -v
# split current window vertically
bind _ split-window -h

# pane navigation
bind -r h select-pane -L
bind -r j select-pane -D
bind -r k select-pane -U
bind -r l select-pane -R
bind > swap-pane -D
bind < swap-pane -U

# pane resizing
bind -r H resize-pane -L 2
bind -r J resize-pane -D 2
bind -r K resize-pane -U 2
bind -r L resize-pane -R 2

# window navigation
unbind n
unbind p
bind -r C-h previous-window
bind -r C-l next-window
bind -r C-S-H swap-window -t -1 \; select-window -t -1
bind -r C-S-L swap-window -t +1 \; select-window -t +1
bind Tab last-window

# -- copy mode -----------------------------------------------------------------

bind Enter copy-mode

bind -T copy-mode-vi v send -X begin-selection
bind -T copy-mode-vi C-v send -X rectangle-toggle
bind -T copy-mode-vi y send -X copy-selection-and-cancel
bind -T copy-mode-vi Escape send -X cancel
bind -T copy-mode-vi H send -X start-of-line
bind -T copy-mode-vi L send -X end-of-line

# copy to X11 clipboard
if -b 'command -v xsel > /dev/null 2>&1' 'bind y run -b "\"\$TMUX_PROGRAM\" \${TMUX_SOCKET:+-S \"\$TMUX_SOCKET\"} save-buffer - | xsel -i -b"'
if -b '! command -v xsel > /dev/null 2>&1 && command -v xclip > /dev/null 2>&1' 'bind y run -b "\"\$TMUX_PROGRAM\" \${TMUX_SOCKET:+-S \"\$TMUX_SOCKET\"} save-buffer - | xclip -i -selection clipboard >/dev/null 2>&1"'
# copy to Wayland clipboard
if -b '[ "$XDG_SESSION_TYPE" = "wayland" ] && command -v wl-copy > /dev/null 2>&1' 'bind y run -b "\"\$TMUX_PROGRAM\" \${TMUX_SOCKET:+-S \"\$TMUX_SOCKET\"} save-buffer - | wl-copy"'
# copy to macOS clipboard
if -b 'command -v pbcopy > /dev/null 2>&1' 'bind y run -b "\"\$TMUX_PROGRAM\" \${TMUX_SOCKET:+-S \"\$TMUX_SOCKET\"} save-buffer - | pbcopy"'
# copy to Windows clipboard
if -b 'command -v clip.exe > /dev/null 2>&1' 'bind y run -b "\"\$TMUX_PROGRAM\" \${TMUX_SOCKET:+-S \"\$TMUX_SOCKET\"} save-buffer - | clip.exe"'
if -b '[ -c /dev/clipboard ]' 'bind y run -b "\"\$TMUX_PROGRAM\" \${TMUX_SOCKET:+-S \"\$TMUX_SOCKET\"} save-buffer - > /dev/clipboard"'

# -- buffers -------------------------------------------------------------------

set -g mouse on

bind m set -g mouse on \; display "Mouse mode: ON"
bind M set -g mouse off \; display "Mouse mode: OFF"
bind b list-buffers
bind p paste-buffer -p
bind P choose-buffer

