{"version":3,"file":"179.js","mappings":"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","sources":["webpack://vpnn-extension/./src/api/httpClient.ts","webpack://vpnn-extension/./src/api/premium/fetchPremiumData.ts","webpack://vpnn-extension/./src/api/premium/urls.ts","webpack://vpnn-extension/./src/app/actions/shared.ts","webpack://vpnn-extension/./src/app/storage/local/premium.ts","webpack://vpnn-extension/./src/app/utils/getIsPremiumStatus.ts","webpack://vpnn-extension/./src/background/client/utils.ts","webpack://vpnn-extension/./src/popup/shared/components/FeatureToggler/ui/FeatureToggler.module.css","webpack://vpnn-extension/./src/popup/shared/components/FeatureToggler/ui/FeatureToggler.tsx","webpack://vpnn-extension/./src/app/features/hooks/useFeaturesList.ts","webpack://vpnn-extension/./src/popup/shared/hooks/useLocalStorage.ts","webpack://vpnn-extension/./src/popup/shared/contexts/FeedbackOverlayContext/FeedbackOverlayContext.tsx","webpack://vpnn-extension/./src/popup/shared/contexts/FeedbackOverlayContext/hooks/useFeedbackOverlay.ts","webpack://vpnn-extension/./src/popup/shared/components/ProxyControlledByOtherExtensions/constants.ts","webpack://vpnn-extension/./src/popup/shared/components/ProxyControlledByOtherExtensions/ProxyControlledByOtherExtensions.module.css","webpack://vpnn-extension/./src/popup/shared/components/ProxyControlledByOtherExtensions/ProxyControlledByOtherExtensions.tsx","webpack://vpnn-extension/./src/popup/shared/components/errors/Error/ui/Error.module.css","webpack://vpnn-extension/./src/popup/shared/components/errors/Error/ui/Error.tsx","webpack://vpnn-extension/./src/utils/hooks/useConfigsBaseUrl/index.ts","webpack://vpnn-extension/./src/popup/shared/components/errors/BrowserError/ui/BrowserError.tsx","webpack://vpnn-extension/./src/popup/shared/components/errors/ErrorBoundary/ui/ErrorBoundary.tsx","webpack://vpnn-extension/./src/popup/shared/components/errors/oldVersionError/ui/OldVersionError.tsx","webpack://vpnn-extension/./src/popup/shared/hooks/usePaymentStatus.ts","webpack://vpnn-extension/./src/popup/shared/contexts/Theme/ThemeContext.tsx","webpack://vpnn-extension/./src/popup/shared/contexts/Theme/hooks/useThemeContext.ts","webpack://vpnn-extension/./src/app/alarms/shared.ts","webpack://vpnn-extension/./src/popup/shared/hooks/usePremiumData.ts","webpack://vpnn-extension/./src/popup/project/vrubel/components/shared/Header/ui/Logo.tsx","webpack://vpnn-extension/./src/popup/shared/components/TelegramPromo/ui/TelegramIcon.tsx","webpack://vpnn-extension/./src/popup/shared/components/TelegramPromo/ui/TelegramPromo.module.css","webpack://vpnn-extension/./src/popup/shared/components/TelegramPromo/ui/TelegramPromo.tsx","webpack://vpnn-extension/./src/popup/project/vrubel/components/shared/Header/ui/Header.module.css","webpack://vpnn-extension/./src/popup/project/vrubel/components/shared/Header/ui/Header.tsx","webpack://vpnn-extension/./src/popup/shared/components/TransitionWrapper/ui/TransitionWrapper.tsx","webpack://vpnn-extension/./src/popup/shared/components/TransitionWrapper/ui/TransitionWrapper.module.css","webpack://vpnn-extension/./src/app/actions/premium.ts","webpack://vpnn-extension/./src/popup/shared/hooks/useCancelPremium.ts","webpack://vpnn-extension/./src/api/premium/cancelSubscription.ts","webpack://vpnn-extension/./src/popup/project/vrubel/routes/types/RoutePath.ts","webpack://vpnn-extension/./src/popup/project/vrubel/components/shared/Loader/ui/Loader.tsx","webpack://vpnn-extension/./src/popup/project/vrubel/components/shared/Loader/ui/Loader.module.css","webpack://vpnn-extension/./src/popup/shared/components/Button/ui/components/ButtonLoader/ui/ButtonLoader.module.css","webpack://vpnn-extension/./src/popup/shared/components/Button/ui/components/ButtonLoader/ui/ButtonLoader.tsx","webpack://vpnn-extension/./src/popup/shared/components/Button/ui/Button.module.css","webpack://vpnn-extension/./src/popup/shared/components/Button/ui/Button.tsx","webpack://vpnn-extension/./src/popup/project/vrubel/routes/CancelPremium/ui/components/QuestionMarkIcon.tsx","webpack://vpnn-extension/./src/content/components/PageLoader/ui/Loader.tsx","webpack://vpnn-extension/./src/popup/shared/components/ChangeDeviceContent/api/changeDevice.ts","webpack://vpnn-extension/./src/popup/shared/utils/wait/index.ts","webpack://vpnn-extension/./src/popup/shared/routes/types/RoutePath.ts","webpack://vpnn-extension/./src/popup/shared/icons/Prohibited.tsx","webpack://vpnn-extension/./src/popup/shared/components/Loader/ui/Loader.tsx","webpack://vpnn-extension/./src/popup/shared/components/Loader/ui/Loader.module.css","webpack://vpnn-extension/./src/popup/shared/hooks/useHandlePremiumWithoutTelegram.ts","webpack://vpnn-extension/./src/popup/project/vrubel/routes/ChangeDevice/ui/ChangeDevice.module.css","webpack://vpnn-extension/./src/popup/project/vrubel/hooks/useChangeDevice.ts","webpack://vpnn-extension/./src/popup/shared/hooks/usePremiumAnimation.ts","webpack://vpnn-extension/./src/popup/project/vrubel/components/PaymentProcess/ui/PaymentScreenContent/PaymentScreenContent.module.css","webpack://vpnn-extension/./src/popup/project/vrubel/components/PaymentProcess/hooks/useNewPaymentLink.ts","webpack://vpnn-extension/./src/api/premium/createNewPaymentLink.ts","webpack://vpnn-extension/./src/api/premium/types/Tariff.ts","webpack://vpnn-extension/./src/popup/project/vrubel/components/PaymentProcess/hooks/usePaymentScreen.ts","webpack://vpnn-extension/./src/popup/project/vrubel/components/PaymentProcess/hooks/usePaymentMethods.ts","webpack://vpnn-extension/./src/popup/project/vrubel/components/PaymentProcess/hooks/usePublicOfferUrl.ts","webpack://vpnn-extension/./src/popup/project/vrubel/components/PaymentProcess/ui/PaymentScreenContent/PaymentMethodItem/PaymentMethodItem.module.css","webpack://vpnn-extension/./src/popup/project/vrubel/components/PaymentProcess/ui/PaymentScreenContent/PaymentMethodItem/SBPIcon/SBPIcon.tsx","webpack://vpnn-extension/./src/popup/project/vrubel/components/PaymentProcess/ui/PaymentScreenContent/PaymentMethodItem/CardsIcons/MastercardIcon/MastercardIcon.tsx","webpack://vpnn-extension/./src/popup/project/vrubel/components/PaymentProcess/ui/PaymentScreenContent/PaymentMethodItem/CardsIcons/MirIcon/MirIcon.tsx","webpack://vpnn-extension/./src/popup/project/vrubel/components/PaymentProcess/ui/PaymentScreenContent/PaymentMethodItem/CardsIcons/VisaIcon/VisaIcon.tsx","webpack://vpnn-extension/./src/popup/project/vrubel/components/PaymentProcess/ui/PaymentScreenContent/PaymentMethodItem/CardsIcons/CardsIcons.tsx","webpack://vpnn-extension/./src/popup/project/vrubel/components/PaymentProcess/ui/PaymentScreenContent/PaymentMethodItem/CardsIcons/CardsIcons.module.css","webpack://vpnn-extension/./src/popup/project/vrubel/components/PaymentProcess/ui/PaymentScreenContent/PaymentMethodItem/PaymentMethodItem.tsx","webpack://vpnn-extension/./src/popup/project/vrubel/components/PaymentProcess/ui/PaymentScreenContent/PaymentScreenContent.tsx","webpack://vpnn-extension/./src/popup/project/vrubel/components/PaymentProcess/hooks/useTariffs.ts","webpack://vpnn-extension/./src/api/premium/fetchTariffs.ts","webpack://vpnn-extension/./src/popup/project/vrubel/components/PaymentProcess/ui/TariffsScreenContent/TariffItem/TariffItem.module.css","webpack://vpnn-extension/./src/popup/project/vrubel/components/PaymentProcess/ui/TariffsScreenContent/TariffItem/TariffItem.tsx","webpack://vpnn-extension/./src/popup/project/vrubel/components/PaymentProcess/ui/TariffsScreenContent/TariffsScreenContent.module.css","webpack://vpnn-extension/./src/popup/project/vrubel/components/PaymentProcess/ui/TariffsScreenContent/TariffsScreenContent.tsx","webpack://vpnn-extension/./src/popup/project/vrubel/components/Onboarding/ui/constants.ts","webpack://vpnn-extension/./src/popup/shared/components/ConnectButton/ui/PauseIcon.tsx","webpack://vpnn-extension/./src/popup/shared/components/ConnectButton/ui/ConnectButton.tsx","webpack://vpnn-extension/./src/popup/shared/components/ConnectButton/hooks/useConnectButton.ts","webpack://vpnn-extension/./src/popup/shared/components/ConnectButton/ui/ConnectButton.module.css","webpack://vpnn-extension/./src/popup/shared/components/ConnectButton/ui/ErrorIcon.tsx","webpack://vpnn-extension/./src/popup/shared/components/ConnectButton/ui/PlayIcon.tsx","webpack://vpnn-extension/./src/popup/shared/components/DebugButton/hooks/useDebugButton.tsx","webpack://vpnn-extension/./src/popup/shared/components/DebugButton/ui/DebugButton.module.css","webpack://vpnn-extension/./src/popup/shared/components/DebugButton/ui/DebugButton.tsx","webpack://vpnn-extension/./src/popup/project/youboost-neo/components/Onboarding/ui/constants.ts","webpack://vpnn-extension/./src/popup/shared/components/Feedback/hooks/useNegativeFeedbackUrl.ts","webpack://vpnn-extension/./src/popup/project/vrubel/components/Feedback/components/NegativeIcon.tsx","webpack://vpnn-extension/./src/popup/project/vrubel/components/Feedback/components/PositiveIcon.tsx","webpack://vpnn-extension/./src/popup/project/vrubel/components/Feedback/components/VrubelIcon.tsx","webpack://vpnn-extension/./src/popup/project/vrubel/components/Feedback/Feedback.module.css","webpack://vpnn-extension/./src/popup/project/vrubel/components/Feedback/Feedback.tsx","webpack://vpnn-extension/./src/popup/shared/components/EnterIdForm/ui/EnterIdForm.module.css","webpack://vpnn-extension/./src/popup/shared/components/EnterIdForm/ui/EnterIdForm.tsx","webpack://vpnn-extension/./src/popup/shared/components/EnterIdForm/hooks/useEnterIdForm.ts","webpack://vpnn-extension/./src/popup/project/vrubel/components/Onboarding/ui/components/EnterIdStep/EnterIdStep.tsx","webpack://vpnn-extension/./src/popup/project/vrubel/components/Onboarding/ui/components/EnterIdStep/EnterIdStep.module.css","webpack://vpnn-extension/./src/popup/project/vrubel/components/Onboarding/ui/components/VrubelIcon.tsx","webpack://vpnn-extension/./src/popup/project/vrubel/components/Onboarding/ui/components/WelcomeStep/WelcomeStep.module.css","webpack://vpnn-extension/./src/popup/project/vrubel/components/Onboarding/ui/components/WelcomeStep/WelcomeStep.tsx","webpack://vpnn-extension/./src/popup/project/vrubel/components/Onboarding/ui/Onboarding.module.css","webpack://vpnn-extension/./src/popup/project/vrubel/components/Onboarding/ui/Onboarding.tsx","webpack://vpnn-extension/./src/popup/shared/components/CopyId/ui/Icon.tsx","webpack://vpnn-extension/./src/popup/shared/components/CopyId/ui/CopyId.module.css","webpack://vpnn-extension/./src/popup/shared/components/CopyId/ui/CopyId.tsx","webpack://vpnn-extension/./src/popup/shared/components/CopyId/hooks/useCopyId.ts","webpack://vpnn-extension/./src/popup/shared/components/CloseIcon/ui/CloseIcon.tsx","webpack://vpnn-extension/./src/popup/shared/components/CloseIcon/ui/CloseIcon.module.css","webpack://vpnn-extension/./src/popup/shared/components/PopUpContainer/ui/PopUpContainer.tsx","webpack://vpnn-extension/./src/popup/shared/components/PopUpContainer/ui/PopUpContainer.module.css","webpack://vpnn-extension/./src/popup/shared/components/ActionButton/ActionButton.tsx","webpack://vpnn-extension/./src/popup/shared/components/ActionButton/ActionButton.module.css","webpack://vpnn-extension/./src/popup/shared/components/ExitPopUp/ui/ExitPopUp.tsx","webpack://vpnn-extension/./src/popup/shared/components/ExitButton/ui/Icon.tsx","webpack://vpnn-extension/./src/popup/shared/components/ExitButton/ui/ExitButton.tsx","webpack://vpnn-extension/./src/popup/shared/components/ExitButton/ui/ExitButton.module.css","webpack://vpnn-extension/./src/popup/project/vrubel/components/PremiumData/ui/utils.ts","webpack://vpnn-extension/./src/popup/project/vrubel/components/PremiumData/ui/PremiumData.module.css","webpack://vpnn-extension/./src/popup/project/youboost/routes/types/RoutePath.ts","webpack://vpnn-extension/./src/popup/project/vrubel/components/PremiumData/ui/PremiumData.tsx","webpack://vpnn-extension/./src/popup/project/vrubel/hooks/useFreePremiumTrial.tsx","webpack://vpnn-extension/./src/popup/project/vrubel/routes/Root/ui/Root.module.css","webpack://vpnn-extension/./src/popup/project/vrubel/routes/router.tsx","webpack://vpnn-extension/./src/popup/project/vrubel/routes/Root/ui/Root.tsx","webpack://vpnn-extension/./src/popup/shared/hooks/useOnboardingScreen.ts","webpack://vpnn-extension/./src/popup/shared/contexts/Theme/hooks/useTheme.ts","webpack://vpnn-extension/./src/popup/project/vrubel/hooks/useNavigateToTariffs.ts","webpack://vpnn-extension/./src/popup/project/vrubel/hooks/useCorrectUserId.ts","webpack://vpnn-extension/./src/popup/project/vrubel/routes/TariffsScreen/ui/TariffsScreen.tsx","webpack://vpnn-extension/./src/popup/project/vrubel/routes/PaymentScreen/ui/PaymentScreen.tsx","webpack://vpnn-extension/./src/popup/project/vrubel/routes/CancelPremium/ui/CancelPremium.tsx","webpack://vpnn-extension/./src/popup/project/vrubel/routes/CancelPremium/ui/CancelPremium.module.css","webpack://vpnn-extension/./src/popup/project/vrubel/routes/ChangeDevice/ui/ChangeDevice.tsx","webpack://vpnn-extension/./src/popup/shared/components/ChangeDeviceContent/hooks/useChangeDevice.ts","webpack://vpnn-extension/./src/popup/project/vrubel/App.tsx","webpack://vpnn-extension/./src/popup/shared/hooks/useApp.ts","webpack://vpnn-extension/./src/popup/shared/hooks/useErrorScreen.ts","webpack://vpnn-extension/./src/popup/shared/hooks/useVersion.ts","webpack://vpnn-extension/./src/popup/shared/hooks/useFetchSubscriptionInfo.ts","webpack://vpnn-extension/./src/popup/project/vrubel/index.tsx","webpack://vpnn-extension/./src/app/i18n/index.ts","webpack://vpnn-extension/./src/locales/en/index.ts","webpack://vpnn-extension/./src/locales/ru/index.ts","webpack://vpnn-extension/./src/app/sentry/initSentryReact.ts"],"sourcesContent":["import dayjs, { extend } from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\nimport ky, { HTTPError, type KyRequest, type KyResponse } from 'ky';\nimport {\n  SessionStorageKey,\n  getSessionStorageData,\n  setSessionStorageData,\n} from '../app/storage/session/shared';\nimport { createSentryScope } from '@app/sentry/createSentryScope';\nimport { wait, getFibonacciNumber } from 'src/utils';\n\nexport const apiScope = createSentryScope('api');\n\nconst limitInSeconds = 60 * 60;\n\nconst getTimingWithLimit = (timingInSec: number, limitInSec: number) => {\n  if (timingInSec > limitInSec) {\n    return limitInSec;\n  }\n  return timingInSec;\n};\n\nconst getExtensionVersion = (): string => {\n  return chrome.runtime.getManifest().version;\n};\n\nconst createCustomHeaders = (): Record<string, string> => {\n  return {\n    'X-Client-Version': getExtensionVersion(),\n  };\n};\n\nextend(utc);\n\nexport const httpClient = ky.extend({\n  retry: {\n    limit: 30,\n    methods: ['get', 'post'],\n  },\n  hooks: {\n    beforeRequest: [\n      async (request) => {\n        const { metaApiData } = await getSessionStorageData(\n          SessionStorageKey.MetaApiData,\n        );\n\n        const apiUrl = metaApiData?.apiBaseUrl;\n        const cookieDomain = metaApiData?.cookieDomain;\n\n        const url = new URL(request.url);\n        if (\n          apiUrl &&\n          cookieDomain &&\n          (url.hostname.includes(apiUrl) || url.hostname.includes(cookieDomain))\n        ) {\n          const customHeaders = createCustomHeaders();\n          Object.entries(customHeaders).forEach(([key, value]) => {\n            request.headers.set(key, value);\n          });\n        }\n        return request;\n      },\n    ],\n    beforeRetry: [\n      async ({ error, retryCount }) => {\n        if (!(error instanceof HTTPError)) {\n          await wait(\n            getTimingWithLimit(\n              10 + getFibonacciNumber(retryCount),\n              limitInSeconds,\n            ) * 1000,\n          );\n          return;\n        }\n        const retryAfterHeader = error.response.headers.get('Retry-After');\n        const retryAfterTiming = retryAfterHeader\n          ? Number(retryAfterHeader)\n          : NaN;\n        if (!isNaN(retryAfterTiming)) {\n          await wait(\n            getTimingWithLimit(\n              retryAfterTiming + getFibonacciNumber(retryCount),\n              limitInSeconds,\n            ) * 1000,\n          );\n          return;\n        }\n        await wait(\n          getTimingWithLimit(\n            10 + getFibonacciNumber(retryCount),\n            limitInSeconds,\n          ) * 1000,\n        );\n        return;\n      },\n    ],\n    afterResponse: [\n      async (request, options, response) => {\n        if (response.ok) {\n          const responseClone = response.clone() as KyResponse;\n          const timestampUtc = dayjs.utc().format();\n\n          let responseData = null;\n          try {\n            responseData = await responseClone.json();\n          } catch (err) {\n            responseData = null;\n          }\n\n          const requestLog = {\n            timestampUtc,\n            status: response.status,\n            statusText: response.statusText,\n            url: request.url,\n          };\n          let { apiHttpSuccess } = await getSessionStorageData(\n            SessionStorageKey.ApiHttpSuccess,\n          );\n          if (!apiHttpSuccess) {\n            apiHttpSuccess = {};\n          }\n          await setSessionStorageData({\n            apiHttpSuccess: {\n              ...apiHttpSuccess,\n              [request.url]: requestLog,\n            },\n          });\n        }\n        return response;\n      },\n    ],\n    beforeError: [\n      async (error) => {\n        const { request, response, message } = error;\n        const responseClone = response.clone() as KyResponse;\n        const requestClone = request.clone() as KyRequest;\n\n        apiScope.setExtra('request', requestClone);\n        apiScope.setExtra('response', responseClone);\n        apiScope.setExtra('message', message);\n        apiScope.setLevel('error');\n        apiScope.setTag('request.url', requestClone.url);\n        apiScope.setTag('request.method', requestClone.method);\n        apiScope.setTag('response.status', responseClone.status);\n        apiScope.captureException(new Error(message));\n\n        let requestData = null;\n        let errorData = null;\n        try {\n          requestData = await requestClone.json();\n          errorData = await responseClone.json();\n        } catch {\n          requestData = null;\n          errorData = null;\n        }\n        const timestampUtc = dayjs.utc().format();\n        const errorLog = {\n          timestampUtc,\n          message,\n          errorData,\n          status: responseClone.status,\n          statusText: responseClone.statusText,\n          requestData,\n        };\n        let { apiHttpErrors } = await getSessionStorageData(\n          SessionStorageKey.ApiHttpErrors,\n        );\n        if (!apiHttpErrors) {\n          apiHttpErrors = {};\n        }\n        await setSessionStorageData({\n          apiHttpErrors: {\n            ...apiHttpErrors,\n            [responseClone.url]: errorLog,\n          },\n        });\n        return error;\n      },\n    ],\n  },\n});\n","import { HTTPError } from 'ky';\nimport { httpClient } from '../httpClient';\nimport {\n  getSubscriptionApiUrl,\n  type GetSubscriptionResponse,\n  getCheckTariffApiUrl,\n  type CheckTariffResponse,\n  getSetupTariffApiUrl,\n  type SetupTariffResponse,\n} from './urls';\nimport { type Tariff } from './types/Tariff';\n\nexport async function fetchCheckTariffAvailability(\n  apiBaseUrl: string,\n  {\n    userId,\n    deviceId,\n    deviceIp,\n    tariff,\n  }: {\n    userId: string;\n    deviceId: string;\n    deviceIp?: string;\n    tariff: Tariff;\n  },\n): Promise<CheckTariffResponse> {\n  const checkTariffUrl = getCheckTariffApiUrl(apiBaseUrl);\n  const data = await httpClient\n    .post<CheckTariffResponse>(checkTariffUrl, {\n      json: {\n        userId,\n        deviceId,\n        deviceIp,\n        tariff,\n      },\n    })\n    .json();\n  return data;\n}\n\nexport async function setupTariff(\n  apiBaseUrl: string,\n  {\n    userId,\n    deviceId,\n    deviceIp,\n    tariff,\n  }: {\n    userId: string;\n    deviceId: string;\n    deviceIp?: string;\n    tariff: Tariff;\n  },\n): Promise<SetupTariffResponse> {\n  try {\n    const setupTariffUrl = getSetupTariffApiUrl(apiBaseUrl);\n\n    const data = await httpClient\n      .post<SetupTariffResponse>(setupTariffUrl, {\n        json: {\n          userId,\n          deviceId,\n          deviceIp,\n          tariff,\n        },\n      })\n      .json();\n    return data;\n  } catch (error) {\n    if (error instanceof HTTPError) {\n      const errorData = await error.response.json();\n\n      if (errorData?.errors?.length > 0) {\n        const errorMessage = errorData.errors\n          .map((error: { description?: string }) => error.description)\n          .filter(Boolean)\n          .join(', ');\n\n        if (errorMessage.length > 0) {\n          throw new Error(errorMessage);\n        }\n      }\n    }\n    throw error;\n  }\n}\n\ntype SubscriptionInfoHTTPError = {\n  error: {\n    code:\n      | 'change_device'\n      | 'user_required'\n      | 'device_id_required'\n      | 'user_not_found';\n  };\n  localized_message: string;\n  parameter_errors: [\n    {\n      field: string;\n      errors: [\n        {\n          code: string;\n          localized_message: string;\n        },\n      ];\n    },\n  ];\n};\n\nexport type SubscriptionInfoError = {\n  error:\n    | 'changeDevice'\n    | 'userRequired'\n    | 'deviceIdRequired'\n    | 'userNotFound'\n    | 'internal'\n    | 'unknown'\n    | 'requestBlockedError';\n};\n\nexport async function fetchSubscriptionInfo(\n  apiBaseUrl: string,\n  {\n    userId,\n    deviceId,\n    deviceIp,\n  }: {\n    userId?: string;\n    deviceId?: string;\n    deviceIp?: string;\n  },\n): Promise<GetSubscriptionResponse | SubscriptionInfoError> {\n  try {\n    const apiUrl = getSubscriptionApiUrl(apiBaseUrl);\n    const data = await httpClient\n      .post<GetSubscriptionResponse>(apiUrl, {\n        json: {\n          userId,\n          deviceId,\n          deviceIp,\n        },\n      })\n      .json();\n\n    return data;\n  } catch (error) {\n    console.error(error);\n    if (error instanceof HTTPError) {\n      if (error.response.status === 400) {\n        const errorData =\n          await error.response.json<SubscriptionInfoHTTPError>();\n        if (errorData.error.code === 'change_device') {\n          return { error: 'changeDevice' };\n        }\n        if (errorData.error.code === 'user_required') {\n          return { error: 'userRequired' };\n        }\n        if (errorData.error.code === 'device_id_required') {\n          return { error: 'deviceIdRequired' };\n        }\n        if (errorData.error.code === 'user_not_found') {\n          return { error: 'userNotFound' };\n        }\n      }\n      if (error.response.status === 500) {\n        return { error: 'internal' };\n      }\n    }\n    if (error instanceof Error && error.message === 'Failed to fetch') {\n      return { error: 'requestBlockedError' };\n    }\n    return { error: 'unknown' };\n  }\n}\n","import { type PaymentStatus } from '../../app/storage/local/premium';\nimport { PaymentMethod } from '../../app/storage/session/shared';\nimport { type Tariff } from './types/Tariff';\n\nconst PREFIX = 'premium/api/v1/uboost-premium';\nconst PREFIX_V2 = 'premium/api/v2/uboost-premium';\nconst PREFIX_V3 = 'api/v2/premium';\n\nconst CREATE_NEW_USER_API = `${PREFIX}/create-new-user`;\n\nexport type CreateNewUserResponse = {\n  userId: string;\n};\n\nexport type CreateNewPaymentLink = {\n  userId: string;\n  tariffName: string;\n  paymentMethod: PaymentMethod;\n};\n\nexport function getCreateNewUserApiUrl(\n  apiBase: string,\n): ReturnType<typeof createApiUrl<typeof CREATE_NEW_USER_API>> {\n  return createApiUrl(apiBase, CREATE_NEW_USER_API);\n}\n\nconst GET_SUBSCRIPTION_API = `${PREFIX_V3}/update-and-get-subscription`;\n\nexport type GetSubscriptionResponse = {\n  data: {\n    user: {\n      public_user_id: string;\n    };\n    subscription: {\n      status: PaymentStatus;\n      paidUntil: string;\n      daysLeft: number;\n      secondsLeft: number;\n    };\n  };\n};\n\nexport function getSubscriptionApiUrl(\n  apiBase: string,\n): ReturnType<typeof createApiUrl<typeof GET_SUBSCRIPTION_API>> {\n  return createApiUrl(apiBase, GET_SUBSCRIPTION_API);\n}\n\nconst CANCEL_SUBSCRIPTION_API = `${PREFIX}/cancel-subscription`;\n\nexport type CancelSubscriptionStatus = 'Canceled' | 'CanceledNoRefund';\n\nexport type CancelSubscriptionResponse = {\n  status: CancelSubscriptionStatus;\n};\n\nexport function getCancelSubscriptionApiUrl(\n  apiBase: string,\n): ReturnType<typeof createApiUrl<typeof CANCEL_SUBSCRIPTION_API>> {\n  return createApiUrl(apiBase, CANCEL_SUBSCRIPTION_API);\n}\n\nconst GET_PROXY_API = `${PREFIX_V2}/get-proxy`;\n\nexport function getProxyApiUrl(\n  apiBase: string,\n): ReturnType<typeof createApiUrl<typeof GET_PROXY_API>> {\n  return createApiUrl(apiBase, GET_PROXY_API);\n}\n\nconst CHANGE_DEVICE_API = `${PREFIX}/change-device`;\n\nexport function getChangeDeviceApiUrl(\n  apiBase: string,\n): ReturnType<typeof createApiUrl<typeof CHANGE_DEVICE_API>> {\n  return createApiUrl(apiBase, CHANGE_DEVICE_API);\n}\n\nconst CHECK_TARIFF_API = `${PREFIX}/check-tariff`;\n\nexport function getCheckTariffApiUrl(\n  apiBase: string,\n): ReturnType<typeof createApiUrl<typeof CHECK_TARIFF_API>> {\n  return createApiUrl(apiBase, CHECK_TARIFF_API);\n}\n\nexport type CheckTariffResponse = {\n  status: 'allowed' | 'disallowed';\n};\n\nconst SETUP_TARIFF_API = `${PREFIX}/setup-tariff`;\n\nexport function getSetupTariffApiUrl(\n  apiBase: string,\n): ReturnType<typeof createApiUrl<typeof SETUP_TARIFF_API>> {\n  return createApiUrl(apiBase, SETUP_TARIFF_API);\n}\n\nexport type SetupTariffResponse =\n  | {\n      status: 'done';\n      paymentLink: null;\n    }\n  | {\n      status: 'need_payment';\n      paymentLink: string;\n    };\n\nconst SETUP_TARIFF_FREE_API = `${PREFIX_V3}/set-free-status`;\n\nexport function getSetupTariffFreeApiUrl(\n  apiBase: string,\n): ReturnType<typeof createApiUrl<typeof SETUP_TARIFF_FREE_API>> {\n  return createApiUrl(apiBase, SETUP_TARIFF_FREE_API);\n}\n\nexport type SetupTariffFreeResponse = GetSubscriptionResponse;\n\nconst FETCH_TARIFFS_API = `${PREFIX}/get-tariffs`;\n\nexport function getFetchTariffsApiUrl(\n  apiBase: string,\n): ReturnType<typeof createApiUrl<typeof FETCH_TARIFFS_API>> {\n  return createApiUrl(apiBase, FETCH_TARIFFS_API);\n}\n\nconst CREATE_NEW_PAYMENT_LINK_API = `${PREFIX}/new-payment-link`;\n\nexport function getCreateNewPaymentLinkUrl(\n  apiBase: string,\n): ReturnType<typeof createApiUrl<typeof CREATE_NEW_PAYMENT_LINK_API>> {\n  return createApiUrl(apiBase, CREATE_NEW_PAYMENT_LINK_API);\n}\n\nexport type CreateNewPaymentLinkResponse = {\n  url: string;\n};\n\nexport type DeviceLimit = number;\n\nexport type TariffData = {\n  tariff: Tariff;\n  price: number;\n  unlockedDays: number;\n  period: string;\n  description: null;\n  monthPrice: number;\n  deviceLimit: DeviceLimit;\n};\n\nexport type FetchTariffsResponse = TariffData[];\n\nfunction createApiUrl<T extends string>(\n  apiBase: string,\n  apiRoute: T,\n): `https://${string}/${T}` {\n  return `https://${apiBase}/${apiRoute}`;\n}\n","export enum Actions {\n  FailedVideoOpen = 'FAILED_VIDEO_OPEN',\n  DirectVideoOpen = 'DIRECT_VIDEO_OPEN',\n  ShowPageLoader = 'SHOW_PAGE_LOADER',\n  VideoOpenerReady = 'VIDEO_OPENER_READY',\n  NetworkConnectionRetry = 'NETWORK_CONNECTION_RETRY',\n  NetworkConnectionRetrySuccess = 'NETWORK_CONNECTION_RETRY_SUCCESS',\n  NetworkConnectionRetryFail = 'NETWORK_CONNECTION_RETRY_FAIL',\n  UpdateProxyData = 'UPDATE_PROXY_DATA',\n  OpenPopup = 'OPEN_POPUP',\n  OpenPopupPayment = 'OPEN_POPUP_PAYMENT',\n  OpenPopupChangeDevice = 'OPEN_POPUP_CHANGE_DEVICE',\n  NavigateToFreeTrial = 'NAVIGATE_TO_FREE_TRIAL',\n  NavigateToPayment = 'NAVIGATE_TO_PAYMENT',\n  PopupReady = 'POPUP_READY',\n  SaveTime = 'SAVE_TIME',\n  CreateNewUser = 'CREATE_NEW_USER',\n  CreateNewUserSuccess = 'CREATE_NEW_USER_SUCCESS',\n}\n","import { Actions } from '@app/actions/shared';\nimport {\n  SubscriptionInfoError,\n  fetchSubscriptionInfo,\n} from '../../../api/premium/fetchPremiumData';\nimport { GetSubscriptionResponse } from '../../../api/premium/urls';\nimport { getSessionMetaApiData } from '../session/metaApiData';\nimport { setSessionStorageData } from '../session/shared';\nimport {\n  LocalStorageKey,\n  getLocalStorageData,\n  localStorageScope,\n  setLocalStorageData,\n} from './shared';\nimport { getDeviceId, getDeviceIP } from '@background/client/utils';\nimport { getIsPremiumStatus } from '@app/utils/getIsPremiumStatus';\n\nexport enum LocalStoragePremiumKey {\n  UserId = 'userId',\n  DaysLeft = 'daysLeft',\n  HasPremium = 'hasPremium',\n  PaidUntil = 'paidUntil',\n  SecondsLeft = 'secondsLeft',\n  Status = 'status',\n  IsSubscriptionInfoError = 'isSubscriptionInfoError',\n  IsChangeDeviceError = 'isChangeDeviceError',\n  IsAdBannerShown = 'isAdBannerShown',\n  IsAllInternetProxy = 'isAllInternetProxy',\n  PACPremiumData = 'pacPremiumData',\n  IsFreePremiumTrialAvailable = 'isFreePremiumTrialAvailable',\n}\n\nexport type PaymentStatus = 'New' | 'Paid' | 'Expired' | 'Trial' | 'Free';\n\nexport type PACPremiumData = {\n  premium: string;\n  allInternet: string;\n};\n\nexport type LocalStoragePremiumData = {\n  userId?: string;\n  daysLeft?: number;\n  hasPremium?: boolean;\n  paidUntil?: string;\n  secondsLeft?: number;\n  status?: PaymentStatus;\n  isSubscriptionInfoError?: boolean;\n  isChangeDeviceError?: boolean;\n  isAdBannerShown?: boolean;\n  isAllInternetProxy?: boolean;\n  pacPremiumData?: PACPremiumData;\n  isFreePremiumTrialAvailable?: boolean;\n};\n\nexport async function getLocalStoragePremiumData<\n  Key extends LocalStoragePremiumKey,\n>(\n  keys: Key[] | Key,\n): Promise<\n  | {\n      [P in Key[][number]]: LocalStoragePremiumData[P];\n    }\n  | LocalStoragePremiumData\n> {\n  if (!Array.isArray(keys)) {\n    return chrome.storage.local.get(keys) as Promise<{\n      [P in Key[][number]]: LocalStoragePremiumData[P];\n    }>;\n  }\n  return chrome.storage.local.get(keys) as Promise<LocalStoragePremiumData>;\n}\n\nexport async function setLocalStoragePremiumData(\n  data: Partial<LocalStoragePremiumData>,\n): Promise<void> {\n  await chrome.storage.local.set(data);\n}\n\nexport async function deleteLocalStoragePremiumData(\n  key: LocalStoragePremiumKey | LocalStoragePremiumKey[],\n): Promise<void> {\n  await chrome.storage.local.remove(key);\n}\n\nfunction isGetSubscriptionInfoError(\n  data: GetSubscriptionResponse | SubscriptionInfoError,\n): data is SubscriptionInfoError {\n  return 'error' in data && data.error !== null;\n}\n\nexport async function getSubscriptionInfo(): Promise<GetSubscriptionResponse | null> {\n  if (process.env.EXTENSION_CODE === 'naruzhuv2') {\n    return null;\n  }\n\n  const isOnlyPremium: boolean = process.env.IS_ONLY_PREMIUM === 'true';\n\n  try {\n    await setLocalStoragePremiumData({ isSubscriptionInfoError: false });\n\n    const { apiBaseUrl } = await getSessionMetaApiData();\n\n    const deviceId = await getDeviceId();\n    const deviceIp = await getDeviceIP();\n\n    const { userId } = await getLocalStoragePremiumData(\n      LocalStoragePremiumKey.UserId,\n    );\n\n    if (!userId) {\n      localStorageScope.captureException(\n        new Error('User ID is empty when fetching subscription info'),\n      );\n      return null;\n    }\n\n    const subscriptionInfo = await fetchSubscriptionInfo(apiBaseUrl, {\n      userId,\n      deviceId,\n      deviceIp,\n    });\n\n    if (isGetSubscriptionInfoError(subscriptionInfo)) {\n      if (subscriptionInfo.error === 'changeDevice') {\n        await chrome.runtime.sendMessage({\n          action: Actions.OpenPopupChangeDevice,\n        });\n\n        await setLocalStoragePremiumData({ isChangeDeviceError: true });\n        await setLocalStorageData({ targetState: 'disconnected' });\n        return null;\n      }\n\n      if (subscriptionInfo.error === 'requestBlockedError') {\n        await setSessionStorageData({\n          requestBlockedError:\n            'request fetchSubscriptionInfo is probably blocked',\n        });\n      }\n\n      throw new Error(subscriptionInfo.error);\n    }\n\n    const { daysLeft, paidUntil, status, secondsLeft } =\n      subscriptionInfo?.data?.subscription ?? {};\n\n    const isPremiumStatus = getIsPremiumStatus(status);\n\n    await setLocalStoragePremiumData({\n      daysLeft,\n      paidUntil,\n      status,\n      secondsLeft,\n    });\n\n    const { hasPremium } = await getLocalStoragePremiumData(\n      LocalStoragePremiumKey.HasPremium,\n    );\n\n    const { currentState } = await getLocalStorageData(\n      LocalStorageKey.CurrentState,\n    );\n\n    await setLocalStoragePremiumData({\n      hasPremium: isOnlyPremium || isPremiumStatus,\n    });\n\n    if (status === 'Expired' && hasPremium && currentState === 'connected') {\n      await setLocalStorageData({ targetState: 'disconnected' });\n    }\n\n    return subscriptionInfo;\n  } catch (error) {\n    console.error(error);\n\n    if (error instanceof Error && error.message === 'userNotFound') {\n      throw error;\n    }\n\n    await setLocalStoragePremiumData({ isSubscriptionInfoError: true });\n    return null;\n  }\n}\n","import { PaymentStatus } from '@app/storage/local/premium';\n\nexport function getIsPremiumStatus(status: PaymentStatus): boolean {\n  return status !== 'Free';\n}\n","import {\n  CookieKey,\n  getCookieData,\n  setCookieData,\n} from '@app/storage/cookies/shared';\nimport {\n  LocalStorageKey,\n  getLocalStorageData,\n  setLocalStorageData,\n} from '../../app/storage/local/shared';\n\nexport function generateUUID(): string {\n  // Generate a UUID, for example, using the uuid library if available\n  // return 'xxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n  //   const r = (Math.random() * 16) | 0,\n  //     v = c === 'x' ? r : (r & 0x3) | 0x8;\n  //   return v.toString(16);\n  // });\n  return crypto.randomUUID();\n}\n\nasync function generateDeviceId(): Promise<string> {\n  const { deviceId: cookieDeviceId } = await getCookieData(CookieKey.DeviceId);\n\n  if (cookieDeviceId) {\n    await setLocalStorageData({ [LocalStorageKey.DeviceId]: cookieDeviceId });\n    return cookieDeviceId;\n  }\n\n  const deviceId = generateUUID();\n  await setCookieData({ [CookieKey.DeviceId]: deviceId });\n\n  return deviceId;\n}\n\nexport async function getDeviceId(): Promise<string> {\n  const { deviceId } = await getLocalStorageData(LocalStorageKey.DeviceId);\n\n  if (deviceId) {\n    return deviceId;\n  }\n\n  const newDeviceId = await generateDeviceId();\n\n  return newDeviceId;\n}\n\n/**\n * @deprecated - will remove after backend fix\n */\nexport async function getDeviceIP(): Promise<string | undefined> {\n  try {\n    const data = {\n      ip: '127.0.0.1', // dummy ip\n    };\n\n    await setLocalStorageData({ [LocalStorageKey.DeviceIp]: data.ip });\n\n    return data.ip;\n  } catch (error) {\n    console.warn('Error fetching public IP:', error);\n  }\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"overlay\":\"mJICyhZh7Kh4xsaWtve1\",\"container\":\"Ma0LW3viaN_qMuzCEk4I\",\"item\":\"eHGSzXQxMfnUttUO72jc\",\"apply-button\":\"OMfmg9E8wwTk1o6Qbadn\"};","import React, { useCallback, useEffect, useState } from 'react';\nimport { Feature } from '../../../../../app/features/types/Feature';\nimport styles from './FeatureToggler.module.css';\nimport { featureStore } from '@app/features/list';\nimport { useFeaturesList } from '@app/features/hooks/useFeaturesList';\n\nexport const FeatureToggler: React.FC = () => {\n  const { featuresList: features } = useFeaturesList();\n\n  const [isVisible, setIsVisible] = useState(false);\n\n  const toggleFeature = useCallback((key: Feature, isActive: boolean) => {\n    featureStore.setFeatureValues({ [key]: isActive });\n  }, []);\n\n  useEffect(() => {\n    Object.defineProperty(window, 'magicToggler', {\n      configurable: true,\n      get() {\n        setIsVisible(true);\n        return 'Feature toggler is now visible!';\n      },\n    });\n\n    return () => {\n      // @ts-ignore\n      delete window.magicToggler;\n    };\n  }, []);\n\n  const applyChanges = () => {\n    chrome.runtime.reload();\n  };\n\n  const handleReset = () => {\n    featureStore.reset();\n    chrome.runtime.reload();\n  };\n\n  if (!isVisible || !features) {\n    return null;\n  }\n\n  return (\n    <div className={styles.overlay}>\n      <div className={styles.container}>\n        <h3>Feature Toggler</h3>\n        {Object.entries(features).map(([feature, isActive]) => (\n          <label key={feature} className={styles.item}>\n            <input\n              type=\"checkbox\"\n              checked={\n                features[\n                  feature as Feature.DevMeta | Feature.SwitchYoutubeInternet\n                ]\n              }\n              onChange={() => toggleFeature(feature as Feature, !isActive)}\n            />\n            {feature}\n          </label>\n        ))}\n        <button className={styles['apply-button']} onClick={applyChanges}>\n          Применить\n        </button>\n        <button className={styles['apply-button']} onClick={handleReset}>\n          Сбросить\n        </button>\n      </div>\n    </div>\n  );\n};\n","import { useSyncExternalStore } from 'react';\nimport { featureStore } from '../list';\n\nexport function useFeaturesList() {\n  return useSyncExternalStore(featureStore.subscribe, featureStore.getSnapshot);\n}\n","import {\n  LocalStoragePremiumData,\n  LocalStoragePremiumKey,\n} from '@app/storage/local/premium';\nimport { LocalStorageKey, LocalStorageData } from '@app/storage/local/shared';\nimport { useState, useEffect } from 'react';\n\ntype StorageValue<K> = K extends LocalStorageKey\n  ? LocalStorageData[K]\n  : K extends LocalStoragePremiumKey\n    ? LocalStoragePremiumData[K]\n    : never;\n\nexport function useLocalStorage<\n  K extends LocalStorageKey | LocalStoragePremiumKey,\n>(key: K | K[], defaultValue?: StorageValue<K>) {\n  const [value, setValue] = useState<StorageValue<K> | null>(\n    defaultValue ?? null,\n  );\n  const storageKey = Array.isArray(key) ? key[0] : key;\n\n  useEffect(() => {\n    // Initial value\n    chrome.storage.local.get(storageKey, (result) => {\n      setValue(result[storageKey] as StorageValue<K>);\n    });\n\n    // Listen for changes\n    const listener = (changes: {\n      [key: string]: chrome.storage.StorageChange;\n    }) => {\n      if (changes[storageKey]) {\n        setValue(changes[storageKey].newValue as StorageValue<K>);\n      }\n    };\n\n    chrome.storage.local.onChanged.addListener(listener);\n\n    return () => {\n      chrome.storage.local.onChanged.removeListener(listener);\n    };\n  }, [storageKey]);\n\n  const set = async (newValue: StorageValue<K>) => {\n    await chrome.storage.local.set({ [storageKey]: newValue });\n  };\n\n  return [value, set] as const;\n}\n","import { createContext, useCallback, useMemo, useState } from 'react';\nimport {\n  LocalStorageKey,\n  getLocalStorageData,\n} from '../../../../app/storage/local/shared';\nimport { useLocalStorage } from '@popup/shared/hooks/useLocalStorage';\nimport { LocalStoragePremiumKey } from '@app/storage/local/premium';\n\nexport type FeedbackOverlayContextType = {\n  isFeedbackOverlayShown: boolean;\n  checkAndShowFeedbackOverlay: () => Promise<void>;\n  closeFeedbackOverlay: () => void;\n};\n\nexport const FeedbackOverlayContext = createContext<\n  FeedbackOverlayContextType | undefined\n>(undefined);\n\nexport function FeedbackOverlayContextProvider({\n  children,\n}: {\n  children: React.ReactNode;\n}): JSX.Element {\n  const [isFeedbackOverlayShown, setIsFeedbackOverlayShown] = useState(false);\n  const [hasPremium] = useLocalStorage(\n    LocalStoragePremiumKey.HasPremium,\n    false,\n  );\n\n  const checkAndShowFeedbackOverlay = useCallback(async (): Promise<void> => {\n    const { feedbackProvided, connectionCount } = await getLocalStorageData([\n      LocalStorageKey.ConnectionCount,\n      LocalStorageKey.FeedbackProvided,\n    ]);\n\n    const feedbackMilestones = [1, 2, 3, 5, 8, 13, 21, 34, 55];\n\n    if (\n      hasPremium &&\n      !feedbackProvided &&\n      connectionCount !== undefined &&\n      feedbackMilestones.includes(connectionCount)\n    ) {\n      setIsFeedbackOverlayShown(true);\n    }\n  }, [hasPremium]);\n\n  function closeFeedbackOverlay(): void {\n    setIsFeedbackOverlayShown(false);\n  }\n\n  const value = useMemo(\n    () => ({\n      isFeedbackOverlayShown,\n      checkAndShowFeedbackOverlay,\n      closeFeedbackOverlay,\n    }),\n    [checkAndShowFeedbackOverlay, isFeedbackOverlayShown],\n  );\n\n  return (\n    <FeedbackOverlayContext.Provider value={value}>\n      {children}\n    </FeedbackOverlayContext.Provider>\n  );\n}\n","import { useContext } from 'react';\nimport {\n  FeedbackOverlayContext,\n  type FeedbackOverlayContextType,\n} from '../FeedbackOverlayContext';\n\nexport function useFeedbackOverlay(): FeedbackOverlayContextType {\n  const context = useContext(FeedbackOverlayContext);\n  if (context === undefined) {\n    throw new Error(\n      'useFeedbackOverlay must be used within a FeedbackOverlayProvider',\n    );\n  }\n  return context;\n}\n","export const extensionsMap: Record<string, string> = {\n  cfhdojbkjhnklbpkdaibdccddilifddb: 'AdBlock Plus',\n  gighmmpiobklfepjocnamgkkbiglidom: 'AdBlock',\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"koN910L0HKQiDoVfefAe\",\"content\":\"vIEzBfwMbLt7imC8W6F2\",\"description\":\"jnN0L_iQqG3m5UJSDuY4\",\"title\":\"RmkiZeTQObwhTK0y__hG\",\"icon\":\"uxJOOqQPN20zyv4sXeBs\",\"info\":\"UirOh1l16W0ruSekmH9e\",\"warning-info-text\":\"RC3nb9Shf4rAqAvAwUMx\",\"buttons\":\"xIxCVfrxmPRRt64o917V\",\"button\":\"eNpBtM7otQPOeaO8mgrg\",\"link\":\"gmIfuMQrfpa3NTxGF96s\"};","import { useEffect, useState, type ReactElement } from 'react';\nimport { LocalStorageKey } from '@app/storage/local/shared';\nimport { useLocalStorage } from '@popup/shared/hooks/useLocalStorage';\nimport { extensionsMap } from './constants';\n\nimport styles from './ProxyControlledByOtherExtensions.module.css';\ntype ProxyControlledByOtherExtensionsProps = {\n  onClick: () => Promise<void>;\n  children: ReactElement;\n  conflictType: 'proxy' | 'adBlocker';\n};\n\nconst DIAGNOSTIC_URL = process.env.DIAGNOSTIC_EXTENSIONS_URL;\n\nexport function ProxyControlledByOtherExtensions({\n  onClick,\n  children,\n  conflictType,\n}: ProxyControlledByOtherExtensionsProps): JSX.Element {\n  const [dataMonitoring] = useLocalStorage([\n    LocalStorageKey.ExtensionMonitoring,\n  ]);\n  const [name, setName] = useState<string | null>(null);\n  const [fullName, setFullName] = useState<string | null>(null);\n  const [icon, setIcon] = useState<string | null>(null);\n\n  const extensionTitle = process.env.EXTENSION_TITLE ?? 'нашего расширения';\n  const extensionCode = process.env.EXTENSION_CODE;\n\n  useEffect(() => {\n    if (!dataMonitoring?.[conflictType]?.hasConflictingExtension) {\n      return;\n    }\n\n    const {\n      conflictingExtensionIcon,\n      conflictingExtensionId,\n      conflictingExtensionName,\n    } = dataMonitoring[conflictType];\n    const extensionNameFromMap = conflictingExtensionId\n      ? extensionsMap[conflictingExtensionId]\n      : null;\n\n    setIcon(conflictingExtensionIcon ?? null);\n    setName(extensionNameFromMap ?? conflictingExtensionName ?? null);\n    setFullName(conflictingExtensionName ?? null);\n  }, [dataMonitoring, conflictType]);\n\n  const handleLinkClick = async () => {\n    await onClick();\n    window.open(DIAGNOSTIC_URL, '_blank', 'noopener,noreferrer');\n  };\n\n  return (\n    <div className={styles.container}>\n      {children}\n      <div className={styles.content}>\n        <div className={styles.description}>\n          {name ? (\n            <>\n              <h2 className={styles.title}>\n                {icon && (\n                  <img\n                    src={icon}\n                    alt=\"extension-icon\"\n                    className={styles.icon}\n                  />\n                )}\n                <span>{name}</span>\n                <br />\n                <span>Блокирует работу {extensionTitle}</span>\n              </h2>\n              <p className={styles['warning-info-text']}>\n                Пожалуйста, отключите расширение {fullName && `«${fullName}»`},\n                оно мешает работе {extensionTitle}\n              </p>\n            </>\n          ) : (\n            <>\n              <h2 className={styles.title}>\n                Кажется, другие расширения мешают работе {extensionTitle}\n              </h2>\n              <p className={styles['warning-info-text']}>\n                Мы заметили, что одно из расширений в вашем браузере блокирует\n                работу нашего сервиса. Чтобы {extensionTitle} работал корректно,\n                пожалуйста, временно отключите другие расширения, которые влияют\n                на подключение.\n              </p>\n            </>\n          )}\n        </div>\n        <div className={styles.buttons}>\n          {extensionCode === 'youboost-neo' && (\n            <button\n              className={`${styles.button} ${styles.link} premium`}\n              onClick={handleLinkClick}\n            >\n              Нужна помощь?\n            </button>\n          )}\n          <button onClick={onClick} className={`${styles.button} premium`}>\n            Все понятно\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"smCk0czxwx9En13YlsQg\",\"error\":\"ZW3DXH51S02ODLkxGGf4\",\"emoji\":\"p8BnVvStm3FqCIVbOcaA\",\"reload\":\"eGdUYPJVA84txS9xYXQm\",\"reload-content\":\"GMN_kKnLNg2yIUwnqA9X\",\"loader\":\"IHbDDoP6P7sHutoLGmJQ\",\"spin\":\"y6NkIHnrP3ldT7qm18VQ\",\"code\":\"Zs6TgWIbi08Cxkj5IeTm\"};","import { clsx } from 'clsx';\n\nimport styles from './Error.module.css';\n\ntype ErrorProps = {\n  className?: string;\n  code?: number;\n  isLoading?: boolean;\n  text?: string | null;\n  textLink?: React.ReactNode;\n  buttonText?: string;\n  onClick?: () => void;\n  header?: React.ReactNode;\n  footer?: React.ReactNode;\n};\n\nconst defaultText =\n  'Попробуйте перезапустить или полностью переустановить расширение. Если это не поможет, то рекомендуем подождать 30-60 минут и попробовать снова.';\n\nconst defaultButtonText = 'Перезапустить расширение';\n\nexport function Error({\n  className,\n  code,\n  isLoading = false,\n  text = defaultText,\n  textLink,\n  buttonText = defaultButtonText,\n  onClick,\n  header,\n  footer,\n}: ErrorProps): JSX.Element {\n  const handleClick = onClick ?? (() => chrome.runtime.reload());\n\n  return (\n    <div className={clsx(styles.wrapper, className)}>\n      {header && header}\n      <div className={styles.error}>\n        <div className={styles.emoji}>😢</div>\n        <div>\n          <h1>Упс... Возникла проблема</h1>\n          <p>\n            {text}\n            {textLink && textLink}\n          </p>\n        </div>\n        <button\n          disabled={isLoading}\n          type=\"button\"\n          className={styles.reload}\n          onClick={handleClick}\n        >\n          <div className={styles['reload-content']}>\n            {isLoading && <div className={styles.loader} />}\n            {buttonText}\n          </div>\n        </button>\n        {!!code && <span className={styles.code}>Код ошибки: {code} </span>}\n      </div>\n      {footer && footer}\n    </div>\n  );\n}\n","import {\n  getLocalStorageData,\n  LocalStorageKey,\n} from '@app/storage/local/shared';\nimport { useEffect, useState } from 'react';\n\nexport const useConfigsBaseUrl = () => {\n  const [configsUrl, setConfigsUrl] = useState(process.env.CONFIG_BASE_URL_1);\n\n  useEffect(() => {\n    const getConfigsBaseUrl = async () => {\n      const { configsBaseUrl } = await getLocalStorageData(\n        LocalStorageKey.ConfigsBaseUrl,\n      );\n      if (configsBaseUrl) {\n        setConfigsUrl(configsBaseUrl);\n      }\n    };\n    void getConfigsBaseUrl();\n  }, []);\n\n  return { configsUrl };\n};\n","import { Error } from '../../Error';\nimport { useConfigsBaseUrl } from 'src/utils/hooks';\n\ntype BrowserErrorProps = {\n  onClick: () => void;\n  header?: React.ReactNode;\n  footer?: React.ReactNode;\n};\nexport function BrowserError({\n  onClick,\n  header,\n  footer,\n}: BrowserErrorProps): JSX.Element {\n  const { configsUrl } = useConfigsBaseUrl();\n\n  const helpUrl = new URL(process.env.HELP_URL, configsUrl);\n\n  const isNoFAQ: boolean = process.env.IS_NO_FAQ === 'true';\n  const title = process.env.EXTENSION_TITLE || '';\n  const text = isNoFAQ\n    ? `К сожалению, ${title} не поддерживает данный\n  браузер. Вы можете продолжить пользоваться расширением, но его работа\n  не гарантирована`\n    : `К сожалению, ${title} не поддерживает данный\n  браузер. Вы можете продолжить пользоваться расширением, но его работа\n  не гарантирована. Для получения списка поддерживаемых браузеров и\n  другой информации о работе расширения перейдите на страницу`;\n\n  return (\n    <Error\n      text={text}\n      textLink={\n        isNoFAQ ? null : (\n          <a href={helpUrl.toString()} target=\"_blank\" rel=\"noreferrer\">\n            FAQ\n          </a>\n        )\n      }\n      buttonText=\"Ok\"\n      onClick={onClick}\n      header={header}\n      footer={footer}\n    />\n  );\n}\n","import { Component, type ReactElement } from 'react';\nimport { Error } from '../../Error';\ntype ErrorBoundaryProps = {\n  children: ReactElement;\n  footer?: ReactElement;\n};\n\nexport class ErrorBoundary extends Component<\n  ErrorBoundaryProps,\n  { hasError: boolean }\n> {\n  constructor(props: ErrorBoundaryProps) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(): { hasError: boolean } {\n    return { hasError: true };\n  }\n\n  render(): JSX.Element {\n    if (this.state.hasError) {\n      return <Error footer={this.props.footer} />;\n    }\n\n    return this.props.children;\n  }\n}\n","import { Error } from '../../Error';\n\nexport function OldVersionError({\n  header,\n}: {\n  header?: React.ReactNode;\n}): JSX.Element {\n  return (\n    <Error\n      code={1003}\n      text=\"Версия вашего расширения устарела, пожалуйста, обновитесь до последней версии или попробуйте полностью переустановить расширение\"\n      buttonText=\"Обновить расширение\"\n      header={header}\n    />\n  );\n}\n","import { LocalStoragePremiumKey } from '@app/storage/local/premium';\nimport { type PaymentStatus } from '@app/storage/local/premium';\nimport { useLocalStorage } from './useLocalStorage';\n\nexport function usePaymentStatus(): PaymentStatus | undefined {\n  const [paymentStatus] = useLocalStorage(LocalStoragePremiumKey.Status);\n\n  return paymentStatus ?? undefined;\n}\n","import { type ReactNode, createContext } from 'react';\nimport { useThemeContext } from './hooks/useThemeContext';\n\nexport type Theme = 'default' | 'premium';\n\nexport type ThemeContextType = {\n  theme: Theme;\n  isThemeLoading: boolean;\n};\n\nexport const ThemeContext = createContext<ThemeContextType | undefined>(\n  undefined,\n);\n\ntype ThemeProviderProps = {\n  children: ReactNode;\n};\n\nexport function ThemeContextProvider({\n  children,\n}: ThemeProviderProps): JSX.Element {\n  const { theme, isThemeLoading } = useThemeContext();\n\n  return (\n    <ThemeContext.Provider value={{ theme, isThemeLoading }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n","import { useEffect, useLayoutEffect, useState } from 'react';\nimport { type Theme } from '../ThemeContext';\nimport { PaymentStatus } from '@app/storage/local/premium';\nimport { usePaymentStatus } from '@popup/shared/hooks/usePaymentStatus';\n\nexport function useThemeContext(): {\n  theme: Theme;\n  isThemeLoading: boolean;\n} {\n  const [theme, setTheme] = useState<Theme>('premium');\n  const [isThemeLoading, setIsThemeLoading] = useState(true);\n  const paymentStatus = usePaymentStatus();\n\n  useEffect(() => {\n    if (paymentStatus !== undefined) {\n      setTheme(paymentStatus === 'Free' ? 'default' : 'premium');\n      setIsThemeLoading(false);\n    }\n  }, [paymentStatus]);\n\n  useLayoutEffect(() => {\n    document.body.classList.toggle('premium', theme === 'premium');\n  }, [theme]);\n\n  return { theme, isThemeLoading };\n}\n","export enum Alarms {\n  UpdateProxyData = 'updateProxyData',\n  EnableProxy = 'enableProxy',\n  DisableProxy = 'disableProxy',\n  EnableProxyOnFail = 'EnableProxyOnFail',\n  UpdateMetaApiData = 'updateMetaApiData',\n  RestoreLitePAC = 'RestoreLitePAC',\n  UpdatePacScriptToFullPAC = 'UpdatePacScriptToFullPAC',\n  ExtensionMonitoring = 'extensionMonitoring',\n  ExtensionConflictWarningProxy = 'extensionConflictWarningProxy',\n  ExtensionConflictWarningAdBlocker = 'extensionConflictWarningAdBlocker',\n}\n\nexport async function getChromeAlarm(\n  name: Alarms,\n): Promise<chrome.alarms.Alarm | undefined> {\n  const alarm = await chrome.alarms.get(name);\n  return alarm;\n}\n","import { CookieKey, removeCookieData } from '@app/storage/cookies/shared';\nimport {\n  LocalStoragePremiumKey,\n  deleteLocalStoragePremiumData,\n  getLocalStoragePremiumData,\n  type PaymentStatus,\n} from '@app/storage/local/premium';\nimport {\n  deleteLocalStorageData,\n  LocalStorageKey,\n  setLocalStorageData,\n} from '@app/storage/local/shared';\nimport {\n  deleteSessionStorageData,\n  SessionStorageKey,\n} from '@app/storage/session/shared';\nimport { useCallback, useEffect, useState } from 'react';\n\ntype PremiumDataHookValues = {\n  userId?: string;\n  premiumDaysLeft?: number;\n  secondsLeft?: number;\n  hasPremium?: boolean;\n  isError: boolean;\n  isLoading: boolean;\n  clearPremiumData: () => Promise<void>;\n};\n\nexport function usePremiumData(): PremiumDataHookValues {\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [premiumDaysLeft, setPremiumDaysLeft] = useState<number>();\n  const [userId, setUserId] = useState<string>();\n  const [hasPremium, setHasPremium] = useState<boolean>();\n  const [isError, setIsError] = useState<boolean>(false);\n  const [premiumSecondsLeft, setPremiumSecondsLeft] = useState<\n    number | undefined\n  >();\n\n  useEffect(() => {\n    async function getPremiumInfo(): Promise<void> {\n      setIsLoading(true);\n      const {\n        userId: id,\n        daysLeft,\n        hasPremium: hasPremiumCurrently,\n        isSubscriptionInfoError,\n        status,\n        secondsLeft,\n      } = await getLocalStoragePremiumData([\n        LocalStoragePremiumKey.UserId,\n        LocalStoragePremiumKey.DaysLeft,\n        LocalStoragePremiumKey.HasPremium,\n        LocalStoragePremiumKey.IsSubscriptionInfoError,\n        LocalStoragePremiumKey.Status,\n        LocalStoragePremiumKey.SecondsLeft,\n      ]);\n      setUserId(id);\n      setPremiumDaysLeft(daysLeft);\n      setHasPremium(Boolean(hasPremiumCurrently));\n      setIsError(Boolean(isSubscriptionInfoError));\n      setPremiumSecondsLeft(secondsLeft);\n      setIsLoading(false);\n    }\n    void getPremiumInfo();\n  }, []);\n\n  const clearAllAlarms = useCallback(async (): Promise<void> => {\n    await chrome.alarms.clearAll();\n  }, []);\n\n  const clearLocalStoragePremiumData = useCallback(async (): Promise<void> => {\n    for (const key of Object.values(LocalStoragePremiumKey)) {\n      await deleteLocalStoragePremiumData([key]);\n    }\n  }, []);\n\n  const clearLocalStorageData = useCallback(async (): Promise<void> => {\n    for (const key of Object.values(LocalStorageKey)) {\n      await deleteLocalStorageData([key]);\n    }\n  }, []);\n\n  const clearSessionStorageData = useCallback(async (): Promise<void> => {\n    for (const key of Object.values(SessionStorageKey)) {\n      await deleteSessionStorageData([key]);\n    }\n  }, []);\n\n  const clearCookies = useCallback(async (): Promise<void> => {\n    await removeCookieData([CookieKey.UserId, CookieKey.DeviceId]);\n  }, []);\n\n  useEffect(() => {\n    function listener(changes: {\n      daysLeft?: { newValue?: number };\n      secondsLeft?: { newValue?: number };\n      hasPremium?: { newValue?: boolean };\n      isSubscriptionInfoError?: { newValue?: boolean };\n      status?: { newValue?: PaymentStatus };\n    }): void {\n      if (changes.daysLeft) {\n        setPremiumDaysLeft(changes.daysLeft.newValue);\n      }\n      if (changes.secondsLeft) {\n        setPremiumSecondsLeft(changes.secondsLeft.newValue);\n      }\n      if (changes.hasPremium) {\n        setHasPremium(Boolean(changes.hasPremium.newValue));\n      }\n      if (changes.isSubscriptionInfoError) {\n        setIsError(Boolean(changes.isSubscriptionInfoError.newValue));\n      }\n    }\n    chrome.storage.onChanged.addListener(listener);\n    return () => {\n      chrome.storage.onChanged.removeListener(listener);\n    };\n  }, []);\n\n  useEffect(() => {\n    function listener(changes: { userId?: { newValue?: string } }): void {\n      if (changes.userId) {\n        setUserId(changes.userId.newValue);\n      }\n    }\n    chrome.storage.onChanged.addListener(listener);\n    return () => {\n      chrome.storage.onChanged.removeListener(listener);\n    };\n  }, []);\n\n  const clearPremiumData = useCallback(async (): Promise<void> => {\n    await clearLocalStoragePremiumData();\n    await clearLocalStorageData();\n    await clearCookies();\n    await clearAllAlarms();\n    await clearSessionStorageData();\n\n    await setLocalStorageData({ onboardingScreenStatus: 'step-zero' });\n\n    setUserId(undefined);\n    setPremiumDaysLeft(undefined);\n    setHasPremium(undefined);\n    setIsError(false);\n    setPremiumSecondsLeft(undefined);\n  }, [\n    clearAllAlarms,\n    clearCookies,\n    clearLocalStorageData,\n    clearLocalStoragePremiumData,\n    clearSessionStorageData,\n  ]);\n\n  return {\n    isLoading,\n    hasPremium,\n    userId,\n    premiumDaysLeft,\n    isError,\n    secondsLeft: premiumSecondsLeft,\n    clearPremiumData,\n  };\n}\n","type IconProps = {\n  className?: string;\n};\n\nexport function Logo({ className }: IconProps): JSX.Element {\n  return (\n    <svg\n      className={className}\n      width=\"159\"\n      height=\"18\"\n      viewBox=\"0 0 159 18\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M150.401 5.65352C151.939 5.65352 153.308 5.89014 154.508 6.36338C155.725 6.81972 156.679 7.50423 157.372 8.4169C158.065 9.31268 158.412 10.3944 158.412 11.662C158.412 12.9465 158.065 14.0451 157.372 14.9577C156.696 15.8704 155.75 16.5634 154.533 17.0366C153.333 17.5099 151.964 17.7465 150.426 17.7465H141.578C141.392 17.7465 141.232 17.6789 141.096 17.5437C140.961 17.4084 140.894 17.2479 140.894 17.062V0.684507C140.894 0.498592 140.961 0.338029 141.096 0.202817C141.232 0.0676056 141.392 0 141.578 0H146.801C146.987 0 147.147 0.0676056 147.282 0.202817C147.418 0.338029 147.485 0.498592 147.485 0.684507V5.65352H150.401ZM150.401 13.0056C150.941 13.0056 151.356 12.8789 151.643 12.6254C151.93 12.3718 152.074 12.0254 152.074 11.5859C152.074 10.707 151.516 10.2676 150.401 10.2676H147.485V13.0056H150.401Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M118.974 18C118.788 18 118.619 17.9324 118.467 17.7972C118.332 17.662 118.264 17.5014 118.264 17.3155V13.2592C118.264 13.0732 118.332 12.9127 118.467 12.7775C118.602 12.6423 118.763 12.5746 118.949 12.5746C119.557 12.5746 120.022 11.8648 120.343 10.4451C120.664 9.02535 120.825 6.97183 120.825 4.28451V0.684507C120.825 0.498592 120.892 0.338029 121.027 0.202817C121.163 0.0676056 121.323 0 121.509 0H135.909C136.095 0 136.255 0.0676056 136.391 0.202817C136.526 0.338029 136.593 0.498592 136.593 0.684507V17.062C136.593 17.2479 136.526 17.4084 136.391 17.5437C136.255 17.6789 136.095 17.7465 135.909 17.7465H131.194C131.008 17.7465 130.847 17.6789 130.712 17.5437C130.577 17.4084 130.509 17.2479 130.509 17.062V5.45071H126.656V6.74366C126.656 10.631 126.005 13.4789 124.703 15.2873C123.402 17.0958 121.492 18 118.974 18Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M114.014 12.8028C114.2 12.8028 114.361 12.8704 114.496 13.0056C114.631 13.1408 114.699 13.3014 114.699 13.4873V17.062C114.699 17.2479 114.631 17.4084 114.496 17.5437C114.361 17.6789 114.2 17.7465 114.014 17.7465H97.9917C97.8058 17.7465 97.6452 17.6789 97.51 17.5437C97.3748 17.4084 97.3072 17.2479 97.3072 17.062V0.684507C97.3072 0.498592 97.3748 0.338029 97.51 0.202817C97.6452 0.0676056 97.8058 0 97.9917 0H113.761C113.947 0 114.107 0.0676056 114.242 0.202817C114.378 0.338029 114.445 0.498592 114.445 0.684507V4.25916C114.445 4.44507 114.378 4.60563 114.242 4.74085C114.107 4.87606 113.947 4.94366 113.761 4.94366H103.899V6.54084H112.366C112.552 6.54084 112.713 6.60845 112.848 6.74366C112.983 6.87887 113.051 7.03944 113.051 7.22535V10.5211C113.051 10.707 112.983 10.8676 112.848 11.0028C112.713 11.138 112.552 11.2056 112.366 11.2056H103.899V12.8028H114.014Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M86.7965 6.66761C89.0612 6.66761 90.8105 7.15775 92.0443 8.13803C93.295 9.10141 93.9204 10.4451 93.9204 12.169C93.9204 13.893 93.295 15.2535 92.0443 16.2507C90.7936 17.2479 89.0359 17.7465 86.7711 17.7465H76.3261C76.1402 17.7465 75.9796 17.6789 75.8444 17.5437C75.7092 17.4084 75.6416 17.2479 75.6416 17.062V0.684507C75.6416 0.498592 75.7092 0.338029 75.8444 0.202817C75.9796 0.0676056 76.1402 0 76.3261 0H91.2331C91.419 0 91.5795 0.0676056 91.7147 0.202817C91.8499 0.338029 91.9176 0.498592 91.9176 0.684507V4.2338C91.9176 4.41972 91.8499 4.58028 91.7147 4.71549C91.5795 4.8507 91.419 4.91831 91.2331 4.91831H82.2331V6.66761H86.7965ZM85.9091 13.3859C86.2979 13.3859 86.5852 13.2507 86.7711 12.9803C86.9739 12.7099 87.0753 12.4141 87.0753 12.093C87.0753 11.7718 86.9655 11.493 86.7458 11.2563C86.5429 11.0197 86.2641 10.9014 85.9091 10.9014H82.2331V13.3859H85.9091Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M73.0892 0C73.2582 0 73.3934 0.0591551 73.4948 0.177465C73.6131 0.278874 73.6723 0.397183 73.6723 0.532395C73.6723 0.684508 73.6215 0.878874 73.5201 1.11549L68.0441 12.5746C67.3681 13.9944 66.7427 15.0592 66.1681 15.769C65.5934 16.4789 64.8836 16.9859 64.0385 17.2901C63.2103 17.5944 62.0695 17.7465 60.616 17.7465H57.7005C57.5146 17.7465 57.354 17.6789 57.2188 17.5437C57.0836 17.4084 57.016 17.2479 57.016 17.062V13.0056C57.016 12.8197 57.0836 12.6592 57.2188 12.5239C57.354 12.3887 57.5146 12.3211 57.7005 12.3211H59.754C60.1935 12.3211 60.5737 12.2535 60.8949 12.1183L54.709 0.785916C54.6583 0.701409 54.6329 0.616902 54.6329 0.532395C54.6329 0.380282 54.6921 0.253521 54.8104 0.152113C54.9456 0.0507041 55.1146 0 55.3174 0H60.8695C61.0723 0 61.2329 0.0507041 61.3512 0.152113C61.4695 0.253521 61.5794 0.405634 61.6808 0.60845L64.1653 6.00845L66.6751 0.60845C66.861 0.202816 67.1483 0 67.5371 0H73.0892Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M45.5408 0C47.1296 0 48.5155 0.270422 49.6986 0.811267C50.8816 1.35211 51.7859 2.08732 52.4112 3.0169C53.0366 3.94648 53.3492 4.98592 53.3492 6.13521C53.3492 8.02817 52.7577 9.51549 51.5746 10.5972C50.3915 11.662 48.3802 12.1944 45.5408 12.1944H42.1944V17.062C42.1944 17.2479 42.1268 17.4084 41.9916 17.5437C41.8563 17.6789 41.6958 17.7465 41.5099 17.7465H36.0592C35.8733 17.7465 35.7127 17.6789 35.5775 17.5437C35.4423 17.4084 35.3747 17.2479 35.3747 17.062V0.684507C35.3747 0.498592 35.4423 0.338029 35.5775 0.202817C35.7127 0.0676056 35.8733 0 36.0592 0H45.5408ZM45.4394 7.50423C45.8451 7.50423 46.1662 7.38592 46.4028 7.1493C46.6394 6.89577 46.7577 6.5662 46.7577 6.16056C46.7577 5.73803 46.6394 5.39155 46.4028 5.12113C46.1662 4.8507 45.8451 4.71549 45.4394 4.71549H42.2197V7.50423H45.4394Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M29.1724 8.49296C29.8315 8.69578 30.3977 9.14366 30.871 9.83662C31.3442 10.5127 31.5808 11.2901 31.5808 12.169C31.5808 14.0451 30.9724 15.4479 29.7555 16.3775C28.5386 17.2901 26.764 17.7465 24.4316 17.7465H13.9866C13.8007 17.7465 13.6401 17.6789 13.5049 17.5437C13.3697 17.4084 13.3021 17.2479 13.3021 17.062V0.684507C13.3021 0.498592 13.3697 0.338029 13.5049 0.202817C13.6401 0.0676056 13.8007 0 13.9866 0H24.1781C26.578 0 28.3442 0.439437 29.4766 1.31831C30.6259 2.18028 31.2005 3.49014 31.2005 5.24789V5.32394C31.2005 6.13521 30.9808 6.82817 30.5414 7.40282C30.102 7.97746 29.6456 8.34085 29.1724 8.49296Z\"\n        fill=\"black\"\n      />\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M15.4845 3.04486C13.9791 3.11801 13.5322 3.18005 12.758 3.4231C12.2488 3.58306 11.4841 3.8008 11.0589 3.90694C10.2366 4.11229 8.20686 5.23108 7.69738 5.75999C7.35395 6.11633 7.26239 6.10768 7.18615 5.71172C7.11979 5.36723 6.81103 5.07485 6.5137 5.07485C6.41483 5.07485 6.23077 4.92995 6.10463 4.7529C5.74444 4.24727 5.3294 4.18394 2.88118 4.26051C1.69287 4.29767 0.623087 4.35576 0.503845 4.38961C0.311967 4.44397 0.279044 4.55758 0.217725 5.37695C0.179658 5.88621 0.113915 6.71134 0.071733 7.21056C-0.160682 9.96051 0.207951 15.4242 0.657451 15.8907C0.789656 16.028 2.53992 16.1624 4.33472 16.1731C5.32467 16.1791 5.60884 16.1474 5.71049 16.0204C5.79434 15.9155 6.02356 15.8602 6.37388 15.8602C6.80044 15.8602 6.95466 15.81 7.13296 15.6131C7.25601 15.4772 7.35663 15.3117 7.35663 15.2456C7.35663 14.9978 7.57999 15.0025 8.28165 15.2653C9.55721 15.7428 10.8489 15.8902 13.221 15.8289C14.928 15.7847 15.4969 15.73 16.2046 15.5418C16.7569 15.3948 17.3489 15.3149 17.8115 15.325C18.7905 15.3461 19.7504 15.1551 20.344 14.821C21.0265 14.4367 21.1835 14.1514 21.1031 13.4417C21.067 13.1233 21.0795 12.8702 21.1313 12.8702C21.1824 12.8702 21.368 12.7307 21.5437 12.5604C21.937 12.1791 21.9647 11.713 21.6406 10.9309L21.4179 10.3936L21.7316 10.1388C22.1308 9.81442 22.4113 9.10985 22.3186 8.66381C22.1397 7.80269 21.6527 7.21452 20.7066 6.7169C20.4262 6.56942 20.2163 6.42825 20.2404 6.40337C20.3376 6.30246 23.7782 6.09594 25.4642 6.08974C26.552 6.08579 27.3665 6.03603 27.5219 5.96406C27.892 5.79267 28.2091 5.39446 28.2895 5C28.3797 4.55705 28.0384 3.72754 27.708 3.58626C27.2499 3.39042 25.8142 3.15944 24.744 3.10947C22.3689 2.99862 17.1825 2.96242 15.4845 3.04486ZM18.7253 3.47809C18.0463 3.51813 16.8888 3.56309 16.1532 3.57804C15.4176 3.59288 14.6768 3.63816 14.5071 3.67842L14.1984 3.75178L14.4556 3.84287C15.3544 4.1612 16.2554 4.26531 17.254 4.16611C17.5853 4.13322 17.7832 4.16568 17.883 4.26926C17.9917 4.38203 18.0583 4.38961 18.1454 4.29916C18.2327 4.20861 18.2631 4.25773 18.2654 4.49287C18.2681 4.75845 18.285 4.77863 18.3734 4.62102C18.5195 4.36067 18.6734 4.3878 18.6761 4.67441L18.6784 4.91468L18.8678 4.65903C19.0534 4.40851 19.3114 4.42111 19.2521 4.67783C19.2355 4.74937 19.2415 4.7718 19.2651 4.7278C19.3475 4.57488 19.5998 4.64867 19.5998 4.82572C19.5998 4.92354 19.6303 4.97202 19.6675 4.93336C19.7047 4.89471 19.8049 4.92279 19.89 4.99573C20.0128 5.1008 20.0536 5.10091 20.0876 4.99615C20.1111 4.92354 20.2227 4.75535 20.3353 4.6224L20.5401 4.38075L20.4758 4.7011L20.4113 5.02146L20.5831 4.77276L20.7547 4.52395L21.0517 4.81942C21.3643 5.13017 21.4333 5.10561 21.2241 4.75791C21.0198 4.41823 21.2149 4.38417 21.6033 4.6916C21.8698 4.90272 21.9661 4.93667 21.9661 4.81964C21.9661 4.73197 21.9198 4.63063 21.8632 4.59432C21.8067 4.55801 21.7604 4.48316 21.7604 4.42784C21.7604 4.37253 21.8067 4.32736 21.8632 4.32736C21.9198 4.32736 21.9661 4.39944 21.9661 4.48753C21.9661 4.57563 22.0356 4.64771 22.1205 4.64771C22.2053 4.64771 22.2748 4.71979 22.2748 4.80789C22.2748 5.02573 22.4476 5.01014 22.5713 4.78119C22.6632 4.61108 22.7005 4.62251 22.9879 4.90795C23.3162 5.23407 23.3824 5.21368 23.1924 4.84516C23.0024 4.47664 23.1873 4.4855 23.5624 4.86288C23.9445 5.24721 24.0224 5.22809 23.761 4.81398C23.5694 4.51049 23.7369 4.33398 23.9396 4.62571C24.0142 4.73314 24.1447 4.86331 24.2296 4.915C24.3599 4.99444 24.3632 4.98248 24.2503 4.8379C24.1506 4.71018 24.147 4.64728 24.2361 4.59015C24.3017 4.54797 24.3854 4.55577 24.422 4.60735C24.4586 4.65892 24.6213 4.82124 24.7834 4.96807C25.0755 5.23258 25.0775 5.23279 25.0071 4.99477C24.956 4.82231 24.9778 4.7545 25.0846 4.7545C25.1664 4.7545 25.3075 4.86267 25.398 4.99477C25.5424 5.20535 25.5547 5.20866 25.4975 5.02146C25.4616 4.904 25.3874 4.74788 25.3327 4.67441C25.1621 4.44546 25.5499 4.51775 25.7421 4.75065C25.8726 4.90891 25.9486 4.93144 26.0516 4.8427C26.1539 4.7546 26.2394 4.77308 26.3921 4.91649C26.5893 5.10176 26.5959 5.10048 26.5959 4.87783C26.5959 4.61194 26.779 4.56901 26.8695 4.81366C26.9218 4.95536 26.9653 4.94618 27.1661 4.75023L27.4014 4.52085L27.5183 4.74745C27.6485 5.0001 27.8305 4.94991 27.8305 4.66138C27.8305 4.35085 27.2996 3.92061 26.7628 3.7961C26.4867 3.73203 25.8849 3.68856 25.4253 3.69956C24.4407 3.72295 20.3377 3.53725 20.1142 3.45908C20.0293 3.4295 19.4043 3.43794 18.7253 3.47809ZM12.9992 4.16611C12.9714 4.19483 12.6744 4.26499 12.339 4.32202C10.89 4.56826 10.7642 4.61226 10.1668 5.08308C9.10678 5.91835 8.95534 6.02866 8.71716 6.13833C8.58846 6.1977 8.45615 6.31912 8.42322 6.40807C8.3904 6.49702 8.28073 6.56985 8.1797 6.56985C8.07866 6.56985 7.9693 6.64193 7.93669 6.73003C7.90417 6.81813 7.80664 6.89021 7.71991 6.89021C7.63328 6.89021 7.56239 6.93826 7.56239 6.99699C7.56239 7.05573 7.5091 7.10378 7.44398 7.10378C7.37885 7.10378 7.08162 7.3653 6.78346 7.6848C6.29476 8.20847 6.23386 8.3269 6.16678 8.884C6.07212 9.67037 6.18818 12.1016 6.35711 12.8702C6.45866 13.3325 6.53222 13.4644 6.70229 13.4899C6.82122 13.5076 6.97215 13.6277 7.03789 13.7568C7.10353 13.8858 7.13471 13.9089 7.10713 13.808C7.01299 13.4636 7.24891 13.5002 7.39747 13.8531C7.52268 14.1507 7.54686 14.1679 7.55396 13.9647C7.56157 13.7495 7.76816 13.601 7.76816 13.8109C7.76816 13.8584 7.83679 13.9905 7.92064 14.1045C8.06251 14.2973 8.0691 14.2856 8.01508 13.9381L7.95695 13.5643L8.16005 13.824C8.34966 14.0665 8.36592 14.07 8.40522 13.8774C8.44051 13.7042 8.47569 13.7267 8.62477 14.0181C8.85431 14.467 8.92602 14.4581 8.84165 13.9914C8.75688 13.5227 8.8539 13.5099 9.04557 13.9647C9.15606 14.227 9.19465 14.2596 9.2036 14.0982C9.21491 13.8926 9.22253 13.8935 9.40731 14.1234C9.56246 14.3164 9.6104 14.3317 9.65783 14.2035C9.69014 14.1162 9.69157 13.9608 9.66122 13.858C9.63077 13.7551 9.67234 13.7865 9.75351 13.9275C9.86288 14.1175 9.91638 14.1452 9.9599 14.0343C10.0065 13.9156 10.052 13.9276 10.1795 14.0919C10.3342 14.2913 10.3404 14.2872 10.3435 13.9851C10.3466 13.6869 10.3544 13.6814 10.4967 13.8769C10.5793 13.9901 10.6777 14.0505 10.7156 14.0113C10.7533 13.972 10.8464 13.9935 10.9224 14.0588C11.0303 14.1518 11.0604 14.1296 11.0604 13.9574C11.0604 13.6543 11.2367 13.5667 11.3171 13.8297C11.3913 14.0723 11.5317 14.1115 11.6099 13.9114C11.6491 13.8109 11.6891 13.8175 11.7713 13.9381C11.8616 14.0707 11.8806 14.0569 11.882 13.858C11.8839 13.5594 12.0526 13.5431 12.1412 13.8329C12.1774 13.9512 12.2501 14.0203 12.3028 13.9865C12.3606 13.9494 12.3559 13.8424 12.2905 13.7158C12.1784 13.4982 12.2467 13.2537 12.3934 13.3479C12.4396 13.3775 12.5077 13.5688 12.5445 13.773C12.5815 13.9771 12.6555 14.1722 12.7091 14.2066C12.767 14.2438 12.781 14.1371 12.7436 13.9434C12.7028 13.7313 12.7221 13.6177 12.7992 13.6177C12.8642 13.6177 12.9469 13.7705 12.9829 13.9574C13.0476 14.293 13.0495 14.294 13.1418 14.0375C13.234 13.7814 13.2373 13.7808 13.3884 13.9914C13.5284 14.1867 13.5355 14.1569 13.4709 13.6444C13.3903 13.004 13.4633 12.9276 13.6753 13.4308C13.7998 13.7263 13.8228 13.7422 13.8299 13.5376C13.8345 13.4054 13.8656 13.2973 13.899 13.2973C13.9323 13.2973 14.0507 13.4054 14.162 13.5376C14.3632 13.7765 14.3637 13.7765 14.2556 13.5447C14.125 13.2643 14.1199 13.1906 14.2308 13.1906C14.2769 13.1906 14.3946 13.3647 14.4924 13.5775C14.7307 14.0963 14.8112 13.9745 14.6155 13.3911C14.4266 12.8282 14.4198 12.7332 14.5722 12.7859C14.6363 12.8082 14.7405 12.9917 14.8037 13.194C14.9092 13.5317 15.2787 13.7844 15.2787 13.5187C15.2787 13.4557 15.2092 13.4041 15.1244 13.4041C14.8963 13.4041 14.9369 13.1091 15.1758 13.0304C15.289 12.9931 15.3816 12.9178 15.3816 12.863C15.3816 12.7298 15.2043 12.7359 15.1233 12.8719C15.0211 13.0437 14.8671 12.8823 14.8671 12.6032C14.8671 12.4633 14.8208 12.3192 14.7643 12.2829C14.7077 12.2466 14.6614 12.2958 14.6614 12.3922C14.6614 12.4888 14.6036 12.5478 14.5328 12.5237C14.3811 12.4718 14.3082 12.0758 14.4034 11.8212C14.4619 11.6652 14.4864 11.6728 14.5941 11.8801C14.713 12.1091 14.7221 12.1105 14.839 11.9163C14.9355 11.756 14.9308 11.7028 14.8168 11.6574C14.7379 11.6259 14.6676 11.5136 14.6606 11.4077C14.6535 11.3017 14.6242 10.7946 14.5955 10.2806C14.5668 9.7668 14.4983 9.34627 14.4432 9.34627C14.388 9.34627 14.1138 9.58409 13.8337 9.87476C12.8278 10.9189 11.0028 11.6956 9.55536 11.6956C8.53166 11.6956 7.99759 11.4343 8.47703 11.1679C8.63362 11.0809 8.68177 11.1011 8.72467 11.2714C8.79577 11.5536 9.07201 11.4384 9.06193 11.1307C9.05524 10.9258 9.11522 10.8902 9.51554 10.8606L9.97697 10.8265L9.72131 10.6125L9.46574 10.3986L9.86535 10.4673C10.2019 10.5251 10.2552 10.5095 10.2029 10.3682C10.1623 10.2583 10.1985 10.2006 10.308 10.2006C10.453 10.2006 10.4492 10.1707 10.279 9.97364L10.083 9.74672L10.4174 9.82201C10.7889 9.90551 10.8441 9.82254 10.5717 9.58964C10.4034 9.44569 10.4051 9.44046 10.5975 9.50987C11.1958 9.72568 11.2291 9.70134 11.1663 9.09106C11.1518 8.9501 11.1928 8.90803 11.3018 8.95149C11.4135 8.99591 11.4776 8.9217 11.5263 8.69189C11.5722 8.47512 11.6415 8.38894 11.739 8.42771C11.8466 8.47053 11.8835 8.38734 11.8835 8.10244C11.8835 7.76521 11.9094 7.72666 12.101 7.77866L12.3186 7.83772L12.101 7.59734C11.844 7.31329 11.8272 7.21056 12.0378 7.21056C12.1227 7.21056 12.1922 7.1608 12.1922 7.10004C12.1922 7.02508 12.2584 7.02625 12.3979 7.10378C12.6858 7.26364 12.658 7.08039 12.3337 6.68027C12.0762 6.36279 12.0624 6.07212 12.3174 6.33674C12.5133 6.54006 12.6208 6.48218 12.4961 6.24031C12.3316 5.92134 12.4837 5.83122 12.7062 6.11601C12.9556 6.4353 13.0321 6.41907 12.9588 6.06262C12.9059 5.80548 12.9152 5.79106 13.034 5.94654C13.1086 6.04425 13.2247 6.21244 13.2921 6.32029C13.4021 6.49628 13.4156 6.48346 13.423 6.1961L13.4313 5.87575L13.6325 6.14271C13.8174 6.388 13.8341 6.39237 13.8383 6.1961C13.8425 5.99983 13.8592 6.00421 14.0441 6.24949C14.2292 6.4951 14.2457 6.49937 14.2509 6.30289C14.256 6.10256 14.2649 6.10096 14.3931 6.27619C14.5638 6.50973 14.6614 6.51464 14.6614 6.28986C14.6614 6.14794 14.6893 6.14057 14.8157 6.24949C14.9421 6.35842 14.97 6.35105 14.97 6.20913C14.97 5.93864 15.1245 6.00549 15.2479 6.32958L15.3597 6.62324L15.3738 6.24949C15.3875 5.89166 15.3947 5.88482 15.5449 6.08932C15.6312 6.20678 15.7685 6.28879 15.8503 6.27149C15.9474 6.25099 15.9989 6.33022 15.9989 6.50033C15.9989 6.64343 16.0683 6.78823 16.1532 6.82208C16.2381 6.85582 16.3075 6.95844 16.3075 7.04996C16.3075 7.14147 16.4562 7.37854 16.6379 7.57673C16.9384 7.90456 16.981 7.92122 17.1086 7.76072C17.2348 7.60183 17.244 7.60759 17.2006 7.81967C17.1664 7.98636 17.2268 8.10575 17.4076 8.22866C17.7485 8.46049 17.7923 8.382 17.5955 7.89292C17.4426 7.51319 17.4439 7.45959 17.6128 7.13389C17.7877 6.79688 17.7873 6.76911 17.6004 6.40882C17.2376 5.70969 16.4304 5.03748 15.5873 4.7325C14.2502 4.24865 13.1512 4.00817 12.9992 4.16611ZM24.744 4.60062C24.744 4.69213 24.7903 4.73741 24.8469 4.7011C24.9035 4.6648 24.9498 4.58994 24.9498 4.53463C24.9498 4.47931 24.9035 4.43414 24.8469 4.43414C24.7903 4.43414 24.744 4.5091 24.744 4.60062ZM19.9085 4.65401C19.9085 4.71616 19.9548 4.73741 20.0113 4.7011C20.0679 4.6648 20.1142 4.61397 20.1142 4.58802C20.1142 4.56207 20.0679 4.54093 20.0113 4.54093C19.9548 4.54093 19.9085 4.59186 19.9085 4.65401ZM4.64739 5.14608C4.60963 5.18516 4.57876 5.26686 4.57876 5.32762C4.57876 5.39446 4.62671 5.38816 4.70048 5.3116C4.76745 5.24208 4.79832 5.16039 4.7691 5.13006C4.73988 5.09974 4.68504 5.10689 4.64739 5.14608ZM5.26747 5.52688C5.16438 5.60526 4.98886 6.02322 4.87301 6.46595C4.34944 8.4686 4.6014 13.292 5.32045 15.0326C5.52962 15.5387 5.53126 15.5398 6.03179 15.5398C6.62173 15.5398 6.61864 15.5514 6.33427 14.383C5.92212 12.6896 5.69845 8.7487 5.91512 6.99699C6.11194 5.40536 6.11657 5.4533 5.76193 5.41721C5.59217 5.39991 5.36963 5.44935 5.26747 5.52688ZM6.48253 5.62662C6.38088 5.90938 6.24363 6.83521 6.29137 6.91541C6.37759 7.06032 6.70733 6.80126 6.82791 6.49382C6.899 6.3126 6.91237 6.07341 6.86217 5.88269C6.77204 5.54076 6.5638 5.40034 6.48253 5.62662ZM4.33411 6.0938C4.29882 6.18938 4.2483 6.53985 4.22196 6.87259L4.17402 7.47753L4.32413 6.73815C4.46724 6.03336 4.47207 5.72069 4.33411 6.0938ZM19.4469 6.5674C19.3602 6.71305 19.4739 6.89021 19.6541 6.89021C19.7408 6.89021 19.7753 6.95471 19.7399 7.05039C19.7073 7.13848 19.7352 7.21056 19.8019 7.21056C19.9327 7.21056 20.2171 7.46941 20.2171 7.58858C20.2171 7.62863 20.0551 7.62991 19.857 7.59136C19.632 7.54758 19.4969 7.56317 19.4969 7.6329C19.4969 7.6943 19.6617 7.74449 19.8631 7.74449C20.081 7.74449 20.2035 7.78774 20.1657 7.85128C20.1307 7.91001 20.0006 7.95881 19.8767 7.95967C19.6934 7.96105 19.6802 7.9807 19.8056 8.06485C19.8904 8.12177 20.0899 8.16907 20.249 8.17003C20.4539 8.17121 20.6981 8.32872 21.0878 8.71122L21.6375 9.25092L21.7076 8.82036C21.7462 8.58361 21.7474 8.2467 21.7104 8.07168C21.6316 7.69921 21.1267 7.20544 20.6231 7.0081C20.4281 6.93175 20.0983 6.77669 19.8902 6.66372C19.6499 6.53312 19.4883 6.49799 19.4469 6.5674ZM11.8835 6.9499C11.8835 7.04142 11.9305 7.08616 11.988 7.04932C12.0456 7.01237 12.066 6.93751 12.0334 6.88284C11.9452 6.73473 11.8835 6.76228 11.8835 6.9499ZM18.7321 6.99198C18.5852 7.0474 18.5674 7.08883 18.664 7.15076C18.7358 7.1969 18.8455 7.18195 18.9074 7.11766C19.0593 6.96005 18.9757 6.90025 18.7321 6.99198ZM19.2238 7.16176C19.1281 7.42061 19.2616 7.46738 19.3893 7.21975C19.4689 7.06523 19.4705 6.99699 19.3944 6.99699C19.3341 6.99699 19.2573 7.0711 19.2238 7.16176ZM17.7842 7.3732C17.7159 7.55794 18.0936 8.49327 18.2353 8.49039C18.2785 8.48943 18.3787 8.44607 18.4581 8.39385C18.578 8.31515 18.5605 8.21211 18.3552 7.78635C18.0876 7.23139 17.8896 7.08808 17.7842 7.3732ZM11.5234 8.06485C11.5584 8.12358 11.6074 8.17164 11.6324 8.17164C11.6574 8.17164 11.6777 8.12358 11.6777 8.06485C11.6777 8.00612 11.6287 7.95806 11.5688 7.95806C11.5089 7.95806 11.4884 8.00612 11.5234 8.06485ZM19.1691 8.8525C18.7982 9.11936 18.5353 9.38269 18.5562 9.46652C18.5764 9.54725 18.6173 9.79349 18.647 10.0137C18.6766 10.234 18.7411 10.4141 18.7903 10.4141C18.8394 10.4141 18.8796 10.3661 18.8796 10.3073C18.8796 10.1255 19.0678 10.1899 19.1136 10.3874C19.146 10.5269 19.1991 10.4795 19.3229 10.2006C19.4685 9.87262 19.4894 9.85831 19.4929 10.0836C19.4967 10.325 19.5082 10.3299 19.6838 10.165C19.7864 10.0685 20.0224 9.97225 20.2081 9.95111C20.3938 9.93007 20.5823 9.85126 20.6271 9.77598C20.6719 9.7008 20.7551 9.66909 20.812 9.70561C20.9669 9.80503 21.0618 9.26736 20.9332 9.01802C20.8018 8.76312 20.241 8.38617 19.9922 8.38563C19.8968 8.38542 19.5264 8.59547 19.1691 8.8525ZM19.5741 8.78159C19.475 8.89585 19.394 9.10441 19.394 9.24494V9.50047L19.6088 9.27761C19.7338 9.14787 19.8091 8.95427 19.7888 8.81427C19.7546 8.5771 19.7517 8.57667 19.5741 8.78159ZM4.03801 9.49471C3.92329 10.277 3.94469 11.0479 4.11301 12.2035C4.27094 13.2868 4.62856 14.8252 4.78854 15.1087C4.91231 15.3281 4.9117 15.1128 4.78741 14.7282C4.56508 14.0404 4.24707 11.7708 4.18277 10.4141C4.12608 9.21674 4.10149 9.06094 4.03801 9.49471ZM15.3769 9.35514C15.2167 9.66599 15.5082 9.98699 15.9508 9.98699C16.3362 9.98699 16.5573 9.76541 16.4669 9.46972C16.3512 9.09149 15.5561 9.00787 15.3769 9.35514ZM16.8219 9.70849C16.8219 10.2363 16.8438 10.2898 17.0839 10.3524C17.2279 10.39 17.39 10.3923 17.444 10.3577C17.498 10.323 17.5421 10.3428 17.5421 10.4014C17.5421 10.4602 17.6462 10.4953 17.7736 10.4796C18.2028 10.4265 18.3652 10.2928 18.3652 9.99212C18.3652 9.63 18.1285 9.40255 17.5936 9.2507C16.8581 9.04194 16.8219 9.0634 16.8219 9.70849ZM14.147 10.0404C14.147 10.1285 14.1933 10.2006 14.2498 10.2006C14.3064 10.2006 14.3527 10.1285 14.3527 10.0404C14.3527 9.95228 14.3064 9.8802 14.2498 9.8802C14.1933 9.8802 14.147 9.95228 14.147 10.0404ZM14.3388 10.8957C14.3077 10.9539 14.3117 11.1211 14.3476 11.2673C14.3836 11.4135 14.4384 11.4856 14.4695 11.4275C14.5007 11.3693 14.4967 11.2022 14.4608 11.0559C14.4247 10.9097 14.3699 10.8376 14.3388 10.8957ZM20.2461 11.001C19.6678 11.1476 18.9149 11.5125 18.9568 11.6259C18.9709 11.6643 18.9879 11.8997 18.9944 12.1494C19.001 12.3991 19.0276 12.5192 19.0534 12.4164C19.0793 12.3135 19.1488 12.2295 19.2078 12.2295C19.2669 12.2295 19.2909 12.3256 19.2613 12.4431C19.2318 12.5605 19.2495 12.6566 19.3008 12.6566C19.3521 12.6566 19.394 12.6056 19.394 12.5431C19.394 12.4808 19.475 12.4435 19.5741 12.4604C19.6732 12.4773 19.8172 12.4501 19.8943 12.4C19.9816 12.3432 20.0654 12.3609 20.1167 12.4473C20.1761 12.5469 20.2593 12.4833 20.4135 12.2207C20.6003 11.9026 20.6822 11.8769 20.6408 12.1494C20.617 12.3063 20.8018 12.2257 21.0087 11.9892C21.2486 11.7151 21.378 11.2582 21.2863 11.0099C21.2139 10.8143 20.9902 10.8123 20.2461 11.001ZM15.4845 11.3752C15.4845 11.7039 15.7899 12.1227 16.0297 12.1227C16.3948 12.1227 16.5401 11.5251 16.2488 11.2226C16.1598 11.1303 15.9514 11.0548 15.7858 11.0548C15.5195 11.0548 15.4845 11.0922 15.4845 11.3752ZM16.7205 11.4965C16.7212 11.6941 16.7502 11.9657 16.785 12.1003C16.8448 12.332 16.8582 12.3354 17.0408 12.1638C17.2231 11.9926 17.2335 11.9944 17.2335 12.1981C17.2335 12.3786 17.2917 12.4086 17.5936 12.3837C17.8529 12.3623 17.9537 12.3974 17.9537 12.509C17.9537 12.6291 17.9984 12.6392 18.152 12.554C18.2611 12.4934 18.4172 12.4705 18.4989 12.5031C18.7148 12.589 18.7994 12.0233 18.6151 11.7264C18.4646 11.4839 18.0633 11.3365 17.2078 11.2098L16.7191 11.1374L16.7205 11.4965ZM13.6808 12.3416C13.5831 12.5058 13.7169 12.6118 13.849 12.4747C13.9229 12.398 13.9246 12.3383 13.8544 12.2932C13.7967 12.2563 13.7187 12.2781 13.6808 12.3416ZM13.3239 12.7163C13.3239 12.8078 13.3709 12.8526 13.4284 12.8157C13.4859 12.7788 13.5064 12.7039 13.4738 12.6493C13.3856 12.5011 13.3239 12.5287 13.3239 12.7163ZM14.0955 12.6566C14.0605 12.7154 14.081 12.7634 14.1409 12.7634C14.2008 12.7634 14.2498 12.7154 14.2498 12.6566C14.2498 12.5979 14.2295 12.5498 14.2045 12.5498C14.1795 12.5498 14.1305 12.5979 14.0955 12.6566ZM12.1922 12.9299C12.1922 13.0214 12.2392 13.0661 12.2967 13.0293C12.3542 12.9924 12.3747 12.9175 12.3421 12.8628C12.2539 12.7147 12.1922 12.7423 12.1922 12.9299ZM13.7039 12.8316C13.6217 12.917 13.7146 13.0838 13.8444 13.0838C13.8977 13.0838 13.9412 13.0117 13.9412 12.9236C13.9412 12.7585 13.8198 12.7114 13.7039 12.8316ZM12.9124 12.977C12.9124 13.0357 12.9587 13.0838 13.0152 13.0838C13.0718 13.0838 13.1181 13.0357 13.1181 12.977C13.1181 12.9183 13.0718 12.8702 13.0152 12.8702C12.9587 12.8702 12.9124 12.9183 12.9124 12.977ZM15.7063 13.0713C15.5919 13.1465 15.5962 13.2189 15.7309 13.4891C15.9378 13.9045 16.2917 14.0375 16.4797 13.7705C16.6613 13.5127 16.6529 13.4422 16.4104 13.1906C16.1926 12.9645 15.9349 12.9208 15.7063 13.0713ZM11.7806 13.2439C11.7806 13.332 11.8269 13.4041 11.8835 13.4041C11.9401 13.4041 11.9864 13.332 11.9864 13.2439C11.9864 13.1558 11.9401 13.0838 11.8835 13.0838C11.8269 13.0838 11.7806 13.1558 11.7806 13.2439ZM12.6037 13.2439C12.6037 13.332 12.65 13.4041 12.7066 13.4041C12.7632 13.4041 12.8095 13.332 12.8095 13.2439C12.8095 13.1558 12.7632 13.0838 12.7066 13.0838C12.65 13.0838 12.6037 13.1558 12.6037 13.2439ZM16.8255 13.3774C16.8306 13.7765 17.073 14.228 17.1831 14.0431C17.2467 13.9362 17.2938 13.9467 17.3947 14.09C17.5983 14.379 18.0772 14.2724 18.1678 13.918C18.2535 13.5826 18.0898 13.3929 17.5525 13.2057C16.9804 13.0062 16.8214 13.0438 16.8255 13.3774ZM20.0441 13.298C19.9206 13.3497 19.5386 13.4248 19.1953 13.4652C18.6375 13.5307 18.571 13.5641 18.571 13.7786C18.571 14.068 18.8205 14.3089 19.0006 14.1934C19.0721 14.1476 19.294 14.1007 19.4938 14.0894C19.6935 14.0779 19.8802 14.0559 19.9085 14.0405C19.9367 14.025 20.0062 14.0031 20.0628 13.9919C20.2743 13.9497 20.7315 13.7275 20.7315 13.6667C20.7315 13.632 20.6836 13.5107 20.625 13.3971C20.5096 13.1733 20.3908 13.153 20.0441 13.298ZM13.0611 13.4134C13.0232 13.4773 13.0435 13.583 13.1065 13.6483C13.1906 13.7356 13.221 13.7047 13.221 13.5323C13.221 13.2744 13.1676 13.2347 13.0611 13.4134ZM11.472 13.5706C11.472 13.6621 11.519 13.7069 11.5765 13.67C11.634 13.6331 11.6545 13.5582 11.6219 13.5035C11.5337 13.3554 11.472 13.383 11.472 13.5706ZM10.6489 13.6774C10.6489 13.7689 10.6959 13.8136 10.7534 13.7768C10.811 13.7399 10.8314 13.665 10.7988 13.6103C10.7106 13.4622 10.6489 13.4898 10.6489 13.6774ZM6.63644 14.7719C6.63644 14.8782 6.70085 15.0565 6.77965 15.1683C6.90126 15.341 6.94766 15.3502 7.08831 15.2291C7.32566 15.0246 7.29274 14.8451 6.9917 14.7027C6.65054 14.5414 6.63644 14.5441 6.63644 14.7719Z\"\n        fill=\"black\"\n      />\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M15.4845 3.04486C13.9791 3.11801 13.5322 3.18005 12.758 3.4231C12.2488 3.58306 11.4841 3.8008 11.0589 3.90694C10.2366 4.11229 8.20686 5.23108 7.69738 5.75999C7.35395 6.11633 7.26239 6.10768 7.18615 5.71172C7.11979 5.36723 6.81103 5.07485 6.5137 5.07485C6.41483 5.07485 6.23077 4.92995 6.10463 4.7529C5.74444 4.24727 5.3294 4.18394 2.88118 4.26051C1.69287 4.29767 0.623087 4.35576 0.503845 4.38961C0.311967 4.44397 0.279044 4.55758 0.217725 5.37695C0.179658 5.88621 0.113915 6.71134 0.071733 7.21056C-0.160682 9.96051 0.207951 15.4242 0.657451 15.8907C0.789656 16.028 2.53992 16.1624 4.33472 16.1731C5.32467 16.1791 5.60884 16.1474 5.71049 16.0204C5.79434 15.9155 6.02356 15.8602 6.37388 15.8602C6.80044 15.8602 6.95466 15.81 7.13296 15.6131C7.25601 15.4772 7.35663 15.3117 7.35663 15.2456C7.35663 14.9978 7.57999 15.0025 8.28165 15.2653C9.55721 15.7428 10.8489 15.8902 13.221 15.8289C14.928 15.7847 15.4969 15.73 16.2046 15.5418C16.7569 15.3948 17.3489 15.3149 17.8115 15.325C18.7905 15.3461 19.7504 15.1551 20.344 14.821C21.0265 14.4367 21.1835 14.1514 21.1031 13.4417C21.067 13.1233 21.0795 12.8702 21.1313 12.8702C21.1824 12.8702 21.368 12.7307 21.5437 12.5604C21.937 12.1791 21.9647 11.713 21.6406 10.9309L21.4179 10.3936L21.7316 10.1388C22.1308 9.81442 22.4113 9.10985 22.3186 8.66381C22.1397 7.80269 21.6527 7.21452 20.7066 6.7169C20.4262 6.56942 20.2163 6.42825 20.2404 6.40337C20.3376 6.30246 23.7782 6.09594 25.4642 6.08974C26.552 6.08579 27.3665 6.03603 27.5219 5.96406C27.892 5.79267 28.2091 5.39446 28.2895 5C28.3797 4.55705 28.0384 3.72754 27.708 3.58626C27.2499 3.39042 25.8142 3.15944 24.744 3.10947C22.3689 2.99862 17.1825 2.96242 15.4845 3.04486ZM18.7253 3.47809C18.0463 3.51813 16.8888 3.56309 16.1532 3.57804C15.4176 3.59288 14.6768 3.63816 14.5071 3.67842L14.1984 3.75178L14.4556 3.84287C15.3544 4.1612 16.2554 4.26531 17.254 4.16611C17.5853 4.13322 17.7832 4.16568 17.883 4.26926C17.9917 4.38203 18.0583 4.38961 18.1454 4.29916C18.2327 4.20861 18.2631 4.25773 18.2654 4.49287C18.2681 4.75845 18.285 4.77863 18.3734 4.62102C18.5195 4.36067 18.6734 4.3878 18.6761 4.67441L18.6784 4.91468L18.8678 4.65903C19.0534 4.40851 19.3114 4.42111 19.2521 4.67783C19.2355 4.74937 19.2415 4.7718 19.2651 4.7278C19.3475 4.57488 19.5998 4.64867 19.5998 4.82572C19.5998 4.92354 19.6303 4.97202 19.6675 4.93336C19.7047 4.89471 19.8049 4.92279 19.89 4.99573C20.0128 5.1008 20.0536 5.10091 20.0876 4.99615C20.1111 4.92354 20.2227 4.75535 20.3353 4.6224L20.5401 4.38075L20.4758 4.7011L20.4113 5.02146L20.5831 4.77276L20.7547 4.52395L21.0517 4.81942C21.3643 5.13017 21.4333 5.10561 21.2241 4.75791C21.0198 4.41823 21.2149 4.38417 21.6033 4.6916C21.8698 4.90272 21.9661 4.93667 21.9661 4.81964C21.9661 4.73197 21.9198 4.63063 21.8632 4.59432C21.8067 4.55801 21.7604 4.48316 21.7604 4.42784C21.7604 4.37253 21.8067 4.32736 21.8632 4.32736C21.9198 4.32736 21.9661 4.39944 21.9661 4.48753C21.9661 4.57563 22.0356 4.64771 22.1205 4.64771C22.2053 4.64771 22.2748 4.71979 22.2748 4.80789C22.2748 5.02573 22.4476 5.01014 22.5713 4.78119C22.6632 4.61108 22.7005 4.62251 22.9879 4.90795C23.3162 5.23407 23.3824 5.21368 23.1924 4.84516C23.0024 4.47664 23.1873 4.4855 23.5624 4.86288C23.9445 5.24721 24.0224 5.22809 23.761 4.81398C23.5694 4.51049 23.7369 4.33398 23.9396 4.62571C24.0142 4.73314 24.1447 4.86331 24.2296 4.915C24.3599 4.99444 24.3632 4.98248 24.2503 4.8379C24.1506 4.71018 24.147 4.64728 24.2361 4.59015C24.3017 4.54797 24.3854 4.55577 24.422 4.60735C24.4586 4.65892 24.6213 4.82124 24.7834 4.96807C25.0755 5.23258 25.0775 5.23279 25.0071 4.99477C24.956 4.82231 24.9778 4.7545 25.0846 4.7545C25.1664 4.7545 25.3075 4.86267 25.398 4.99477C25.5424 5.20535 25.5547 5.20866 25.4975 5.02146C25.4616 4.904 25.3874 4.74788 25.3327 4.67441C25.1621 4.44546 25.5499 4.51775 25.7421 4.75065C25.8726 4.90891 25.9486 4.93144 26.0516 4.8427C26.1539 4.7546 26.2394 4.77308 26.3921 4.91649C26.5893 5.10176 26.5959 5.10048 26.5959 4.87783C26.5959 4.61194 26.779 4.56901 26.8695 4.81366C26.9218 4.95536 26.9653 4.94618 27.1661 4.75023L27.4014 4.52085L27.5183 4.74745C27.6485 5.0001 27.8305 4.94991 27.8305 4.66138C27.8305 4.35085 27.2996 3.92061 26.7628 3.7961C26.4867 3.73203 25.8849 3.68856 25.4253 3.69956C24.4407 3.72295 20.3377 3.53725 20.1142 3.45908C20.0293 3.4295 19.4043 3.43794 18.7253 3.47809ZM12.9992 4.16611C12.9714 4.19483 12.6744 4.26499 12.339 4.32202C10.89 4.56826 10.7642 4.61226 10.1668 5.08308C9.10678 5.91835 8.95534 6.02866 8.71716 6.13833C8.58846 6.1977 8.45615 6.31912 8.42322 6.40807C8.3904 6.49702 8.28073 6.56985 8.1797 6.56985C8.07866 6.56985 7.9693 6.64193 7.93669 6.73003C7.90417 6.81813 7.80664 6.89021 7.71991 6.89021C7.63328 6.89021 7.56239 6.93826 7.56239 6.99699C7.56239 7.05573 7.5091 7.10378 7.44398 7.10378C7.37885 7.10378 7.08162 7.3653 6.78346 7.6848C6.29476 8.20847 6.23386 8.3269 6.16678 8.884C6.07212 9.67037 6.18818 12.1016 6.35711 12.8702C6.45866 13.3325 6.53222 13.4644 6.70229 13.4899C6.82122 13.5076 6.97215 13.6277 7.03789 13.7568C7.10353 13.8858 7.13471 13.9089 7.10713 13.808C7.01299 13.4636 7.24891 13.5002 7.39747 13.8531C7.52268 14.1507 7.54686 14.1679 7.55396 13.9647C7.56157 13.7495 7.76816 13.601 7.76816 13.8109C7.76816 13.8584 7.83679 13.9905 7.92064 14.1045C8.06251 14.2973 8.0691 14.2856 8.01508 13.9381L7.95695 13.5643L8.16005 13.824C8.34966 14.0665 8.36592 14.07 8.40522 13.8774C8.44051 13.7042 8.47569 13.7267 8.62477 14.0181C8.85431 14.467 8.92602 14.4581 8.84165 13.9914C8.75688 13.5227 8.8539 13.5099 9.04557 13.9647C9.15606 14.227 9.19465 14.2596 9.2036 14.0982C9.21491 13.8926 9.22253 13.8935 9.40731 14.1234C9.56246 14.3164 9.6104 14.3317 9.65783 14.2035C9.69014 14.1162 9.69157 13.9608 9.66122 13.858C9.63077 13.7551 9.67234 13.7865 9.75351 13.9275C9.86288 14.1175 9.91638 14.1452 9.9599 14.0343C10.0065 13.9156 10.052 13.9276 10.1795 14.0919C10.3342 14.2913 10.3404 14.2872 10.3435 13.9851C10.3466 13.6869 10.3544 13.6814 10.4967 13.8769C10.5793 13.9901 10.6777 14.0505 10.7156 14.0113C10.7533 13.972 10.8464 13.9935 10.9224 14.0588C11.0303 14.1518 11.0604 14.1296 11.0604 13.9574C11.0604 13.6543 11.2367 13.5667 11.3171 13.8297C11.3913 14.0723 11.5317 14.1115 11.6099 13.9114C11.6491 13.8109 11.6891 13.8175 11.7713 13.9381C11.8616 14.0707 11.8806 14.0569 11.882 13.858C11.8839 13.5594 12.0526 13.5431 12.1412 13.8329C12.1774 13.9512 12.2501 14.0203 12.3028 13.9865C12.3606 13.9494 12.3559 13.8424 12.2905 13.7158C12.1784 13.4982 12.2467 13.2537 12.3934 13.3479C12.4396 13.3775 12.5077 13.5688 12.5445 13.773C12.5815 13.9771 12.6555 14.1722 12.7091 14.2066C12.767 14.2438 12.781 14.1371 12.7436 13.9434C12.7028 13.7313 12.7221 13.6177 12.7992 13.6177C12.8642 13.6177 12.9469 13.7705 12.9829 13.9574C13.0476 14.293 13.0495 14.294 13.1418 14.0375C13.234 13.7814 13.2373 13.7808 13.3884 13.9914C13.5284 14.1867 13.5355 14.1569 13.4709 13.6444C13.3903 13.004 13.4633 12.9276 13.6753 13.4308C13.7998 13.7263 13.8228 13.7422 13.8299 13.5376C13.8345 13.4054 13.8656 13.2973 13.899 13.2973C13.9323 13.2973 14.0507 13.4054 14.162 13.5376C14.3632 13.7765 14.3637 13.7765 14.2556 13.5447C14.125 13.2643 14.1199 13.1906 14.2308 13.1906C14.2769 13.1906 14.3946 13.3647 14.4924 13.5775C14.7307 14.0963 14.8112 13.9745 14.6155 13.3911C14.4266 12.8282 14.4198 12.7332 14.5722 12.7859C14.6363 12.8082 14.7405 12.9917 14.8037 13.194C14.9092 13.5317 15.2787 13.7844 15.2787 13.5187C15.2787 13.4557 15.2092 13.4041 15.1244 13.4041C14.8963 13.4041 14.9369 13.1091 15.1758 13.0304C15.289 12.9931 15.3816 12.9178 15.3816 12.863C15.3816 12.7298 15.2043 12.7359 15.1233 12.8719C15.0211 13.0437 14.8671 12.8823 14.8671 12.6032C14.8671 12.4633 14.8208 12.3192 14.7643 12.2829C14.7077 12.2466 14.6614 12.2958 14.6614 12.3922C14.6614 12.4888 14.6036 12.5478 14.5328 12.5237C14.3811 12.4718 14.3082 12.0758 14.4034 11.8212C14.4619 11.6652 14.4864 11.6728 14.5941 11.8801C14.713 12.1091 14.7221 12.1105 14.839 11.9163C14.9355 11.756 14.9308 11.7028 14.8168 11.6574C14.7379 11.6259 14.6676 11.5136 14.6606 11.4077C14.6535 11.3017 14.6242 10.7946 14.5955 10.2806C14.5668 9.7668 14.4983 9.34627 14.4432 9.34627C14.388 9.34627 14.1138 9.58409 13.8337 9.87476C12.8278 10.9189 11.0028 11.6956 9.55536 11.6956C8.53166 11.6956 7.99759 11.4343 8.47703 11.1679C8.63362 11.0809 8.68177 11.1011 8.72467 11.2714C8.79577 11.5536 9.07201 11.4384 9.06193 11.1307C9.05524 10.9258 9.11522 10.8902 9.51554 10.8606L9.97697 10.8265L9.72131 10.6125L9.46574 10.3986L9.86535 10.4673C10.2019 10.5251 10.2552 10.5095 10.2029 10.3682C10.1623 10.2583 10.1985 10.2006 10.308 10.2006C10.453 10.2006 10.4492 10.1707 10.279 9.97364L10.083 9.74672L10.4174 9.82201C10.7889 9.90551 10.8441 9.82254 10.5717 9.58964C10.4034 9.44569 10.4051 9.44046 10.5975 9.50987C11.1958 9.72568 11.2291 9.70134 11.1663 9.09106C11.1518 8.9501 11.1928 8.90803 11.3018 8.95149C11.4135 8.99591 11.4776 8.9217 11.5263 8.69189C11.5722 8.47512 11.6415 8.38894 11.739 8.42771C11.8466 8.47053 11.8835 8.38734 11.8835 8.10244C11.8835 7.76521 11.9094 7.72666 12.101 7.77866L12.3186 7.83772L12.101 7.59734C11.844 7.31329 11.8272 7.21056 12.0378 7.21056C12.1227 7.21056 12.1922 7.1608 12.1922 7.10004C12.1922 7.02508 12.2584 7.02625 12.3979 7.10378C12.6858 7.26364 12.658 7.08039 12.3337 6.68027C12.0762 6.36279 12.0624 6.07212 12.3174 6.33674C12.5133 6.54006 12.6208 6.48218 12.4961 6.24031C12.3316 5.92134 12.4837 5.83122 12.7062 6.11601C12.9556 6.4353 13.0321 6.41907 12.9588 6.06262C12.9059 5.80548 12.9152 5.79106 13.034 5.94654C13.1086 6.04425 13.2247 6.21244 13.2921 6.32029C13.4021 6.49628 13.4156 6.48346 13.423 6.1961L13.4313 5.87575L13.6325 6.14271C13.8174 6.388 13.8341 6.39237 13.8383 6.1961C13.8425 5.99983 13.8592 6.00421 14.0441 6.24949C14.2292 6.4951 14.2457 6.49937 14.2509 6.30289C14.256 6.10256 14.2649 6.10096 14.3931 6.27619C14.5638 6.50973 14.6614 6.51464 14.6614 6.28986C14.6614 6.14794 14.6893 6.14057 14.8157 6.24949C14.9421 6.35842 14.97 6.35105 14.97 6.20913C14.97 5.93864 15.1245 6.00549 15.2479 6.32958L15.3597 6.62324L15.3738 6.24949C15.3875 5.89166 15.3947 5.88482 15.5449 6.08932C15.6312 6.20678 15.7685 6.28879 15.8503 6.27149C15.9474 6.25099 15.9989 6.33022 15.9989 6.50033C15.9989 6.64343 16.0683 6.78823 16.1532 6.82208C16.2381 6.85582 16.3075 6.95844 16.3075 7.04996C16.3075 7.14147 16.4562 7.37854 16.6379 7.57673C16.9384 7.90456 16.981 7.92122 17.1086 7.76072C17.2348 7.60183 17.244 7.60759 17.2006 7.81967C17.1664 7.98636 17.2268 8.10575 17.4076 8.22866C17.7485 8.46049 17.7923 8.382 17.5955 7.89292C17.4426 7.51319 17.4439 7.45959 17.6128 7.13389C17.7877 6.79688 17.7873 6.76911 17.6004 6.40882C17.2376 5.70969 16.4304 5.03748 15.5873 4.7325C14.2502 4.24865 13.1512 4.00817 12.9992 4.16611ZM24.744 4.60062C24.744 4.69213 24.7903 4.73741 24.8469 4.7011C24.9035 4.6648 24.9498 4.58994 24.9498 4.53463C24.9498 4.47931 24.9035 4.43414 24.8469 4.43414C24.7903 4.43414 24.744 4.5091 24.744 4.60062ZM19.9085 4.65401C19.9085 4.71616 19.9548 4.73741 20.0113 4.7011C20.0679 4.6648 20.1142 4.61397 20.1142 4.58802C20.1142 4.56207 20.0679 4.54093 20.0113 4.54093C19.9548 4.54093 19.9085 4.59186 19.9085 4.65401ZM4.64739 5.14608C4.60963 5.18516 4.57876 5.26686 4.57876 5.32762C4.57876 5.39446 4.62671 5.38816 4.70048 5.3116C4.76745 5.24208 4.79832 5.16039 4.7691 5.13006C4.73988 5.09974 4.68504 5.10689 4.64739 5.14608ZM5.26747 5.52688C5.16438 5.60526 4.98886 6.02322 4.87301 6.46595C4.34944 8.4686 4.6014 13.292 5.32045 15.0326C5.52962 15.5387 5.53126 15.5398 6.03179 15.5398C6.62173 15.5398 6.61864 15.5514 6.33427 14.383C5.92212 12.6896 5.69845 8.7487 5.91512 6.99699C6.11194 5.40536 6.11657 5.4533 5.76193 5.41721C5.59217 5.39991 5.36963 5.44935 5.26747 5.52688ZM6.48253 5.62662C6.38088 5.90938 6.24363 6.83521 6.29137 6.91541C6.37759 7.06032 6.70733 6.80126 6.82791 6.49382C6.899 6.3126 6.91237 6.07341 6.86217 5.88269C6.77204 5.54076 6.5638 5.40034 6.48253 5.62662ZM4.33411 6.0938C4.29882 6.18938 4.2483 6.53985 4.22196 6.87259L4.17402 7.47753L4.32413 6.73815C4.46724 6.03336 4.47207 5.72069 4.33411 6.0938ZM19.4469 6.5674C19.3602 6.71305 19.4739 6.89021 19.6541 6.89021C19.7408 6.89021 19.7753 6.95471 19.7399 7.05039C19.7073 7.13848 19.7352 7.21056 19.8019 7.21056C19.9327 7.21056 20.2171 7.46941 20.2171 7.58858C20.2171 7.62863 20.0551 7.62991 19.857 7.59136C19.632 7.54758 19.4969 7.56317 19.4969 7.6329C19.4969 7.6943 19.6617 7.74449 19.8631 7.74449C20.081 7.74449 20.2035 7.78774 20.1657 7.85128C20.1307 7.91001 20.0006 7.95881 19.8767 7.95967C19.6934 7.96105 19.6802 7.9807 19.8056 8.06485C19.8904 8.12177 20.0899 8.16907 20.249 8.17003C20.4539 8.17121 20.6981 8.32872 21.0878 8.71122L21.6375 9.25092L21.7076 8.82036C21.7462 8.58361 21.7474 8.2467 21.7104 8.07168C21.6316 7.69921 21.1267 7.20544 20.6231 7.0081C20.4281 6.93175 20.0983 6.77669 19.8902 6.66372C19.6499 6.53312 19.4883 6.49799 19.4469 6.5674ZM11.8835 6.9499C11.8835 7.04142 11.9305 7.08616 11.988 7.04932C12.0456 7.01237 12.066 6.93751 12.0334 6.88284C11.9452 6.73473 11.8835 6.76228 11.8835 6.9499ZM18.7321 6.99198C18.5852 7.0474 18.5674 7.08883 18.664 7.15076C18.7358 7.1969 18.8455 7.18195 18.9074 7.11766C19.0593 6.96005 18.9757 6.90025 18.7321 6.99198ZM19.2238 7.16176C19.1281 7.42061 19.2616 7.46738 19.3893 7.21975C19.4689 7.06523 19.4705 6.99699 19.3944 6.99699C19.3341 6.99699 19.2573 7.0711 19.2238 7.16176ZM17.7842 7.3732C17.7159 7.55794 18.0936 8.49327 18.2353 8.49039C18.2785 8.48943 18.3787 8.44607 18.4581 8.39385C18.578 8.31515 18.5605 8.21211 18.3552 7.78635C18.0876 7.23139 17.8896 7.08808 17.7842 7.3732ZM11.5234 8.06485C11.5584 8.12358 11.6074 8.17164 11.6324 8.17164C11.6574 8.17164 11.6777 8.12358 11.6777 8.06485C11.6777 8.00612 11.6287 7.95806 11.5688 7.95806C11.5089 7.95806 11.4884 8.00612 11.5234 8.06485ZM19.1691 8.8525C18.7982 9.11936 18.5353 9.38269 18.5562 9.46652C18.5764 9.54725 18.6173 9.79349 18.647 10.0137C18.6766 10.234 18.7411 10.4141 18.7903 10.4141C18.8394 10.4141 18.8796 10.3661 18.8796 10.3073C18.8796 10.1255 19.0678 10.1899 19.1136 10.3874C19.146 10.5269 19.1991 10.4795 19.3229 10.2006C19.4685 9.87262 19.4894 9.85831 19.4929 10.0836C19.4967 10.325 19.5082 10.3299 19.6838 10.165C19.7864 10.0685 20.0224 9.97225 20.2081 9.95111C20.3938 9.93007 20.5823 9.85126 20.6271 9.77598C20.6719 9.7008 20.7551 9.66909 20.812 9.70561C20.9669 9.80503 21.0618 9.26736 20.9332 9.01802C20.8018 8.76312 20.241 8.38617 19.9922 8.38563C19.8968 8.38542 19.5264 8.59547 19.1691 8.8525ZM19.5741 8.78159C19.475 8.89585 19.394 9.10441 19.394 9.24494V9.50047L19.6088 9.27761C19.7338 9.14787 19.8091 8.95427 19.7888 8.81427C19.7546 8.5771 19.7517 8.57667 19.5741 8.78159ZM4.03801 9.49471C3.92329 10.277 3.94469 11.0479 4.11301 12.2035C4.27094 13.2868 4.62856 14.8252 4.78854 15.1087C4.91231 15.3281 4.9117 15.1128 4.78741 14.7282C4.56508 14.0404 4.24707 11.7708 4.18277 10.4141C4.12608 9.21674 4.10149 9.06094 4.03801 9.49471ZM15.3769 9.35514C15.2167 9.66599 15.5082 9.98699 15.9508 9.98699C16.3362 9.98699 16.5573 9.76541 16.4669 9.46972C16.3512 9.09149 15.5561 9.00787 15.3769 9.35514ZM16.8219 9.70849C16.8219 10.2363 16.8438 10.2898 17.0839 10.3524C17.2279 10.39 17.39 10.3923 17.444 10.3577C17.498 10.323 17.5421 10.3428 17.5421 10.4014C17.5421 10.4602 17.6462 10.4953 17.7736 10.4796C18.2028 10.4265 18.3652 10.2928 18.3652 9.99212C18.3652 9.63 18.1285 9.40255 17.5936 9.2507C16.8581 9.04194 16.8219 9.0634 16.8219 9.70849ZM14.147 10.0404C14.147 10.1285 14.1933 10.2006 14.2498 10.2006C14.3064 10.2006 14.3527 10.1285 14.3527 10.0404C14.3527 9.95228 14.3064 9.8802 14.2498 9.8802C14.1933 9.8802 14.147 9.95228 14.147 10.0404ZM14.3388 10.8957C14.3077 10.9539 14.3117 11.1211 14.3476 11.2673C14.3836 11.4135 14.4384 11.4856 14.4695 11.4275C14.5007 11.3693 14.4967 11.2022 14.4608 11.0559C14.4247 10.9097 14.3699 10.8376 14.3388 10.8957ZM20.2461 11.001C19.6678 11.1476 18.9149 11.5125 18.9568 11.6259C18.9709 11.6643 18.9879 11.8997 18.9944 12.1494C19.001 12.3991 19.0276 12.5192 19.0534 12.4164C19.0793 12.3135 19.1488 12.2295 19.2078 12.2295C19.2669 12.2295 19.2909 12.3256 19.2613 12.4431C19.2318 12.5605 19.2495 12.6566 19.3008 12.6566C19.3521 12.6566 19.394 12.6056 19.394 12.5431C19.394 12.4808 19.475 12.4435 19.5741 12.4604C19.6732 12.4773 19.8172 12.4501 19.8943 12.4C19.9816 12.3432 20.0654 12.3609 20.1167 12.4473C20.1761 12.5469 20.2593 12.4833 20.4135 12.2207C20.6003 11.9026 20.6822 11.8769 20.6408 12.1494C20.617 12.3063 20.8018 12.2257 21.0087 11.9892C21.2486 11.7151 21.378 11.2582 21.2863 11.0099C21.2139 10.8143 20.9902 10.8123 20.2461 11.001ZM15.4845 11.3752C15.4845 11.7039 15.7899 12.1227 16.0297 12.1227C16.3948 12.1227 16.5401 11.5251 16.2488 11.2226C16.1598 11.1303 15.9514 11.0548 15.7858 11.0548C15.5195 11.0548 15.4845 11.0922 15.4845 11.3752ZM16.7205 11.4965C16.7212 11.6941 16.7502 11.9657 16.785 12.1003C16.8448 12.332 16.8582 12.3354 17.0408 12.1638C17.2231 11.9926 17.2335 11.9944 17.2335 12.1981C17.2335 12.3786 17.2917 12.4086 17.5936 12.3837C17.8529 12.3623 17.9537 12.3974 17.9537 12.509C17.9537 12.6291 17.9984 12.6392 18.152 12.554C18.2611 12.4934 18.4172 12.4705 18.4989 12.5031C18.7148 12.589 18.7994 12.0233 18.6151 11.7264C18.4646 11.4839 18.0633 11.3365 17.2078 11.2098L16.7191 11.1374L16.7205 11.4965ZM13.6808 12.3416C13.5831 12.5058 13.7169 12.6118 13.849 12.4747C13.9229 12.398 13.9246 12.3383 13.8544 12.2932C13.7967 12.2563 13.7187 12.2781 13.6808 12.3416ZM13.3239 12.7163C13.3239 12.8078 13.3709 12.8526 13.4284 12.8157C13.4859 12.7788 13.5064 12.7039 13.4738 12.6493C13.3856 12.5011 13.3239 12.5287 13.3239 12.7163ZM14.0955 12.6566C14.0605 12.7154 14.081 12.7634 14.1409 12.7634C14.2008 12.7634 14.2498 12.7154 14.2498 12.6566C14.2498 12.5979 14.2295 12.5498 14.2045 12.5498C14.1795 12.5498 14.1305 12.5979 14.0955 12.6566ZM12.1922 12.9299C12.1922 13.0214 12.2392 13.0661 12.2967 13.0293C12.3542 12.9924 12.3747 12.9175 12.3421 12.8628C12.2539 12.7147 12.1922 12.7423 12.1922 12.9299ZM13.7039 12.8316C13.6217 12.917 13.7146 13.0838 13.8444 13.0838C13.8977 13.0838 13.9412 13.0117 13.9412 12.9236C13.9412 12.7585 13.8198 12.7114 13.7039 12.8316ZM12.9124 12.977C12.9124 13.0357 12.9587 13.0838 13.0152 13.0838C13.0718 13.0838 13.1181 13.0357 13.1181 12.977C13.1181 12.9183 13.0718 12.8702 13.0152 12.8702C12.9587 12.8702 12.9124 12.9183 12.9124 12.977ZM15.7063 13.0713C15.5919 13.1465 15.5962 13.2189 15.7309 13.4891C15.9378 13.9045 16.2917 14.0375 16.4797 13.7705C16.6613 13.5127 16.6529 13.4422 16.4104 13.1906C16.1926 12.9645 15.9349 12.9208 15.7063 13.0713ZM11.7806 13.2439C11.7806 13.332 11.8269 13.4041 11.8835 13.4041C11.9401 13.4041 11.9864 13.332 11.9864 13.2439C11.9864 13.1558 11.9401 13.0838 11.8835 13.0838C11.8269 13.0838 11.7806 13.1558 11.7806 13.2439ZM12.6037 13.2439C12.6037 13.332 12.65 13.4041 12.7066 13.4041C12.7632 13.4041 12.8095 13.332 12.8095 13.2439C12.8095 13.1558 12.7632 13.0838 12.7066 13.0838C12.65 13.0838 12.6037 13.1558 12.6037 13.2439ZM16.8255 13.3774C16.8306 13.7765 17.073 14.228 17.1831 14.0431C17.2467 13.9362 17.2938 13.9467 17.3947 14.09C17.5983 14.379 18.0772 14.2724 18.1678 13.918C18.2535 13.5826 18.0898 13.3929 17.5525 13.2057C16.9804 13.0062 16.8214 13.0438 16.8255 13.3774ZM20.0441 13.298C19.9206 13.3497 19.5386 13.4248 19.1953 13.4652C18.6375 13.5307 18.571 13.5641 18.571 13.7786C18.571 14.068 18.8205 14.3089 19.0006 14.1934C19.0721 14.1476 19.294 14.1007 19.4938 14.0894C19.6935 14.0779 19.8802 14.0559 19.9085 14.0405C19.9367 14.025 20.0062 14.0031 20.0628 13.9919C20.2743 13.9497 20.7315 13.7275 20.7315 13.6667C20.7315 13.632 20.6836 13.5107 20.625 13.3971C20.5096 13.1733 20.3908 13.153 20.0441 13.298ZM13.0611 13.4134C13.0232 13.4773 13.0435 13.583 13.1065 13.6483C13.1906 13.7356 13.221 13.7047 13.221 13.5323C13.221 13.2744 13.1676 13.2347 13.0611 13.4134ZM11.472 13.5706C11.472 13.6621 11.519 13.7069 11.5765 13.67C11.634 13.6331 11.6545 13.5582 11.6219 13.5035C11.5337 13.3554 11.472 13.383 11.472 13.5706ZM10.6489 13.6774C10.6489 13.7689 10.6959 13.8136 10.7534 13.7768C10.811 13.7399 10.8314 13.665 10.7988 13.6103C10.7106 13.4622 10.6489 13.4898 10.6489 13.6774ZM6.63644 14.7719C6.63644 14.8782 6.70085 15.0565 6.77965 15.1683C6.90126 15.341 6.94766 15.3502 7.08831 15.2291C7.32566 15.0246 7.29274 14.8451 6.9917 14.7027C6.65054 14.5414 6.63644 14.5441 6.63644 14.7719Z\"\n        fill=\"black\"\n        fillOpacity=\"0.2\"\n      />\n      <path\n        d=\"M4.57876 5.32762C4.57876 5.26686 4.60963 5.18516 4.64739 5.14608C4.68504 5.10689 4.73988 5.09974 4.7691 5.13006C4.79832 5.16039 4.76745 5.24208 4.70048 5.3116C4.62671 5.38816 4.57876 5.39446 4.57876 5.32762Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M4.57876 5.32762C4.57876 5.26686 4.60963 5.18516 4.64739 5.14608C4.68504 5.10689 4.73988 5.09974 4.7691 5.13006C4.79832 5.16039 4.76745 5.24208 4.70048 5.3116C4.62671 5.38816 4.57876 5.39446 4.57876 5.32762Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M4.22196 6.87259C4.2483 6.53985 4.29882 6.18938 4.33411 6.0938C4.47207 5.72069 4.46724 6.03336 4.32413 6.73815L4.17402 7.47753L4.22196 6.87259Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M4.22196 6.87259C4.2483 6.53985 4.29882 6.18938 4.33411 6.0938C4.47207 5.72069 4.46724 6.03336 4.32413 6.73815L4.17402 7.47753L4.22196 6.87259Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M4.11301 12.2035C3.94469 11.0479 3.92329 10.277 4.03801 9.49471C4.10149 9.06094 4.12608 9.21674 4.18277 10.4141C4.24707 11.7708 4.56508 14.0404 4.78741 14.7282C4.9117 15.1128 4.91231 15.3281 4.78854 15.1087C4.62856 14.8252 4.27094 13.2868 4.11301 12.2035Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M4.11301 12.2035C3.94469 11.0479 3.92329 10.277 4.03801 9.49471C4.10149 9.06094 4.12608 9.21674 4.18277 10.4141C4.24707 11.7708 4.56508 14.0404 4.78741 14.7282C4.9117 15.1128 4.91231 15.3281 4.78854 15.1087C4.62856 14.8252 4.27094 13.2868 4.11301 12.2035Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M4.87301 6.46595C4.98886 6.02322 5.16438 5.60526 5.26747 5.52688C5.36963 5.44935 5.59217 5.39991 5.76193 5.41721C6.11657 5.4533 6.11194 5.40536 5.91512 6.99699C5.69845 8.7487 5.92212 12.6896 6.33427 14.383C6.61864 15.5514 6.62173 15.5398 6.03179 15.5398C5.53126 15.5398 5.52962 15.5387 5.32045 15.0326C4.6014 13.292 4.34944 8.4686 4.87301 6.46595Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M4.87301 6.46595C4.98886 6.02322 5.16438 5.60526 5.26747 5.52688C5.36963 5.44935 5.59217 5.39991 5.76193 5.41721C6.11657 5.4533 6.11194 5.40536 5.91512 6.99699C5.69845 8.7487 5.92212 12.6896 6.33427 14.383C6.61864 15.5514 6.62173 15.5398 6.03179 15.5398C5.53126 15.5398 5.52962 15.5387 5.32045 15.0326C4.6014 13.292 4.34944 8.4686 4.87301 6.46595Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M6.29137 6.91541C6.24363 6.83521 6.38088 5.90938 6.48253 5.62662C6.5638 5.40034 6.77204 5.54076 6.86217 5.88269C6.91237 6.07341 6.899 6.3126 6.82791 6.49382C6.70733 6.80126 6.37759 7.06032 6.29137 6.91541Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M6.29137 6.91541C6.24363 6.83521 6.38088 5.90938 6.48253 5.62662C6.5638 5.40034 6.77204 5.54076 6.86217 5.88269C6.91237 6.07341 6.899 6.3126 6.82791 6.49382C6.70733 6.80126 6.37759 7.06032 6.29137 6.91541Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M6.77965 15.1683C6.70085 15.0565 6.63644 14.8782 6.63644 14.7719C6.63644 14.5441 6.65054 14.5414 6.9917 14.7027C7.29274 14.8451 7.32566 15.0246 7.08831 15.2291C6.94766 15.3502 6.90126 15.341 6.77965 15.1683Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M6.77965 15.1683C6.70085 15.0565 6.63644 14.8782 6.63644 14.7719C6.63644 14.5441 6.65054 14.5414 6.9917 14.7027C7.29274 14.8451 7.32566 15.0246 7.08831 15.2291C6.94766 15.3502 6.90126 15.341 6.77965 15.1683Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M15.9508 9.98699C15.5082 9.98699 15.2167 9.66599 15.3769 9.35514C15.5561 9.00787 16.3512 9.09149 16.4669 9.46972C16.5573 9.76541 16.3362 9.98699 15.9508 9.98699Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M15.9508 9.98699C15.5082 9.98699 15.2167 9.66599 15.3769 9.35514C15.5561 9.00787 16.3512 9.09149 16.4669 9.46972C16.5573 9.76541 16.3362 9.98699 15.9508 9.98699Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M17.0839 10.3524C16.8438 10.2898 16.8219 10.2363 16.8219 9.70849C16.8219 9.0634 16.8581 9.04194 17.5936 9.2507C18.1285 9.40255 18.3652 9.63 18.3652 9.99212C18.3652 10.2928 18.2028 10.4265 17.7736 10.4796C17.6462 10.4953 17.5421 10.4602 17.5421 10.4014C17.5421 10.3428 17.498 10.323 17.444 10.3577C17.39 10.3923 17.2279 10.39 17.0839 10.3524Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M17.0839 10.3524C16.8438 10.2898 16.8219 10.2363 16.8219 9.70849C16.8219 9.0634 16.8581 9.04194 17.5936 9.2507C18.1285 9.40255 18.3652 9.63 18.3652 9.99212C18.3652 10.2928 18.2028 10.4265 17.7736 10.4796C17.6462 10.4953 17.5421 10.4602 17.5421 10.4014C17.5421 10.3428 17.498 10.323 17.444 10.3577C17.39 10.3923 17.2279 10.39 17.0839 10.3524Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M18.5562 9.46652C18.5353 9.38269 18.7982 9.11936 19.1691 8.8525C19.5264 8.59547 19.8968 8.38542 19.9922 8.38563C20.241 8.38617 20.8018 8.76312 20.9332 9.01802C21.0618 9.26736 20.9669 9.80503 20.812 9.70561C20.7551 9.66909 20.6719 9.7008 20.6271 9.77598C20.5823 9.85126 20.3938 9.93007 20.2081 9.95111C20.0224 9.97225 19.7864 10.0685 19.6838 10.165C19.5082 10.3299 19.4967 10.325 19.4929 10.0836C19.4894 9.85831 19.4685 9.87262 19.3229 10.2006C19.1991 10.4795 19.146 10.5269 19.1136 10.3874C19.0678 10.1899 18.8796 10.1255 18.8796 10.3073C18.8796 10.3661 18.8394 10.4141 18.7903 10.4141C18.7411 10.4141 18.6766 10.234 18.647 10.0137C18.6173 9.79349 18.5764 9.54725 18.5562 9.46652Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M18.5562 9.46652C18.5353 9.38269 18.7982 9.11936 19.1691 8.8525C19.5264 8.59547 19.8968 8.38542 19.9922 8.38563C20.241 8.38617 20.8018 8.76312 20.9332 9.01802C21.0618 9.26736 20.9669 9.80503 20.812 9.70561C20.7551 9.66909 20.6719 9.7008 20.6271 9.77598C20.5823 9.85126 20.3938 9.93007 20.2081 9.95111C20.0224 9.97225 19.7864 10.0685 19.6838 10.165C19.5082 10.3299 19.4967 10.325 19.4929 10.0836C19.4894 9.85831 19.4685 9.87262 19.3229 10.2006C19.1991 10.4795 19.146 10.5269 19.1136 10.3874C19.0678 10.1899 18.8796 10.1255 18.8796 10.3073C18.8796 10.3661 18.8394 10.4141 18.7903 10.4141C18.7411 10.4141 18.6766 10.234 18.647 10.0137C18.6173 9.79349 18.5764 9.54725 18.5562 9.46652Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M18.2353 8.49039C18.0936 8.49327 17.7159 7.55794 17.7842 7.3732C17.8896 7.08808 18.0876 7.23139 18.3552 7.78635C18.5605 8.21211 18.578 8.31515 18.4581 8.39385C18.3787 8.44607 18.2785 8.48943 18.2353 8.49039Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M18.2353 8.49039C18.0936 8.49327 17.7159 7.55794 17.7842 7.3732C17.8896 7.08808 18.0876 7.23139 18.3552 7.78635C18.5605 8.21211 18.578 8.31515 18.4581 8.39385C18.3787 8.44607 18.2785 8.48943 18.2353 8.49039Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M18.664 7.15076C18.5674 7.08883 18.5852 7.0474 18.7321 6.99198C18.9757 6.90025 19.0593 6.96005 18.9074 7.11766C18.8455 7.18195 18.7358 7.1969 18.664 7.15076Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M18.664 7.15076C18.5674 7.08883 18.5852 7.0474 18.7321 6.99198C18.9757 6.90025 19.0593 6.96005 18.9074 7.11766C18.8455 7.18195 18.7358 7.1969 18.664 7.15076Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M19.3893 7.21975C19.2616 7.46738 19.1281 7.42061 19.2238 7.16176C19.2573 7.0711 19.3341 6.99699 19.3944 6.99699C19.4705 6.99699 19.4689 7.06523 19.3893 7.21975Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M19.3893 7.21975C19.2616 7.46738 19.1281 7.42061 19.2238 7.16176C19.2573 7.0711 19.3341 6.99699 19.3944 6.99699C19.4705 6.99699 19.4689 7.06523 19.3893 7.21975Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M19.6541 6.89021C19.4739 6.89021 19.3602 6.71305 19.4469 6.5674C19.4883 6.49799 19.6499 6.53312 19.8902 6.66372C20.0983 6.77669 20.4281 6.93175 20.6231 7.0081C21.1267 7.20544 21.6316 7.69921 21.7104 8.07168C21.7474 8.2467 21.7462 8.58361 21.7076 8.82036L21.6375 9.25092L21.0878 8.71122C20.6981 8.32872 20.4539 8.17121 20.249 8.17003C20.0899 8.16907 19.8904 8.12177 19.8056 8.06485C19.6802 7.9807 19.6934 7.96105 19.8767 7.95967C20.0006 7.95881 20.1307 7.91001 20.1657 7.85128C20.2035 7.78774 20.081 7.74449 19.8631 7.74449C19.6617 7.74449 19.4969 7.6943 19.4969 7.6329C19.4969 7.56317 19.632 7.54758 19.857 7.59136C20.0551 7.62991 20.2171 7.62863 20.2171 7.58858C20.2171 7.46941 19.9327 7.21056 19.8019 7.21056C19.7352 7.21056 19.7073 7.13848 19.7399 7.05039C19.7753 6.95471 19.7408 6.89021 19.6541 6.89021Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M19.6541 6.89021C19.4739 6.89021 19.3602 6.71305 19.4469 6.5674C19.4883 6.49799 19.6499 6.53312 19.8902 6.66372C20.0983 6.77669 20.4281 6.93175 20.6231 7.0081C21.1267 7.20544 21.6316 7.69921 21.7104 8.07168C21.7474 8.2467 21.7462 8.58361 21.7076 8.82036L21.6375 9.25092L21.0878 8.71122C20.6981 8.32872 20.4539 8.17121 20.249 8.17003C20.0899 8.16907 19.8904 8.12177 19.8056 8.06485C19.6802 7.9807 19.6934 7.96105 19.8767 7.95967C20.0006 7.95881 20.1307 7.91001 20.1657 7.85128C20.2035 7.78774 20.081 7.74449 19.8631 7.74449C19.6617 7.74449 19.4969 7.6943 19.4969 7.6329C19.4969 7.56317 19.632 7.54758 19.857 7.59136C20.0551 7.62991 20.2171 7.62863 20.2171 7.58858C20.2171 7.46941 19.9327 7.21056 19.8019 7.21056C19.7352 7.21056 19.7073 7.13848 19.7399 7.05039C19.7753 6.95471 19.7408 6.89021 19.6541 6.89021Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M16.0297 12.1227C15.7899 12.1227 15.4845 11.7039 15.4845 11.3752C15.4845 11.0922 15.5195 11.0548 15.7858 11.0548C15.9514 11.0548 16.1598 11.1303 16.2488 11.2226C16.5401 11.5251 16.3948 12.1227 16.0297 12.1227Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M16.0297 12.1227C15.7899 12.1227 15.4845 11.7039 15.4845 11.3752C15.4845 11.0922 15.5195 11.0548 15.7858 11.0548C15.9514 11.0548 16.1598 11.1303 16.2488 11.2226C16.5401 11.5251 16.3948 12.1227 16.0297 12.1227Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M15.7309 13.4891C15.5962 13.2189 15.5919 13.1465 15.7063 13.0713C15.9349 12.9208 16.1926 12.9645 16.4104 13.1906C16.6529 13.4422 16.6613 13.5127 16.4797 13.7705C16.2917 14.0375 15.9378 13.9045 15.7309 13.4891Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M15.7309 13.4891C15.5962 13.2189 15.5919 13.1465 15.7063 13.0713C15.9349 12.9208 16.1926 12.9645 16.4104 13.1906C16.6529 13.4422 16.6613 13.5127 16.4797 13.7705C16.2917 14.0375 15.9378 13.9045 15.7309 13.4891Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M16.785 12.1003C16.7502 11.9657 16.7212 11.6941 16.7205 11.4965L16.7191 11.1374L17.2078 11.2098C18.0633 11.3365 18.4646 11.4839 18.6151 11.7264C18.7994 12.0233 18.7148 12.589 18.4989 12.5031C18.4172 12.4705 18.2611 12.4934 18.152 12.554C17.9984 12.6392 17.9537 12.6291 17.9537 12.509C17.9537 12.3974 17.8529 12.3623 17.5936 12.3837C17.2917 12.4086 17.2335 12.3786 17.2335 12.1981C17.2335 11.9944 17.2231 11.9926 17.0408 12.1638C16.8582 12.3354 16.8448 12.332 16.785 12.1003Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M16.785 12.1003C16.7502 11.9657 16.7212 11.6941 16.7205 11.4965L16.7191 11.1374L17.2078 11.2098C18.0633 11.3365 18.4646 11.4839 18.6151 11.7264C18.7994 12.0233 18.7148 12.589 18.4989 12.5031C18.4172 12.4705 18.2611 12.4934 18.152 12.554C17.9984 12.6392 17.9537 12.6291 17.9537 12.509C17.9537 12.3974 17.8529 12.3623 17.5936 12.3837C17.2917 12.4086 17.2335 12.3786 17.2335 12.1981C17.2335 11.9944 17.2231 11.9926 17.0408 12.1638C16.8582 12.3354 16.8448 12.332 16.785 12.1003Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M17.1831 14.0431C17.073 14.228 16.8306 13.7765 16.8255 13.3774C16.8214 13.0438 16.9804 13.0062 17.5525 13.2057C18.0898 13.3929 18.2535 13.5826 18.1678 13.918C18.0772 14.2724 17.5983 14.379 17.3947 14.09C17.2938 13.9467 17.2467 13.9362 17.1831 14.0431Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M17.1831 14.0431C17.073 14.228 16.8306 13.7765 16.8255 13.3774C16.8214 13.0438 16.9804 13.0062 17.5525 13.2057C18.0898 13.3929 18.2535 13.5826 18.1678 13.918C18.0772 14.2724 17.5983 14.379 17.3947 14.09C17.2938 13.9467 17.2467 13.9362 17.1831 14.0431Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M19.1953 13.4652C19.5386 13.4248 19.9206 13.3497 20.0441 13.298C20.3908 13.153 20.5096 13.1733 20.625 13.3971C20.6836 13.5107 20.7315 13.632 20.7315 13.6667C20.7315 13.7275 20.2743 13.9497 20.0628 13.9919C20.0062 14.0031 19.9367 14.025 19.9085 14.0405C19.8802 14.0559 19.6935 14.0779 19.4938 14.0894C19.294 14.1007 19.0721 14.1476 19.0006 14.1934C18.8205 14.3089 18.571 14.068 18.571 13.7786C18.571 13.5641 18.6375 13.5307 19.1953 13.4652Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M19.1953 13.4652C19.5386 13.4248 19.9206 13.3497 20.0441 13.298C20.3908 13.153 20.5096 13.1733 20.625 13.3971C20.6836 13.5107 20.7315 13.632 20.7315 13.6667C20.7315 13.7275 20.2743 13.9497 20.0628 13.9919C20.0062 14.0031 19.9367 14.025 19.9085 14.0405C19.8802 14.0559 19.6935 14.0779 19.4938 14.0894C19.294 14.1007 19.0721 14.1476 19.0006 14.1934C18.8205 14.3089 18.571 14.068 18.571 13.7786C18.571 13.5641 18.6375 13.5307 19.1953 13.4652Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M18.9568 11.6259C18.9149 11.5125 19.6678 11.1476 20.2461 11.001C20.9902 10.8123 21.2139 10.8143 21.2863 11.0099C21.378 11.2582 21.2486 11.7151 21.0087 11.9892C20.8018 12.2257 20.617 12.3063 20.6408 12.1494C20.6822 11.8769 20.6003 11.9026 20.4135 12.2207C20.2593 12.4833 20.1761 12.5469 20.1167 12.4473C20.0654 12.3609 19.9816 12.3432 19.8943 12.4C19.8172 12.4501 19.6732 12.4773 19.5741 12.4604C19.475 12.4435 19.394 12.4808 19.394 12.5431C19.394 12.6056 19.3521 12.6566 19.3008 12.6566C19.2495 12.6566 19.2318 12.5605 19.2613 12.4431C19.2909 12.3256 19.2669 12.2295 19.2078 12.2295C19.1488 12.2295 19.0793 12.3135 19.0534 12.4164C19.0276 12.5192 19.001 12.3991 18.9944 12.1494C18.9879 11.8997 18.9709 11.6643 18.9568 11.6259Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M18.9568 11.6259C18.9149 11.5125 19.6678 11.1476 20.2461 11.001C20.9902 10.8123 21.2139 10.8143 21.2863 11.0099C21.378 11.2582 21.2486 11.7151 21.0087 11.9892C20.8018 12.2257 20.617 12.3063 20.6408 12.1494C20.6822 11.8769 20.6003 11.9026 20.4135 12.2207C20.2593 12.4833 20.1761 12.5469 20.1167 12.4473C20.0654 12.3609 19.9816 12.3432 19.8943 12.4C19.8172 12.4501 19.6732 12.4773 19.5741 12.4604C19.475 12.4435 19.394 12.4808 19.394 12.5431C19.394 12.6056 19.3521 12.6566 19.3008 12.6566C19.2495 12.6566 19.2318 12.5605 19.2613 12.4431C19.2909 12.3256 19.2669 12.2295 19.2078 12.2295C19.1488 12.2295 19.0793 12.3135 19.0534 12.4164C19.0276 12.5192 19.001 12.3991 18.9944 12.1494C18.9879 11.8997 18.9709 11.6643 18.9568 11.6259Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M16.1532 3.57804C16.8888 3.56309 18.0463 3.51813 18.7253 3.47809C19.4043 3.43794 20.0293 3.4295 20.1142 3.45908C20.3377 3.53725 24.4407 3.72295 25.4253 3.69956C25.8849 3.68856 26.4867 3.73203 26.7628 3.7961C27.2996 3.92061 27.8305 4.35085 27.8305 4.66138C27.8305 4.94991 27.6485 5.0001 27.5183 4.74745L27.4014 4.52085L27.1661 4.75023C26.9653 4.94618 26.9218 4.95536 26.8695 4.81366C26.779 4.56901 26.5959 4.61194 26.5959 4.87783C26.5959 5.10048 26.5893 5.10176 26.3921 4.91649C26.2394 4.77308 26.1539 4.7546 26.0516 4.8427C25.9486 4.93144 25.8726 4.90891 25.7421 4.75065C25.5499 4.51775 25.1621 4.44546 25.3327 4.67441C25.3874 4.74788 25.4616 4.904 25.4975 5.02146C25.5547 5.20866 25.5424 5.20535 25.398 4.99477C25.3075 4.86267 25.1664 4.7545 25.0846 4.7545C24.9778 4.7545 24.956 4.82231 25.0071 4.99477C25.0775 5.23279 25.0755 5.23258 24.7834 4.96807C24.6213 4.82124 24.4586 4.65892 24.422 4.60735C24.3854 4.55577 24.3017 4.54797 24.2361 4.59015C24.147 4.64728 24.1506 4.71018 24.2503 4.8379C24.3632 4.98248 24.3599 4.99444 24.2296 4.915C24.1447 4.86331 24.0142 4.73314 23.9396 4.62571C23.7369 4.33398 23.5694 4.51049 23.761 4.81398C24.0224 5.22809 23.9445 5.24721 23.5624 4.86288C23.1873 4.4855 23.0024 4.47664 23.1924 4.84516C23.3824 5.21368 23.3162 5.23407 22.9879 4.90795C22.7005 4.62251 22.6632 4.61108 22.5713 4.78119C22.4476 5.01014 22.2748 5.02573 22.2748 4.80789C22.2748 4.71979 22.2053 4.64771 22.1205 4.64771C22.0356 4.64771 21.9661 4.57563 21.9661 4.48753C21.9661 4.39944 21.9198 4.32736 21.8632 4.32736C21.8067 4.32736 21.7604 4.37253 21.7604 4.42784C21.7604 4.48316 21.8067 4.55801 21.8632 4.59432C21.9198 4.63063 21.9661 4.73197 21.9661 4.81964C21.9661 4.93667 21.8698 4.90272 21.6033 4.6916C21.2149 4.38417 21.0198 4.41823 21.2241 4.75791C21.4333 5.10561 21.3643 5.13017 21.0517 4.81942L20.7547 4.52395L20.5831 4.77276L20.4113 5.02146L20.4758 4.7011L20.5401 4.38075L20.3353 4.6224C20.2227 4.75535 20.1111 4.92354 20.0876 4.99615C20.0536 5.10091 20.0128 5.1008 19.89 4.99573C19.8049 4.92279 19.7047 4.89471 19.6675 4.93336C19.6303 4.97202 19.5998 4.92354 19.5998 4.82572C19.5998 4.64867 19.3475 4.57488 19.2651 4.7278C19.2415 4.7718 19.2355 4.74937 19.2521 4.67783C19.3114 4.42111 19.0534 4.40851 18.8678 4.65903L18.6784 4.91468L18.6761 4.67441C18.6734 4.3878 18.5195 4.36067 18.3734 4.62102C18.285 4.77863 18.2681 4.75845 18.2654 4.49287C18.2631 4.25773 18.2327 4.20861 18.1454 4.29916C18.0583 4.38961 17.9917 4.38203 17.883 4.26926C17.7832 4.16568 17.5853 4.13322 17.254 4.16611C16.2554 4.26531 15.3544 4.1612 14.4556 3.84287L14.1984 3.75178L14.5071 3.67842C14.6768 3.63816 15.4176 3.59288 16.1532 3.57804Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M16.1532 3.57804C16.8888 3.56309 18.0463 3.51813 18.7253 3.47809C19.4043 3.43794 20.0293 3.4295 20.1142 3.45908C20.3377 3.53725 24.4407 3.72295 25.4253 3.69956C25.8849 3.68856 26.4867 3.73203 26.7628 3.7961C27.2996 3.92061 27.8305 4.35085 27.8305 4.66138C27.8305 4.94991 27.6485 5.0001 27.5183 4.74745L27.4014 4.52085L27.1661 4.75023C26.9653 4.94618 26.9218 4.95536 26.8695 4.81366C26.779 4.56901 26.5959 4.61194 26.5959 4.87783C26.5959 5.10048 26.5893 5.10176 26.3921 4.91649C26.2394 4.77308 26.1539 4.7546 26.0516 4.8427C25.9486 4.93144 25.8726 4.90891 25.7421 4.75065C25.5499 4.51775 25.1621 4.44546 25.3327 4.67441C25.3874 4.74788 25.4616 4.904 25.4975 5.02146C25.5547 5.20866 25.5424 5.20535 25.398 4.99477C25.3075 4.86267 25.1664 4.7545 25.0846 4.7545C24.9778 4.7545 24.956 4.82231 25.0071 4.99477C25.0775 5.23279 25.0755 5.23258 24.7834 4.96807C24.6213 4.82124 24.4586 4.65892 24.422 4.60735C24.3854 4.55577 24.3017 4.54797 24.2361 4.59015C24.147 4.64728 24.1506 4.71018 24.2503 4.8379C24.3632 4.98248 24.3599 4.99444 24.2296 4.915C24.1447 4.86331 24.0142 4.73314 23.9396 4.62571C23.7369 4.33398 23.5694 4.51049 23.761 4.81398C24.0224 5.22809 23.9445 5.24721 23.5624 4.86288C23.1873 4.4855 23.0024 4.47664 23.1924 4.84516C23.3824 5.21368 23.3162 5.23407 22.9879 4.90795C22.7005 4.62251 22.6632 4.61108 22.5713 4.78119C22.4476 5.01014 22.2748 5.02573 22.2748 4.80789C22.2748 4.71979 22.2053 4.64771 22.1205 4.64771C22.0356 4.64771 21.9661 4.57563 21.9661 4.48753C21.9661 4.39944 21.9198 4.32736 21.8632 4.32736C21.8067 4.32736 21.7604 4.37253 21.7604 4.42784C21.7604 4.48316 21.8067 4.55801 21.8632 4.59432C21.9198 4.63063 21.9661 4.73197 21.9661 4.81964C21.9661 4.93667 21.8698 4.90272 21.6033 4.6916C21.2149 4.38417 21.0198 4.41823 21.2241 4.75791C21.4333 5.10561 21.3643 5.13017 21.0517 4.81942L20.7547 4.52395L20.5831 4.77276L20.4113 5.02146L20.4758 4.7011L20.5401 4.38075L20.3353 4.6224C20.2227 4.75535 20.1111 4.92354 20.0876 4.99615C20.0536 5.10091 20.0128 5.1008 19.89 4.99573C19.8049 4.92279 19.7047 4.89471 19.6675 4.93336C19.6303 4.97202 19.5998 4.92354 19.5998 4.82572C19.5998 4.64867 19.3475 4.57488 19.2651 4.7278C19.2415 4.7718 19.2355 4.74937 19.2521 4.67783C19.3114 4.42111 19.0534 4.40851 18.8678 4.65903L18.6784 4.91468L18.6761 4.67441C18.6734 4.3878 18.5195 4.36067 18.3734 4.62102C18.285 4.77863 18.2681 4.75845 18.2654 4.49287C18.2631 4.25773 18.2327 4.20861 18.1454 4.29916C18.0583 4.38961 17.9917 4.38203 17.883 4.26926C17.7832 4.16568 17.5853 4.13322 17.254 4.16611C16.2554 4.26531 15.3544 4.1612 14.4556 3.84287L14.1984 3.75178L14.5071 3.67842C14.6768 3.63816 15.4176 3.59288 16.1532 3.57804Z\"\n        fill=\"black\"\n        fillOpacity=\"0.2\"\n      />\n      <path\n        d=\"M16.1532 3.57804C16.8888 3.56309 18.0463 3.51813 18.7253 3.47809C19.4043 3.43794 20.0293 3.4295 20.1142 3.45908C20.3377 3.53725 24.4407 3.72295 25.4253 3.69956C25.8849 3.68856 26.4867 3.73203 26.7628 3.7961C27.2996 3.92061 27.8305 4.35085 27.8305 4.66138C27.8305 4.94991 27.6485 5.0001 27.5183 4.74745L27.4014 4.52085L27.1661 4.75023C26.9653 4.94618 26.9218 4.95536 26.8695 4.81366C26.779 4.56901 26.5959 4.61194 26.5959 4.87783C26.5959 5.10048 26.5893 5.10176 26.3921 4.91649C26.2394 4.77308 26.1539 4.7546 26.0516 4.8427C25.9486 4.93144 25.8726 4.90891 25.7421 4.75065C25.5499 4.51775 25.1621 4.44546 25.3327 4.67441C25.3874 4.74788 25.4616 4.904 25.4975 5.02146C25.5547 5.20866 25.5424 5.20535 25.398 4.99477C25.3075 4.86267 25.1664 4.7545 25.0846 4.7545C24.9778 4.7545 24.956 4.82231 25.0071 4.99477C25.0775 5.23279 25.0755 5.23258 24.7834 4.96807C24.6213 4.82124 24.4586 4.65892 24.422 4.60735C24.3854 4.55577 24.3017 4.54797 24.2361 4.59015C24.147 4.64728 24.1506 4.71018 24.2503 4.8379C24.3632 4.98248 24.3599 4.99444 24.2296 4.915C24.1447 4.86331 24.0142 4.73314 23.9396 4.62571C23.7369 4.33398 23.5694 4.51049 23.761 4.81398C24.0224 5.22809 23.9445 5.24721 23.5624 4.86288C23.1873 4.4855 23.0024 4.47664 23.1924 4.84516C23.3824 5.21368 23.3162 5.23407 22.9879 4.90795C22.7005 4.62251 22.6632 4.61108 22.5713 4.78119C22.4476 5.01014 22.2748 5.02573 22.2748 4.80789C22.2748 4.71979 22.2053 4.64771 22.1205 4.64771C22.0356 4.64771 21.9661 4.57563 21.9661 4.48753C21.9661 4.39944 21.9198 4.32736 21.8632 4.32736C21.8067 4.32736 21.7604 4.37253 21.7604 4.42784C21.7604 4.48316 21.8067 4.55801 21.8632 4.59432C21.9198 4.63063 21.9661 4.73197 21.9661 4.81964C21.9661 4.93667 21.8698 4.90272 21.6033 4.6916C21.2149 4.38417 21.0198 4.41823 21.2241 4.75791C21.4333 5.10561 21.3643 5.13017 21.0517 4.81942L20.7547 4.52395L20.5831 4.77276L20.4113 5.02146L20.4758 4.7011L20.5401 4.38075L20.3353 4.6224C20.2227 4.75535 20.1111 4.92354 20.0876 4.99615C20.0536 5.10091 20.0128 5.1008 19.89 4.99573C19.8049 4.92279 19.7047 4.89471 19.6675 4.93336C19.6303 4.97202 19.5998 4.92354 19.5998 4.82572C19.5998 4.64867 19.3475 4.57488 19.2651 4.7278C19.2415 4.7718 19.2355 4.74937 19.2521 4.67783C19.3114 4.42111 19.0534 4.40851 18.8678 4.65903L18.6784 4.91468L18.6761 4.67441C18.6734 4.3878 18.5195 4.36067 18.3734 4.62102C18.285 4.77863 18.2681 4.75845 18.2654 4.49287C18.2631 4.25773 18.2327 4.20861 18.1454 4.29916C18.0583 4.38961 17.9917 4.38203 17.883 4.26926C17.7832 4.16568 17.5853 4.13322 17.254 4.16611C16.2554 4.26531 15.3544 4.1612 14.4556 3.84287L14.1984 3.75178L14.5071 3.67842C14.6768 3.63816 15.4176 3.59288 16.1532 3.57804Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M16.1532 3.57804C16.8888 3.56309 18.0463 3.51813 18.7253 3.47809C19.4043 3.43794 20.0293 3.4295 20.1142 3.45908C20.3377 3.53725 24.4407 3.72295 25.4253 3.69956C25.8849 3.68856 26.4867 3.73203 26.7628 3.7961C27.2996 3.92061 27.8305 4.35085 27.8305 4.66138C27.8305 4.94991 27.6485 5.0001 27.5183 4.74745L27.4014 4.52085L27.1661 4.75023C26.9653 4.94618 26.9218 4.95536 26.8695 4.81366C26.779 4.56901 26.5959 4.61194 26.5959 4.87783C26.5959 5.10048 26.5893 5.10176 26.3921 4.91649C26.2394 4.77308 26.1539 4.7546 26.0516 4.8427C25.9486 4.93144 25.8726 4.90891 25.7421 4.75065C25.5499 4.51775 25.1621 4.44546 25.3327 4.67441C25.3874 4.74788 25.4616 4.904 25.4975 5.02146C25.5547 5.20866 25.5424 5.20535 25.398 4.99477C25.3075 4.86267 25.1664 4.7545 25.0846 4.7545C24.9778 4.7545 24.956 4.82231 25.0071 4.99477C25.0775 5.23279 25.0755 5.23258 24.7834 4.96807C24.6213 4.82124 24.4586 4.65892 24.422 4.60735C24.3854 4.55577 24.3017 4.54797 24.2361 4.59015C24.147 4.64728 24.1506 4.71018 24.2503 4.8379C24.3632 4.98248 24.3599 4.99444 24.2296 4.915C24.1447 4.86331 24.0142 4.73314 23.9396 4.62571C23.7369 4.33398 23.5694 4.51049 23.761 4.81398C24.0224 5.22809 23.9445 5.24721 23.5624 4.86288C23.1873 4.4855 23.0024 4.47664 23.1924 4.84516C23.3824 5.21368 23.3162 5.23407 22.9879 4.90795C22.7005 4.62251 22.6632 4.61108 22.5713 4.78119C22.4476 5.01014 22.2748 5.02573 22.2748 4.80789C22.2748 4.71979 22.2053 4.64771 22.1205 4.64771C22.0356 4.64771 21.9661 4.57563 21.9661 4.48753C21.9661 4.39944 21.9198 4.32736 21.8632 4.32736C21.8067 4.32736 21.7604 4.37253 21.7604 4.42784C21.7604 4.48316 21.8067 4.55801 21.8632 4.59432C21.9198 4.63063 21.9661 4.73197 21.9661 4.81964C21.9661 4.93667 21.8698 4.90272 21.6033 4.6916C21.2149 4.38417 21.0198 4.41823 21.2241 4.75791C21.4333 5.10561 21.3643 5.13017 21.0517 4.81942L20.7547 4.52395L20.5831 4.77276L20.4113 5.02146L20.4758 4.7011L20.5401 4.38075L20.3353 4.6224C20.2227 4.75535 20.1111 4.92354 20.0876 4.99615C20.0536 5.10091 20.0128 5.1008 19.89 4.99573C19.8049 4.92279 19.7047 4.89471 19.6675 4.93336C19.6303 4.97202 19.5998 4.92354 19.5998 4.82572C19.5998 4.64867 19.3475 4.57488 19.2651 4.7278C19.2415 4.7718 19.2355 4.74937 19.2521 4.67783C19.3114 4.42111 19.0534 4.40851 18.8678 4.65903L18.6784 4.91468L18.6761 4.67441C18.6734 4.3878 18.5195 4.36067 18.3734 4.62102C18.285 4.77863 18.2681 4.75845 18.2654 4.49287C18.2631 4.25773 18.2327 4.20861 18.1454 4.29916C18.0583 4.38961 17.9917 4.38203 17.883 4.26926C17.7832 4.16568 17.5853 4.13322 17.254 4.16611C16.2554 4.26531 15.3544 4.1612 14.4556 3.84287L14.1984 3.75178L14.5071 3.67842C14.6768 3.63816 15.4176 3.59288 16.1532 3.57804Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M12.339 4.32202C12.6744 4.26499 12.9714 4.19483 12.9992 4.16611C13.1512 4.00817 14.2502 4.24865 15.5873 4.7325C16.4304 5.03748 17.2376 5.70969 17.6004 6.40882C17.7873 6.76911 17.7877 6.79688 17.6128 7.13389C17.4439 7.45959 17.4426 7.51319 17.5955 7.89292C17.7923 8.382 17.7485 8.46049 17.4076 8.22866C17.2268 8.10575 17.1664 7.98636 17.2006 7.81967C17.244 7.60759 17.2348 7.60183 17.1086 7.76072C16.981 7.92122 16.9384 7.90456 16.6379 7.57673C16.4562 7.37854 16.3075 7.14147 16.3075 7.04996C16.3075 6.95844 16.2381 6.85582 16.1532 6.82208C16.0683 6.78823 15.9989 6.64343 15.9989 6.50033C15.9989 6.33022 15.9474 6.25099 15.8503 6.27149C15.7685 6.28879 15.6312 6.20678 15.5449 6.08932C15.3947 5.88482 15.3875 5.89166 15.3738 6.24949L15.3597 6.62324L15.2479 6.32958C15.1245 6.00549 14.97 5.93864 14.97 6.20913C14.97 6.35105 14.9421 6.35842 14.8157 6.24949C14.6893 6.14057 14.6614 6.14794 14.6614 6.28986C14.6614 6.51464 14.5638 6.50973 14.3931 6.27619C14.2649 6.10096 14.256 6.10256 14.2509 6.30289C14.2457 6.49937 14.2292 6.4951 14.0441 6.24949C13.8592 6.00421 13.8425 5.99983 13.8383 6.1961C13.8341 6.39237 13.8174 6.388 13.6325 6.14271L13.4313 5.87575L13.423 6.1961C13.4156 6.48346 13.4021 6.49628 13.2921 6.32029C13.2247 6.21244 13.1086 6.04425 13.034 5.94654C12.9152 5.79106 12.9059 5.80548 12.9588 6.06262C13.0321 6.41907 12.9556 6.4353 12.7062 6.11601C12.4837 5.83122 12.3316 5.92134 12.4961 6.24031C12.6208 6.48218 12.5133 6.54006 12.3174 6.33674C12.0624 6.07212 12.0762 6.36279 12.3337 6.68027C12.658 7.08039 12.6858 7.26364 12.3979 7.10378C12.2584 7.02625 12.1922 7.02508 12.1922 7.10004C12.1922 7.1608 12.1227 7.21056 12.0378 7.21056C11.8272 7.21056 11.844 7.31329 12.101 7.59734L12.3186 7.83772L12.101 7.77866C11.9094 7.72666 11.8835 7.76521 11.8835 8.10244C11.8835 8.38734 11.8466 8.47053 11.739 8.42771C11.6415 8.38894 11.5722 8.47512 11.5263 8.69189C11.4776 8.9217 11.4135 8.99591 11.3018 8.95149C11.1928 8.90803 11.1518 8.9501 11.1663 9.09106C11.2291 9.70134 11.1958 9.72568 10.5975 9.50987C10.4051 9.44046 10.4034 9.44569 10.5717 9.58964C10.8441 9.82254 10.7889 9.90551 10.4174 9.82201L10.083 9.74672L10.279 9.97364C10.4492 10.1707 10.453 10.2006 10.308 10.2006C10.1985 10.2006 10.1623 10.2583 10.2029 10.3682C10.2552 10.5095 10.2019 10.5251 9.86535 10.4673L9.46574 10.3986L9.72131 10.6125L9.97697 10.8265L9.51554 10.8606C9.11522 10.8902 9.05524 10.9258 9.06193 11.1307C9.07201 11.4384 8.79577 11.5536 8.72467 11.2714C8.68177 11.1011 8.63362 11.0809 8.47703 11.1679C7.99759 11.4343 8.53166 11.6956 9.55536 11.6956C11.0028 11.6956 12.8278 10.9189 13.8337 9.87476C14.1138 9.58409 14.388 9.34627 14.4432 9.34627C14.4983 9.34627 14.5668 9.7668 14.5955 10.2806C14.6242 10.7946 14.6535 11.3017 14.6606 11.4077C14.6676 11.5136 14.7379 11.6259 14.8168 11.6574C14.9308 11.7028 14.9355 11.756 14.839 11.9163C14.7221 12.1105 14.713 12.1091 14.5941 11.8801C14.4864 11.6728 14.4619 11.6652 14.4034 11.8212C14.3082 12.0758 14.3811 12.4718 14.5328 12.5237C14.6036 12.5478 14.6614 12.4888 14.6614 12.3922C14.6614 12.2958 14.7077 12.2466 14.7643 12.2829C14.8208 12.3192 14.8671 12.4633 14.8671 12.6032C14.8671 12.8823 15.0211 13.0437 15.1233 12.8719C15.2043 12.7359 15.3816 12.7298 15.3816 12.863C15.3816 12.9178 15.289 12.9931 15.1758 13.0304C14.9369 13.1091 14.8963 13.4041 15.1244 13.4041C15.2092 13.4041 15.2787 13.4557 15.2787 13.5187C15.2787 13.7844 14.9092 13.5317 14.8037 13.194C14.7405 12.9917 14.6363 12.8082 14.5722 12.7859C14.4198 12.7332 14.4266 12.8282 14.6155 13.3911C14.8112 13.9745 14.7307 14.0963 14.4924 13.5775C14.3946 13.3647 14.2769 13.1906 14.2308 13.1906C14.1199 13.1906 14.125 13.2643 14.2556 13.5447C14.3637 13.7765 14.3632 13.7765 14.162 13.5376C14.0507 13.4054 13.9323 13.2973 13.899 13.2973C13.8656 13.2973 13.8345 13.4054 13.8299 13.5376C13.8228 13.7422 13.7998 13.7263 13.6753 13.4308C13.4633 12.9276 13.3903 13.004 13.4709 13.6444C13.5355 14.1569 13.5284 14.1867 13.3884 13.9914C13.2373 13.7808 13.234 13.7814 13.1418 14.0375C13.0495 14.294 13.0476 14.293 12.9829 13.9574C12.9469 13.7705 12.8642 13.6177 12.7992 13.6177C12.7221 13.6177 12.7028 13.7313 12.7436 13.9434C12.781 14.1371 12.767 14.2438 12.7091 14.2066C12.6555 14.1722 12.5815 13.9771 12.5445 13.773C12.5077 13.5688 12.4396 13.3775 12.3934 13.3479C12.2467 13.2537 12.1784 13.4982 12.2905 13.7158C12.3559 13.8424 12.3606 13.9494 12.3028 13.9865C12.2501 14.0203 12.1774 13.9512 12.1412 13.8329C12.0526 13.5431 11.8839 13.5594 11.882 13.858C11.8806 14.0569 11.8616 14.0707 11.7713 13.9381C11.6891 13.8175 11.6491 13.8109 11.6099 13.9114C11.5317 14.1115 11.3913 14.0723 11.3171 13.8297C11.2367 13.5667 11.0604 13.6543 11.0604 13.9574C11.0604 14.1296 11.0303 14.1518 10.9224 14.0588C10.8464 13.9935 10.7533 13.972 10.7156 14.0113C10.6777 14.0505 10.5793 13.9901 10.4967 13.8769C10.3544 13.6814 10.3466 13.6869 10.3435 13.9851C10.3404 14.2872 10.3342 14.2913 10.1795 14.0919C10.052 13.9276 10.0065 13.9156 9.9599 14.0343C9.91638 14.1452 9.86288 14.1175 9.75351 13.9275C9.67234 13.7865 9.63077 13.7551 9.66122 13.858C9.69157 13.9608 9.69014 14.1162 9.65783 14.2035C9.6104 14.3317 9.56246 14.3164 9.40731 14.1234C9.22253 13.8935 9.21491 13.8926 9.2036 14.0982C9.19465 14.2596 9.15606 14.227 9.04557 13.9647C8.8539 13.5099 8.75688 13.5227 8.84165 13.9914C8.92602 14.4581 8.85431 14.467 8.62477 14.0181C8.47569 13.7267 8.44051 13.7042 8.40522 13.8774C8.36592 14.07 8.34966 14.0665 8.16005 13.824L7.95695 13.5643L8.01508 13.9381C8.0691 14.2856 8.06251 14.2973 7.92064 14.1045C7.83679 13.9905 7.76816 13.8584 7.76816 13.8109C7.76816 13.601 7.56157 13.7495 7.55396 13.9647C7.54686 14.1679 7.52268 14.1507 7.39747 13.8531C7.24891 13.5002 7.01299 13.4636 7.10713 13.808C7.13471 13.9089 7.10353 13.8858 7.03789 13.7568C6.97215 13.6277 6.82122 13.5076 6.70229 13.4899C6.53222 13.4644 6.45866 13.3325 6.35711 12.8702C6.18818 12.1016 6.07212 9.67037 6.16678 8.884C6.23386 8.3269 6.29476 8.20847 6.78346 7.6848C7.08162 7.3653 7.37885 7.10378 7.44398 7.10378C7.5091 7.10378 7.56239 7.05573 7.56239 6.99699C7.56239 6.93826 7.63328 6.89021 7.71991 6.89021C7.80664 6.89021 7.90417 6.81813 7.93669 6.73003C7.9693 6.64193 8.07866 6.56985 8.1797 6.56985C8.28073 6.56985 8.3904 6.49702 8.42322 6.40807C8.45615 6.31912 8.58846 6.1977 8.71716 6.13833C8.95534 6.02866 9.10678 5.91835 10.1668 5.08308C10.7642 4.61226 10.89 4.56826 12.339 4.32202Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M12.339 4.32202C12.6744 4.26499 12.9714 4.19483 12.9992 4.16611C13.1512 4.00817 14.2502 4.24865 15.5873 4.7325C16.4304 5.03748 17.2376 5.70969 17.6004 6.40882C17.7873 6.76911 17.7877 6.79688 17.6128 7.13389C17.4439 7.45959 17.4426 7.51319 17.5955 7.89292C17.7923 8.382 17.7485 8.46049 17.4076 8.22866C17.2268 8.10575 17.1664 7.98636 17.2006 7.81967C17.244 7.60759 17.2348 7.60183 17.1086 7.76072C16.981 7.92122 16.9384 7.90456 16.6379 7.57673C16.4562 7.37854 16.3075 7.14147 16.3075 7.04996C16.3075 6.95844 16.2381 6.85582 16.1532 6.82208C16.0683 6.78823 15.9989 6.64343 15.9989 6.50033C15.9989 6.33022 15.9474 6.25099 15.8503 6.27149C15.7685 6.28879 15.6312 6.20678 15.5449 6.08932C15.3947 5.88482 15.3875 5.89166 15.3738 6.24949L15.3597 6.62324L15.2479 6.32958C15.1245 6.00549 14.97 5.93864 14.97 6.20913C14.97 6.35105 14.9421 6.35842 14.8157 6.24949C14.6893 6.14057 14.6614 6.14794 14.6614 6.28986C14.6614 6.51464 14.5638 6.50973 14.3931 6.27619C14.2649 6.10096 14.256 6.10256 14.2509 6.30289C14.2457 6.49937 14.2292 6.4951 14.0441 6.24949C13.8592 6.00421 13.8425 5.99983 13.8383 6.1961C13.8341 6.39237 13.8174 6.388 13.6325 6.14271L13.4313 5.87575L13.423 6.1961C13.4156 6.48346 13.4021 6.49628 13.2921 6.32029C13.2247 6.21244 13.1086 6.04425 13.034 5.94654C12.9152 5.79106 12.9059 5.80548 12.9588 6.06262C13.0321 6.41907 12.9556 6.4353 12.7062 6.11601C12.4837 5.83122 12.3316 5.92134 12.4961 6.24031C12.6208 6.48218 12.5133 6.54006 12.3174 6.33674C12.0624 6.07212 12.0762 6.36279 12.3337 6.68027C12.658 7.08039 12.6858 7.26364 12.3979 7.10378C12.2584 7.02625 12.1922 7.02508 12.1922 7.10004C12.1922 7.1608 12.1227 7.21056 12.0378 7.21056C11.8272 7.21056 11.844 7.31329 12.101 7.59734L12.3186 7.83772L12.101 7.77866C11.9094 7.72666 11.8835 7.76521 11.8835 8.10244C11.8835 8.38734 11.8466 8.47053 11.739 8.42771C11.6415 8.38894 11.5722 8.47512 11.5263 8.69189C11.4776 8.9217 11.4135 8.99591 11.3018 8.95149C11.1928 8.90803 11.1518 8.9501 11.1663 9.09106C11.2291 9.70134 11.1958 9.72568 10.5975 9.50987C10.4051 9.44046 10.4034 9.44569 10.5717 9.58964C10.8441 9.82254 10.7889 9.90551 10.4174 9.82201L10.083 9.74672L10.279 9.97364C10.4492 10.1707 10.453 10.2006 10.308 10.2006C10.1985 10.2006 10.1623 10.2583 10.2029 10.3682C10.2552 10.5095 10.2019 10.5251 9.86535 10.4673L9.46574 10.3986L9.72131 10.6125L9.97697 10.8265L9.51554 10.8606C9.11522 10.8902 9.05524 10.9258 9.06193 11.1307C9.07201 11.4384 8.79577 11.5536 8.72467 11.2714C8.68177 11.1011 8.63362 11.0809 8.47703 11.1679C7.99759 11.4343 8.53166 11.6956 9.55536 11.6956C11.0028 11.6956 12.8278 10.9189 13.8337 9.87476C14.1138 9.58409 14.388 9.34627 14.4432 9.34627C14.4983 9.34627 14.5668 9.7668 14.5955 10.2806C14.6242 10.7946 14.6535 11.3017 14.6606 11.4077C14.6676 11.5136 14.7379 11.6259 14.8168 11.6574C14.9308 11.7028 14.9355 11.756 14.839 11.9163C14.7221 12.1105 14.713 12.1091 14.5941 11.8801C14.4864 11.6728 14.4619 11.6652 14.4034 11.8212C14.3082 12.0758 14.3811 12.4718 14.5328 12.5237C14.6036 12.5478 14.6614 12.4888 14.6614 12.3922C14.6614 12.2958 14.7077 12.2466 14.7643 12.2829C14.8208 12.3192 14.8671 12.4633 14.8671 12.6032C14.8671 12.8823 15.0211 13.0437 15.1233 12.8719C15.2043 12.7359 15.3816 12.7298 15.3816 12.863C15.3816 12.9178 15.289 12.9931 15.1758 13.0304C14.9369 13.1091 14.8963 13.4041 15.1244 13.4041C15.2092 13.4041 15.2787 13.4557 15.2787 13.5187C15.2787 13.7844 14.9092 13.5317 14.8037 13.194C14.7405 12.9917 14.6363 12.8082 14.5722 12.7859C14.4198 12.7332 14.4266 12.8282 14.6155 13.3911C14.8112 13.9745 14.7307 14.0963 14.4924 13.5775C14.3946 13.3647 14.2769 13.1906 14.2308 13.1906C14.1199 13.1906 14.125 13.2643 14.2556 13.5447C14.3637 13.7765 14.3632 13.7765 14.162 13.5376C14.0507 13.4054 13.9323 13.2973 13.899 13.2973C13.8656 13.2973 13.8345 13.4054 13.8299 13.5376C13.8228 13.7422 13.7998 13.7263 13.6753 13.4308C13.4633 12.9276 13.3903 13.004 13.4709 13.6444C13.5355 14.1569 13.5284 14.1867 13.3884 13.9914C13.2373 13.7808 13.234 13.7814 13.1418 14.0375C13.0495 14.294 13.0476 14.293 12.9829 13.9574C12.9469 13.7705 12.8642 13.6177 12.7992 13.6177C12.7221 13.6177 12.7028 13.7313 12.7436 13.9434C12.781 14.1371 12.767 14.2438 12.7091 14.2066C12.6555 14.1722 12.5815 13.9771 12.5445 13.773C12.5077 13.5688 12.4396 13.3775 12.3934 13.3479C12.2467 13.2537 12.1784 13.4982 12.2905 13.7158C12.3559 13.8424 12.3606 13.9494 12.3028 13.9865C12.2501 14.0203 12.1774 13.9512 12.1412 13.8329C12.0526 13.5431 11.8839 13.5594 11.882 13.858C11.8806 14.0569 11.8616 14.0707 11.7713 13.9381C11.6891 13.8175 11.6491 13.8109 11.6099 13.9114C11.5317 14.1115 11.3913 14.0723 11.3171 13.8297C11.2367 13.5667 11.0604 13.6543 11.0604 13.9574C11.0604 14.1296 11.0303 14.1518 10.9224 14.0588C10.8464 13.9935 10.7533 13.972 10.7156 14.0113C10.6777 14.0505 10.5793 13.9901 10.4967 13.8769C10.3544 13.6814 10.3466 13.6869 10.3435 13.9851C10.3404 14.2872 10.3342 14.2913 10.1795 14.0919C10.052 13.9276 10.0065 13.9156 9.9599 14.0343C9.91638 14.1452 9.86288 14.1175 9.75351 13.9275C9.67234 13.7865 9.63077 13.7551 9.66122 13.858C9.69157 13.9608 9.69014 14.1162 9.65783 14.2035C9.6104 14.3317 9.56246 14.3164 9.40731 14.1234C9.22253 13.8935 9.21491 13.8926 9.2036 14.0982C9.19465 14.2596 9.15606 14.227 9.04557 13.9647C8.8539 13.5099 8.75688 13.5227 8.84165 13.9914C8.92602 14.4581 8.85431 14.467 8.62477 14.0181C8.47569 13.7267 8.44051 13.7042 8.40522 13.8774C8.36592 14.07 8.34966 14.0665 8.16005 13.824L7.95695 13.5643L8.01508 13.9381C8.0691 14.2856 8.06251 14.2973 7.92064 14.1045C7.83679 13.9905 7.76816 13.8584 7.76816 13.8109C7.76816 13.601 7.56157 13.7495 7.55396 13.9647C7.54686 14.1679 7.52268 14.1507 7.39747 13.8531C7.24891 13.5002 7.01299 13.4636 7.10713 13.808C7.13471 13.9089 7.10353 13.8858 7.03789 13.7568C6.97215 13.6277 6.82122 13.5076 6.70229 13.4899C6.53222 13.4644 6.45866 13.3325 6.35711 12.8702C6.18818 12.1016 6.07212 9.67037 6.16678 8.884C6.23386 8.3269 6.29476 8.20847 6.78346 7.6848C7.08162 7.3653 7.37885 7.10378 7.44398 7.10378C7.5091 7.10378 7.56239 7.05573 7.56239 6.99699C7.56239 6.93826 7.63328 6.89021 7.71991 6.89021C7.80664 6.89021 7.90417 6.81813 7.93669 6.73003C7.9693 6.64193 8.07866 6.56985 8.1797 6.56985C8.28073 6.56985 8.3904 6.49702 8.42322 6.40807C8.45615 6.31912 8.58846 6.1977 8.71716 6.13833C8.95534 6.02866 9.10678 5.91835 10.1668 5.08308C10.7642 4.61226 10.89 4.56826 12.339 4.32202Z\"\n        fill=\"white\"\n      />\n    </svg>\n  );\n}\n","export function TelegramIcon({\n  className,\n}: {\n  className?: string;\n}): JSX.Element {\n  return (\n    <svg\n      className={className}\n      width=\"16\"\n      height=\"16\"\n      viewBox=\"0 0 16 16\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M3.60627 7.58732C6.29062 6.4113 8.08061 5.63599 8.97623 5.2614C11.5334 4.19187 12.0648 4.00608 12.4111 3.99994C12.4873 3.99859 12.6576 4.01758 12.7679 4.10759C12.8611 4.1836 12.8867 4.28628 12.899 4.35835C12.9112 4.43041 12.9265 4.59458 12.9144 4.72285C12.7758 6.18696 12.1762 9.73996 11.8711 11.3798C11.7421 12.0737 11.4879 12.3063 11.2419 12.3291C10.7071 12.3786 10.3011 11.9737 9.78316 11.6323C8.97273 11.0981 8.51488 10.7656 7.72822 10.2443C6.81909 9.64189 7.40844 9.31079 7.92655 8.76967C8.06214 8.62805 10.4182 6.47315 10.4638 6.27766C10.4695 6.25321 10.4748 6.16208 10.4209 6.11396C10.3671 6.06584 10.2876 6.08229 10.2303 6.09538C10.149 6.11393 8.85433 6.97442 6.34626 8.67684C5.97877 8.93059 5.6459 9.05423 5.34767 9.04775C5.0189 9.04061 4.38646 8.86082 3.91631 8.70714C3.33965 8.51865 2.88134 8.419 2.92125 8.09888C2.94203 7.93215 3.17037 7.76163 3.60627 7.58732Z\"\n        fill=\"currentColor\"\n      />\n    </svg>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"tlzSeJjSWmqHfc4wPld3\",\"size\":\"Gsl1ujYvmUYqdoiqpzJp\",\"button\":\"U9cstG4QWUwwNG3zFoIA\",\"telegram\":\"ObxXoOt_xt3hpDNz6wSz\"};","import { clsx } from 'clsx';\nimport { TelegramIcon } from './TelegramIcon';\n\nimport styles from './TelegramPromo.module.css';\n\ntype TelegramPromoProps = {\n  className?: string;\n};\n\nexport function TelegramPromo({ className }: TelegramPromoProps): JSX.Element {\n  return (\n    <a\n      href={`https://t.me/${process.env.TELEGRAM_URL}`}\n      target=\"_blank\"\n      className={className}\n    >\n      <button className={clsx(styles.container, styles.button, styles.size)}>\n        <TelegramIcon className={styles.telegram} />\n        <span>Telegram-канал</span>\n      </button>\n    </a>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"QV_NlBU1xIatfZBtzTyg\",\"telegram\":\"xFYlzdCiYTMAOPhJhyfV\"};","import { Logo } from './Logo';\nimport { TelegramPromo } from '@popup/shared/components/TelegramPromo';\n\nimport styles from './Header.module.css';\n\nexport function Header(): JSX.Element {\n  return (\n    <div className={styles.header}>\n      <Logo />\n      <TelegramPromo className={styles.telegram} />\n    </div>\n  );\n}\n","import React, { useRef, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { CSSTransition, SwitchTransition } from 'react-transition-group';\n\nimport styles from './TransitionWrapper.module.css';\n\ntype TransitionWrapperProps = {\n  children: React.ReactNode;\n  header: React.ReactNode;\n};\n\nexport function TransitionWrapper({\n  children,\n  header,\n}: TransitionWrapperProps): JSX.Element {\n  const [isReversed, setIsReversed] = useState(false);\n  const location = useLocation();\n  const ref = useRef(null);\n\n  function handleClick(event: React.MouseEvent<HTMLDivElement>): void {\n    const target = event.target as HTMLElement;\n\n    if (\n      target.closest('[data-close=\"close-icon\"]') ||\n      target.closest('[data-close=\"close-button\"]')\n    ) {\n      setIsReversed(true);\n    } else {\n      setIsReversed(false);\n    }\n  }\n\n  return (\n    <div className={styles.wrapper} onMouseDown={handleClick}>\n      <>{header}</>\n      <SwitchTransition>\n        <CSSTransition\n          className={styles.content}\n          key={location.key}\n          unmountOnExit\n          nodeRef={ref}\n          timeout={350}\n          classNames={{\n            enter: isReversed\n              ? styles['page-enter-reversed']\n              : styles['page-enter'],\n            enterActive: isReversed\n              ? styles['page-enter-active-reversed']\n              : styles['page-enter-active'],\n            exit: isReversed\n              ? styles['page-exit-reversed']\n              : styles['page-exit'],\n            exitActive: isReversed\n              ? styles['page-exit-active-reversed']\n              : styles['page-exit-active'],\n          }}\n        >\n          <div ref={ref}>{children}</div>\n        </CSSTransition>\n      </SwitchTransition>\n    </div>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"hxa1MCGhHERBS3PiOGH4\",\"content\":\"JHATg4MzkPs53I8FskFw\",\"page-enter\":\"PjLWGkfwHcEp2jkda6Gt\",\"page-enter-active\":\"QfaMjlZ5OsAdmOmzZuAG\",\"page-exit\":\"_YUve0uTpVrbG9xYAs3A\",\"page-exit-active\":\"q9RyGWUAlSW_ERz48GkQ\",\"page-enter-reversed\":\"ft6XbCb1pWDv6rQEmMB4\",\"page-enter-active-reversed\":\"lB9Zn8VyDWGRcoAiJnSI\",\"page-exit-reversed\":\"a4y8z9_j6rldXexFi8sQ\",\"page-exit-active-reversed\":\"KCnQfJGNU6UGaUmRgM6f\"};","export enum PremiumActions {\n  InitAdPremiumBanner = 'InitAdPremiumBanner',\n  CloseAdPremiumBanner = 'CloseAdPremiumBanner',\n  OverloadPageReady = 'OverloadPageReady',\n  OverloadTimerReady = 'OverloadTimerReady',\n  PaymentStarted = 'PaymentStarted',\n  PremiumCanceled = 'PremiumCanceled',\n}\n","import { cancelSubscription } from '@api/premium/cancelSubscription';\nimport { type CancelSubscriptionStatus } from '@api/premium/urls';\nimport {\n  getSubscriptionInfo,\n  type PaymentStatus,\n} from '@app/storage/local/premium';\nimport { usePaymentStatus } from '@popup/shared/hooks/usePaymentStatus';\nimport { useState } from 'react';\nimport { PremiumActions } from '@app/actions/premium';\n\ntype CancelPremiumHookValues = {\n  handleCancelPremium: () => Promise<void>;\n  isCancelPremiumLoading: boolean;\n  isCancelPremiumError: boolean;\n  isSuccess: boolean;\n  status?: PaymentStatus;\n  cancelStatus: CancelSubscriptionStatus | undefined;\n  errorMessage: string | null;\n};\n\nexport function useCancelPremium<\n  T extends Record<string, string>,\n>(): CancelPremiumHookValues {\n  const [isCancelPremiumLoading, setIsCancelPremiumLoading] = useState(false);\n  const [isCancelPremiumError, setIsCancelPremiumError] = useState(false);\n  const [isSuccess, setIsSuccess] = useState(false);\n  const [cancelStatus, setCancelStatus] = useState<CancelSubscriptionStatus>();\n  const [errorMessage, setErrorMessage] = useState<string | null>(null);\n\n  const paymentStatus = usePaymentStatus();\n\n  async function handleCancelPremium(): Promise<void> {\n    try {\n      setIsCancelPremiumLoading(true);\n\n      if (paymentStatus === 'Paid') {\n        const { status: cancelStatusResponse } = await cancelSubscription();\n        setCancelStatus(cancelStatusResponse);\n        setIsSuccess(true);\n      }\n\n      await getSubscriptionInfo();\n\n      chrome.runtime.sendMessage({\n        action: PremiumActions.PremiumCanceled,\n      });\n    } catch (error) {\n      console.error(error);\n      setErrorMessage(error instanceof Error ? error.message : null);\n      setIsCancelPremiumError(true);\n    } finally {\n      setIsCancelPremiumLoading(false);\n    }\n  }\n  return {\n    status: paymentStatus,\n    isSuccess,\n    handleCancelPremium,\n    isCancelPremiumLoading,\n    isCancelPremiumError,\n    cancelStatus,\n    errorMessage,\n  };\n}\n","import { httpClient } from '../httpClient';\nimport {\n  type CancelSubscriptionResponse,\n  getCancelSubscriptionApiUrl,\n} from './urls';\nimport {\n  LocalStoragePremiumKey,\n  getLocalStoragePremiumData,\n} from '../../app/storage/local/premium';\nimport {\n  LocalStorageKey,\n  getLocalStorageData,\n} from '../../app/storage/local/shared';\nimport { getSessionMetaApiData } from '../../app/storage/session/metaApiData';\nimport { HTTPError } from 'ky';\n\nexport async function cancelSubscription(): Promise<CancelSubscriptionResponse> {\n  try {\n    const { apiBaseUrl } = await getSessionMetaApiData();\n    const [{ userId }, { deviceId, deviceIp }] = await Promise.all([\n      getLocalStoragePremiumData(LocalStoragePremiumKey.UserId),\n      getLocalStorageData([LocalStorageKey.DeviceId, LocalStorageKey.DeviceIp]),\n    ]);\n\n    const cancelSubscriptionApiUrl = getCancelSubscriptionApiUrl(apiBaseUrl);\n    const data = await httpClient\n      .post<CancelSubscriptionResponse>(cancelSubscriptionApiUrl, {\n        json: {\n          userId,\n          deviceId,\n          deviceIp,\n        },\n      })\n      .json();\n    return data;\n  } catch (error) {\n    if (error instanceof HTTPError) {\n      if (error.response.status === 400) {\n        const errorData = await error.response.json<{\n          errors: { code: string; description: string }[];\n        }>();\n\n        throw new Error(errorData.errors[0]?.description);\n      }\n      if (error.response.status === 500) {\n        throw new Error(\n          'Что-то пошло не так. Мы уже знаем об этом и скоро все починим.',\n        );\n      }\n    }\n    if (error instanceof Error && error.message === 'Failed to fetch') {\n      throw new Error(\n        'Что-то пошло не так. Мы уже знаем об этом и скоро все починим.',\n      );\n    }\n    throw new Error(\n      'Что-то пошло не так. Мы уже знаем об этом и скоро все починим.',\n    );\n  }\n}\n","import { RoutePathType } from '@popup/shared/types/route';\n\nexport const RoutePath: RoutePathType<{\n  CancelPremium: string;\n  Payment: string;\n  Tariffs: string;\n}> = {\n  Root: '/',\n  ChangeDevice: '/change-device',\n  CancelPremium: '/cancel-premium',\n  Payment: '/payment',\n  Tariffs: '/tariffs',\n};\n","import { clsx } from 'clsx';\nimport { type ReactNode } from 'react';\nimport styles from './Loader.module.css';\n\nexport function Loader({\n  className,\n  children,\n}: {\n  className?: string;\n  children?: ReactNode;\n}): JSX.Element {\n  return (\n    <div className={clsx(styles.wrapper, className)}>\n      <svg\n        className={styles.loader}\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n        viewBox=\"0 0 100 100\"\n        enableBackground=\"new 0 0 0 0\"\n        xmlSpace=\"preserve\"\n      >\n        <circle fill=\"currentColor\" stroke=\"none\" cx=\"29\" cy=\"50\" r=\"6\">\n          <animate\n            attributeName=\"opacity\"\n            dur=\"1s\"\n            values=\"0;1;0\"\n            repeatCount=\"indefinite\"\n            begin=\"0.1\"\n          />\n        </circle>\n        <circle fill=\"currentColor\" stroke=\"none\" cx=\"49\" cy=\"50\" r=\"6\">\n          <animate\n            attributeName=\"opacity\"\n            dur=\"1s\"\n            values=\"0;1;0\"\n            repeatCount=\"indefinite\"\n            begin=\"0.2\"\n          />\n        </circle>\n        <circle fill=\"currentColor\" stroke=\"none\" cx=\"69\" cy=\"50\" r=\"6\">\n          <animate\n            attributeName=\"opacity\"\n            dur=\"1s\"\n            values=\"0;1;0\"\n            repeatCount=\"indefinite\"\n            begin=\"0.3\"\n          />\n        </circle>\n      </svg>\n      <div className={styles.info}>{children}</div>\n    </div>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"oT_Zzim0yCAmG0qTUaAO\",\"loader\":\"plCcyD1ePDHqcAiYymGB\",\"info\":\"V14X6Mbsj1mh1qyCBNij\"};","// extracted by mini-css-extract-plugin\nexport default {\"loader-points\":\"m46wmAeBRBK5LlzGMq89\",\"l3\":\"dI3Sz_pPKtwdIbVK66_K\",\"loader-circle\":\"vzNkvWKnEURqu4fpnQNf\",\"spin\":\"UWTvYV42oOLX9De0RSGr\"};","import clsx from 'clsx';\n\nimport styles from './ButtonLoader.module.css';\n\nexport type ButtonLoaderVariant = 'points' | 'circle';\n\ntype ButtonLoaderProps = {\n  variant?: ButtonLoaderVariant;\n  className?: string;\n};\n\nexport function ButtonLoader({\n  variant = 'points',\n  className,\n}: ButtonLoaderProps) {\n  return <div className={clsx(styles[`loader-${variant}`], className)} />;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"common\":\"SQtn8yRGfd6NWpwXiQjY\",\"primary\":\"kJn3vDMkFdJcGSjYNX0Q\",\"primary-n\":\"aK70L5tX1RKD6hjaqtr4\",\"secondary\":\"CxhoeXCtzrL1xxvCfI_c\",\"default\":\"UzgO8rWVkAZQjVsmUoRE\",\"small\":\"KR7OTCTXS7TGm7lmiteG\",\"sharp\":\"_9bWIQAy8dBpFS9k3VEpA\",\"link\":\"ddTauSrCDOAdKGb21DK5\"};","import { clsx } from 'clsx';\nimport { forwardRef, type ButtonHTMLAttributes } from 'react';\nimport {\n  ButtonLoader,\n  ButtonLoaderVariant,\n} from './components/ButtonLoader/ui/ButtonLoader';\n\nimport styles from './Button.module.css';\n\ntype ButtonProps = ButtonHTMLAttributes<HTMLButtonElement> & {\n  variant?: 'primary' | 'primary-n' | 'secondary' | 'link';\n  size?: 'default' | 'small';\n  type?: 'button' | 'submit';\n  sharp?: boolean;\n  loading?: boolean;\n  loaderVariant?: ButtonLoaderVariant;\n  loaderClassName?: string;\n};\n\nexport const Button = forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      variant = 'primary',\n      size = 'default',\n      type = 'button',\n      sharp = false,\n      children,\n      className,\n      loading,\n      loaderVariant,\n      loaderClassName,\n      ...rest\n    },\n    ref,\n  ) => {\n    return (\n      <button\n        ref={ref}\n        className={clsx(\n          styles.common,\n          styles[variant],\n          styles[size],\n          sharp && styles.sharp,\n          className,\n        )}\n        type={type === 'button' ? 'button' : 'submit'}\n        {...rest}\n        data-variant={variant}\n      >\n        {loading && (\n          <ButtonLoader variant={loaderVariant} className={loaderClassName} />\n        )}\n        {children}\n      </button>\n    );\n  },\n);\n\nButton.displayName = 'Button';\n","export function QuestionMarkIcon({\n  className,\n}: {\n  className?: string;\n}): JSX.Element {\n  return (\n    <svg\n      width=\"43\"\n      height=\"84\"\n      viewBox=\"0 0 43 84\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className={className}\n    >\n      <path\n        d=\"M7.80493 46.3007C7.80493 38.4924 12.1767 32.2091 20.9204 27.451L24.7025 25.4379C27.224 24.1365 28.4847 22.1845 28.4847 19.5817V18.2397C28.4847 16.2469 27.956 14.7219 26.8986 13.6645C25.1092 11.8751 23.2181 10.9804 21.2254 10.9804H5.60885C4.18546 10.9804 3.04676 10.5737 2.19273 9.76035C0.81001 8.45897 0.118652 7.05592 0.118652 5.5512C0.118652 4.00581 0.647338 2.70443 1.70471 1.64706C2.80275 0.54902 4.10413 0 5.60885 0H21.3474C28.0576 0 33.3648 1.62672 37.269 4.88017C41.0104 8.09296 42.8812 12.4851 42.8812 18.0566V20.1307C42.8812 26.841 38.6924 32.4938 30.3147 37.0893L27.5086 38.6754C24.9465 40.0988 23.1571 42.0508 22.1404 44.5316C21.7744 45.3856 21.5914 46.2397 21.5914 47.0937V48.7407C21.5914 50.6115 21.1034 52.0349 20.1274 53.0109C18.46 54.6783 16.8943 55.512 15.4302 55.512C14.0068 55.512 12.8681 55.329 12.0141 54.963C11.16 54.597 10.428 54.1089 9.818 53.4989C8.47595 52.1569 7.80493 50.5708 7.80493 48.7407V46.3007ZM14.6372 67.6514C16.8739 67.6514 18.8057 68.4444 20.4324 70.0305C22.0591 71.6979 22.8725 73.3653 22.8725 75.0327C22.8725 76.7001 22.6488 78.0218 22.2014 78.9978C21.7541 79.9739 21.1644 80.8482 20.4324 81.6209C18.8057 83.207 16.8739 84 14.6372 84C12.4004 84 10.4687 83.207 8.84196 81.6209C7.21524 79.9535 6.40188 78.2861 6.40188 76.6187C6.40188 73.894 7.21524 71.7182 8.84196 70.0915C10.4687 68.4648 12.4004 67.6514 14.6372 67.6514Z\"\n        fill=\"#5F2E99\"\n      />\n    </svg>\n  );\n}\n","import clsx from 'clsx';\nimport { type ReactNode } from 'react';\n\ntype LoaderProps = {\n  className?: string;\n  size?: number;\n  children?: ReactNode;\n};\n\nexport function Loader({\n  className,\n  size = 80,\n  children,\n}: LoaderProps): JSX.Element {\n  if (children) {\n    return (\n      <div className={clsx('current-wrapper', className)}>\n        <svg\n          className=\"current-loader\"\n          version=\"1.1\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n          viewBox=\"0 0 100 100\"\n          enableBackground=\"new 0 0 0 0\"\n          xmlSpace=\"preserve\"\n        >\n          <circle fill=\"currentColor\" stroke=\"none\" cx=\"29\" cy=\"50\" r=\"6\">\n            <animate\n              attributeName=\"opacity\"\n              dur=\"1s\"\n              values=\"0;1;0\"\n              repeatCount=\"indefinite\"\n              begin=\"0.1\"\n            />\n          </circle>\n          <circle fill=\"currentColor\" stroke=\"none\" cx=\"49\" cy=\"50\" r=\"6\">\n            <animate\n              attributeName=\"opacity\"\n              dur=\"1s\"\n              values=\"0;1;0\"\n              repeatCount=\"indefinite\"\n              begin=\"0.2\"\n            />\n          </circle>\n          <circle fill=\"currentColor\" stroke=\"none\" cx=\"69\" cy=\"50\" r=\"6\">\n            <animate\n              attributeName=\"opacity\"\n              dur=\"1s\"\n              values=\"0;1;0\"\n              repeatCount=\"indefinite\"\n              begin=\"0.3\"\n            />\n          </circle>\n        </svg>\n        <div className=\"current-info\">{children}</div>\n      </div>\n    );\n  }\n\n  return (\n    <svg\n      className={clsx('animated-loader', className)}\n      width={size}\n      height={size}\n      viewBox=\"0 0 128 129\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M70 16.5V32.5C70 34.0913 69.3679 35.6174 68.2426 36.7426C67.1174 37.8679 65.5913 38.5 64 38.5C62.4087 38.5 60.8826 37.8679 59.7574 36.7426C58.6321 35.6174 58 34.0913 58 32.5V16.5C58 14.9087 58.6321 13.3826 59.7574 12.2574C60.8826 11.1321 62.4087 10.5 64 10.5C65.5913 10.5 67.1174 11.1321 68.2426 12.2574C69.3679 13.3826 70 14.9087 70 16.5Z\"\n        fill=\"currentcolor\"\n        className=\"loader-part loader-part-1\"\n      />\n      <path\n        d=\"M30.0495 24.5547C31.6435 24.5547 33.1723 25.1879 34.2995 26.3151L45.6295 37.6151C46.7566 38.7423 47.3899 40.271 47.3899 41.8651C47.3899 43.4592 46.7566 44.9879 45.6295 46.1151C44.5023 47.2423 42.9735 47.8755 41.3795 47.8755C39.7854 47.8755 38.2566 47.2423 37.1295 46.1151L25.7995 34.8151C24.6723 33.6879 24.0391 32.1592 24.0391 30.5651C24.0391 28.971 24.6723 27.4423 25.7995 26.3151C26.9266 25.1879 28.4554 24.5547 30.0495 24.5547Z\"\n        fill=\"currentcolor\"\n        className=\"loader-part loader-part-2\"\n      />\n      <path\n        d=\"M81 41.3402C81 39.7461 81.6332 38.2173 82.7604 37.0902L94.0604 25.7602C95.1876 24.633 96.7163 23.9998 98.3104 23.9998C99.9045 23.9998 101.433 24.633 102.56 25.7602C103.688 26.8873 104.321 28.4161 104.321 30.0102C104.321 31.6042 103.688 33.133 102.56 34.2602L91.2604 45.5902C90.1332 46.7173 88.6045 47.3506 87.0104 47.3506C85.4163 47.3506 83.8876 46.7173 82.7604 45.5902C81.6332 44.463 81 42.9342 81 41.3402Z\"\n        fill=\"currentcolor\"\n        className=\"loader-part loader-part-8\"\n      />\n      <path\n        d=\"M36.2426 60.2574C37.3679 61.3826 38 62.9087 38 64.5C38 66.0913 37.3679 67.6174 36.2426 68.7426C35.1174 69.8679 33.5913 70.5 32 70.5H16C14.4087 70.5 12.8826 69.8679 11.7574 68.7426C10.6321 67.6174 10 66.0913 10 64.5C10 62.9087 10.6321 61.3826 11.7574 60.2574C12.8826 59.1321 14.4087 58.5 16 58.5H32C33.5913 58.5 35.1174 59.1321 36.2426 60.2574Z\"\n        fill=\"currentcolor\"\n        className=\"loader-part loader-part-3\"\n      />\n      <path\n        d=\"M25.8151 94.1999L37.1301 82.8849C38.2573 81.7578 39.786 81.1245 41.3801 81.1245C42.9742 81.1245 44.5029 81.7578 45.6301 82.8849C46.7573 84.0121 47.3905 85.5409 47.3905 87.1349C47.3905 88.729 46.7573 90.2578 45.6301 91.3849L34.3151 102.7C33.1879 103.827 31.6592 104.46 30.0651 104.46C28.471 104.46 26.9423 103.827 25.8151 102.7C24.6879 101.573 24.0547 100.044 24.0547 98.4499C24.0547 96.8559 24.6879 95.3271 25.8151 94.1999Z\"\n        fill=\"currentcolor\"\n        className=\"loader-part loader-part-4\"\n      />\n      <path\n        d=\"M59.7574 92.2574C60.8826 91.1321 62.4087 90.5 64 90.5C65.5913 90.5 67.1174 91.1321 68.2426 92.2574C69.3679 93.3826 70 94.9087 70 96.5V112.5C70 114.091 69.3679 115.617 68.2426 116.743C67.1174 117.868 65.5913 118.5 64 118.5C62.4087 118.5 60.8826 117.868 59.7574 116.743C58.6321 115.617 58 114.091 58 112.5V96.5C58 94.9087 58.6321 93.3826 59.7574 92.2574Z\"\n        fill=\"currentcolor\"\n        className=\"loader-part loader-part-5\"\n      />\n      <path\n        d=\"M88.9199 81.582C89.6491 81.8841 90.3117 82.3268 90.8698 82.8849L102.185 94.1999C103.312 95.3271 103.945 96.8559 103.945 98.4499C103.945 100.044 103.312 101.573 102.185 102.7C101.058 103.827 99.5288 104.46 97.9348 104.46C96.3407 104.46 94.812 103.827 93.6848 102.7L82.3698 91.3849C81.8117 90.8268 81.3689 90.1642 81.0669 89.435C80.7648 88.7058 80.6094 87.9242 80.6094 87.1349C80.6094 86.3456 80.7648 85.5641 81.0669 84.8348C81.3689 84.1056 81.8117 83.443 82.3698 82.8849C82.9279 82.3268 83.5905 81.8841 84.3197 81.582C85.0489 81.28 85.8305 81.1245 86.6198 81.1245C87.4091 81.1245 88.1906 81.28 88.9199 81.582Z\"\n        fill=\"currentcolor\"\n        className=\"loader-part loader-part-6\"\n      />\n      <path\n        d=\"M96 58.5H112C113.591 58.5 115.117 59.1321 116.243 60.2574C117.368 61.3826 118 62.9087 118 64.5C118 66.0913 117.368 67.6174 116.243 68.7426C115.117 69.8679 113.591 70.5 112 70.5H96C94.4087 70.5 92.8826 69.8679 91.7574 68.7426C90.6321 67.6174 90 66.0913 90 64.5C90 62.9087 90.6321 61.3826 91.7574 60.2574C92.8826 59.1321 94.4087 58.5 96 58.5Z\"\n        fill=\"currentcolor\"\n        className=\"loader-part loader-part-7\"\n      />\n    </svg>\n  );\n}\n","import { httpClient } from '@api/httpClient';\nimport { getChangeDeviceApiUrl } from '@api/premium/urls';\nimport {\n  getLocalStorageData,\n  LocalStorageKey,\n} from '@app/storage/local/shared';\nimport { getSessionMetaApiData } from '@app/storage/session/metaApiData';\n\nexport async function changeDevice(userId: string): Promise<void> {\n  const { apiBaseUrl } = await getSessionMetaApiData();\n  const { deviceId, deviceIp } = await getLocalStorageData([\n    LocalStorageKey.DeviceId,\n    LocalStorageKey.DeviceIp,\n  ]);\n  const changeDeviceApiUrl = getChangeDeviceApiUrl(apiBaseUrl);\n  await httpClient\n    .post(changeDeviceApiUrl, {\n      json: {\n        userId,\n        deviceId,\n        deviceIp,\n      },\n    })\n    .json();\n}\n","export async function wait(ms: number): Promise<void> {\n  await new Promise((resolve) => {\n    setTimeout(resolve, ms);\n  });\n}\n","export enum BaseRoutePath {\n  Root = '/',\n  ChangeDevice = '/change-device',\n}\n","import { IconTypeProps } from './types/IconTypeProps';\n\nexport const Prohibited = ({ className }: IconTypeProps) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 25.801 25.459\"\n    className={className}\n    fill=\"none\"\n  >\n    <path d=\"m20.518 21.68 1.142-1.143L4.932 3.81 3.789 4.95Zm-7.803 3.76c7.021 0 12.724-5.694 12.724-12.715C25.44 5.703 19.736 0 12.715 0 5.693 0 0 5.703 0 12.725c0 7.021 5.693 12.714 12.715 12.714Zm0-1.817A10.89 10.89 0 0 1 1.816 12.725 10.89 10.89 0 0 1 12.715 1.826a10.89 10.89 0 0 1 10.898 10.899 10.89 10.89 0 0 1-10.898 10.898Z\" />\n  </svg>\n);\n","import { clsx } from 'clsx';\nimport { type ReactNode } from 'react';\nimport styles from './Loader.module.css';\n\nexport function Loader({\n  className,\n  children,\n}: {\n  className?: string;\n  children?: ReactNode;\n}): JSX.Element {\n  return (\n    <div className={clsx(styles.wrapper, className)}>\n      <svg\n        className={styles.loader}\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n        viewBox=\"0 0 100 100\"\n        enableBackground=\"new 0 0 0 0\"\n        xmlSpace=\"preserve\"\n      >\n        <circle fill=\"currentColor\" stroke=\"none\" cx=\"29\" cy=\"50\" r=\"6\">\n          <animate\n            attributeName=\"opacity\"\n            dur=\"1s\"\n            values=\"0;1;0\"\n            repeatCount=\"indefinite\"\n            begin=\"0.1\"\n          />\n        </circle>\n        <circle fill=\"currentColor\" stroke=\"none\" cx=\"49\" cy=\"50\" r=\"6\">\n          <animate\n            attributeName=\"opacity\"\n            dur=\"1s\"\n            values=\"0;1;0\"\n            repeatCount=\"indefinite\"\n            begin=\"0.2\"\n          />\n        </circle>\n        <circle fill=\"currentColor\" stroke=\"none\" cx=\"69\" cy=\"50\" r=\"6\">\n          <animate\n            attributeName=\"opacity\"\n            dur=\"1s\"\n            values=\"0;1;0\"\n            repeatCount=\"indefinite\"\n            begin=\"0.3\"\n          />\n        </circle>\n      </svg>\n      <div className={styles.info}>{children}</div>\n    </div>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"zcX6bagQZfSeZOoGpoNK\",\"loader\":\"sLbb4mRCbry0QLTKxlbI\",\"info\":\"PPXXaTMMYM5MFZcyRzcO\"};","import { Actions } from '@app/actions/shared';\nimport {\n  CreateNewUserMessage,\n  CreateNewUserSuccessMessage,\n} from '@app/messages/shared';\nimport {\n  LocalStoragePremiumKey,\n  deleteLocalStoragePremiumData,\n} from '@app/storage/local/premium';\nimport { useCallback, useEffect, useState } from 'react';\n\nexport function useHandlePremiumWithoutTelegram() {\n  const [loading, setLoading] = useState(false);\n  const [isSuccess, setSuccess] = useState(false);\n\n  const handleClick = useCallback(\n    async (\n      isSaleActive: boolean = false,\n      isGuestMode: boolean = false,\n      isTrial: boolean = false,\n    ) => {\n      setLoading(true);\n      await deleteLocalStoragePremiumData(LocalStoragePremiumKey.UserId);\n\n      chrome.runtime.sendMessage<CreateNewUserMessage>({\n        action: Actions.CreateNewUser,\n        payload: {\n          isSaleActive,\n          isGuestMode,\n          isTrial,\n        },\n      });\n    },\n    [],\n  );\n\n  useEffect(() => {\n    const listener = (message: CreateNewUserSuccessMessage) => {\n      if (message.action === Actions.CreateNewUserSuccess) {\n        setLoading(false);\n        setSuccess(true);\n      }\n    };\n\n    chrome.runtime.onMessage.addListener(listener);\n\n    return () => {\n      chrome.runtime.onMessage.removeListener(listener);\n    };\n  }, []);\n\n  return { handleClick, loading, isSuccess };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"fcG3HJNV8HVMDlPT7xlG\",\"content\":\"v4yboCQ60GBdFgOkhtc8\",\"title\":\"pmv8g7IT08joGcZDsuIL\",\"description\":\"HAnv75PrP63jsoW2pipr\",\"buttons\":\"TLfSZHmwRb_J1RxCTqH3\",\"link\":\"b2HqfY7NW4tIr0aqbvm9\",\"loader\":\"S7C1hcOQBMjJbDUbFPvd\",\"error\":\"zx_QxwE0rDP1Wa6h4HkM\",\"icon\":\"uecEEEFOG3vIOtEqRMy_\"};","import { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport {\n  LocalStoragePremiumKey,\n  getLocalStoragePremiumData,\n} from '@app/storage/local/premium';\nimport { RoutePath } from '../routes/types/RoutePath';\n\nexport function useChangeDevice(): void {\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    async function handleDeviceChangeError(): Promise<void> {\n      const { isChangeDeviceError, userId } = await getLocalStoragePremiumData([\n        LocalStoragePremiumKey.IsChangeDeviceError,\n        LocalStoragePremiumKey.UserId,\n      ]);\n      if (isChangeDeviceError) {\n        navigate(RoutePath.ChangeDevice, {\n          state: { userId },\n        });\n      }\n    }\n    void handleDeviceChangeError();\n  }, [navigate]);\n\n  useEffect(() => {\n    async function listener(changes: {\n      isChangeDeviceError?: { newValue?: boolean };\n    }): Promise<void> {\n      if (changes.isChangeDeviceError?.newValue) {\n        const { userId } = await getLocalStoragePremiumData([\n          LocalStoragePremiumKey.UserId,\n        ]);\n\n        navigate(RoutePath.ChangeDevice, {\n          state: { userId },\n        });\n      }\n    }\n    chrome.storage.onChanged.addListener(listener);\n    return () => {\n      chrome.storage.onChanged.removeListener(listener);\n    };\n  }, [navigate]);\n}\n","import { useLayoutEffect } from 'react';\n\nexport function usePremiumAnimation(\n  { isFreeUser } = { isFreeUser: true },\n): void {\n  useLayoutEffect(() => {\n    if (isFreeUser) {\n      document.body.classList.add('background-transition');\n    }\n    return () => {\n      if (isFreeUser) {\n        document.body.classList.remove('background-transition');\n      }\n    };\n  }, [isFreeUser]);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"GCHA1QSidtG6PPSyHchA\",\"container\":\"avwLMBus3NHm9zShILmO\",\"title\":\"FtseVrIoeh1jnAaY3fL9\",\"guarantee\":\"fPEK4i_IQWCETqiMEgBQ\",\"methods\":\"CnfbbwhqHZZR9d7tRvhN\",\"agreement\":\"vi1rY7NpD4m52mYwvGAc\",\"link\":\"bmAA_tBszyPiuhTB40PI\",\"instructions\":\"XMo891ik7tpYtmj3j8e5\",\"buttons\":\"MVnNtFc7MWrBhCzPEQXd\",\"button\":\"WHsPHDO2PTyyjIL41E93\",\"loader\":\"LjjRsO6jBhGeu2miPADu\"};","import { createNewPaymentLink } from '@api/premium/createNewPaymentLink';\nimport { getCreateNewPaymentLinkUrl } from '@api/premium/urls';\nimport { getSessionMetaApiData } from '@app/storage/session/metaApiData';\nimport {\n  getLocalStoragePremiumData,\n  LocalStoragePremiumKey,\n} from '@app/storage/local/premium';\nimport { PaymentMethod } from '@app/storage/session/shared';\nimport { Tariff } from '@api/premium/types/Tariff';\n\nexport function useNewPaymentLink() {\n  async function getNewPaymentLink(\n    paymentMethod: PaymentMethod,\n    tariffName: Tariff,\n  ) {\n    const { apiBaseUrl } = await getSessionMetaApiData();\n    const { userId } = await getLocalStoragePremiumData([\n      LocalStoragePremiumKey.UserId,\n    ]);\n    const url = getCreateNewPaymentLinkUrl(apiBaseUrl);\n    const data = await createNewPaymentLink({\n      url,\n      userId,\n      tariffName,\n      paymentMethod,\n    });\n\n    return data;\n  }\n  return getNewPaymentLink;\n}\n","import { PaymentMethod } from '../../app/storage/session/shared';\nimport { httpClient } from '../httpClient';\n\ntype CreateNewPaymentLinkDto = {\n  url: string;\n  tariffName: string;\n  paymentMethod: PaymentMethod;\n  userId?: string;\n};\n\ntype CreateNewPaymentLinkResponse = {\n  paymentLink: string;\n};\n\nexport async function createNewPaymentLink({\n  url,\n  userId,\n  tariffName,\n  paymentMethod,\n}: CreateNewPaymentLinkDto): Promise<CreateNewPaymentLinkResponse> {\n  const data = await httpClient\n    .post<CreateNewPaymentLinkResponse>(url, {\n      json: {\n        userId,\n        tariff: tariffName,\n        paymentMethod,\n      },\n    })\n    .json();\n  return data;\n}\n","export enum Tariff {\n  DefaultOneMonth = 'default_1m',\n  DefaultThreeMonth = 'default_3m',\n  DefaultSixMonth = 'default_6m',\n  DefaultOneYear = 'default_1y',\n  Discount = 'discount',\n  FreeTrial = 'free_trial',\n  DefaultOneMonthOneX = 'default_1m_1x',\n  DefaultThreeMonthOneX = 'default_3m_1x',\n  DefaultSixMonthOneX = 'default_6m_1x',\n  DefaultOneYearOneX = 'default_1y_1x',\n  DefaultOneMonthFiveX = 'default_1m_5x',\n  DefaultThreeMonthFiveX = 'default_3m_5x',\n  DefaultSixMonthFiveX = 'default_6m_5x',\n  DefaultOneYearFiveX = 'default_1y_5x',\n  DefaultOneMonthTenX = 'default_1m_10x',\n  DefaultThreeMonthTenX = 'default_3m_10x',\n  DefaultSixMonthTenX = 'default_6m_10x',\n  DefaultOneYearTenX = 'default_1y_10x',\n}\n\nexport enum TariffType {\n  Base = 'base',\n  LimitedDevices = 'limited_devices',\n}\n","import { useCallback, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { PaymentMethod } from '@app/storage/session/shared';\nimport { usePaymentMethods } from './usePaymentMethods';\nimport { usePublicOfferUrl } from './usePublicOfferUrl';\nimport { useNewPaymentLink } from './useNewPaymentLink';\nimport { Tariff } from '@api/premium/types/Tariff';\n\nexport function usePaymentScreen() {\n  const [selectedPaymentMethod, setSelectedPaymentMethod] =\n    useState<PaymentMethod | null>(PaymentMethod.Sbp);\n\n  const [error, setError] = useState<string | null>(null);\n  const [loading, setLoading] = useState(false);\n\n  const location = useLocation();\n  const selectedTariff = location.state?.selectedTariff as Tariff;\n  const hasOneMonthDiscount = location.state?.hasOneMonthDiscount as boolean;\n\n  const availablePaymentMethods = usePaymentMethods();\n  const publicOfferUrl = usePublicOfferUrl();\n  const getPaymentLink = useNewPaymentLink();\n\n  const handlePaymentClick = useCallback(async () => {\n    try {\n      if (!selectedTariff || !selectedPaymentMethod || loading) {\n        return;\n      }\n\n      // TODO We need to rewrite this part of the code after backend implementation\n      const tariff =\n        selectedTariff === Tariff.DefaultOneMonth && hasOneMonthDiscount\n          ? Tariff.Discount\n          : selectedTariff;\n\n      setLoading(true);\n\n      const { paymentLink } = await getPaymentLink(\n        selectedPaymentMethod,\n        tariff,\n      );\n\n      window.open(paymentLink, '_blank');\n    } catch (error) {\n      setError((error as Error)?.message || 'Ошибка при оплате');\n      console.error(error);\n    } finally {\n      setLoading(false);\n    }\n  }, [\n    getPaymentLink,\n    hasOneMonthDiscount,\n    loading,\n    selectedPaymentMethod,\n    selectedTariff,\n  ]);\n\n  return {\n    loading,\n    error,\n    selectedPaymentMethod,\n    setSelectedPaymentMethod,\n    availablePaymentMethods,\n    publicOfferUrl,\n    onPaymentClick: handlePaymentClick,\n  };\n}\n","import { useEffect, useState } from 'react';\nimport { PaymentMethods } from '../types/PaymentMethods';\nimport { PaymentMethod } from '@app/storage/session/shared';\n\nexport function usePaymentMethods() {\n  const [paymentMethods, setPaymentMethods] = useState<PaymentMethods>([]);\n\n  useEffect(() => {\n    const getMethodsMockData = async () => {\n      const data = {\n        availablePaymentMethods: [PaymentMethod.Card, PaymentMethod.Sbp],\n      };\n\n      if (!data.availablePaymentMethods) {\n        return;\n      }\n      setPaymentMethods(data.availablePaymentMethods);\n    };\n    getMethodsMockData();\n  }, []);\n\n  return paymentMethods;\n}\n","import { useEffect, useState } from 'react';\nimport { getSessionMetaApiData } from '@app/storage/session/metaApiData';\n\nexport function usePublicOfferUrl() {\n  const [publicOfferUrl, setPublicOfferUrl] = useState<string | null>(null);\n\n  useEffect(() => {\n    const getMetaData = async () => {\n      const data = await getSessionMetaApiData();\n      if (!data.publicOfferUrl) {\n        return;\n      }\n      setPublicOfferUrl(data.publicOfferUrl);\n    };\n    getMetaData();\n  }, []);\n\n  return publicOfferUrl;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"payment-method-item\":\"CtXkKcDn_KdtxiFjhAhc\",\"active\":\"kZuKNnq6rCVFo932BDbk\"};","export const SBPIcon = (): JSX.Element => {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width={83} height={42} fill=\"none\">\n      <path\n        fill=\"#212121\"\n        d=\"M71.771 11.989v10.268h-3.638v-7.203H64.63v7.203h-3.638V11.988h10.78v.001Z\"\n      />\n      <path\n        fill=\"#212121\"\n        fillRule=\"evenodd\"\n        d=\"M53.52 22.624c3.257 0 5.675-2.012 5.675-5.063 0-2.953-1.784-4.87-4.766-4.87-1.377 0-2.512.488-3.368 1.33.205-1.741 1.666-3.012 3.274-3.012l3.166-.006 1.58-3.048s-3.508.08-5.14.08c-3.726.066-6.244 3.48-6.244 7.627 0 4.83 2.456 6.962 5.823 6.962Zm.02-7.234c1.209 0 2.047.801 2.047 2.17 0 1.233-.745 2.248-2.047 2.25-1.246 0-2.085-.94-2.085-2.229 0-1.37.839-2.19 2.085-2.19Z\"\n        clipRule=\"evenodd\"\n      />\n      <path\n        fill=\"#212121\"\n        d=\"M44.736 18.82s-.86.499-2.142.593c-1.476.044-2.79-.895-2.79-2.563 0-1.628 1.16-2.56 2.752-2.56.977 0 2.269.682 2.269.682s.945-1.749 1.435-2.623c-.897-.685-2.091-1.06-3.48-1.06-3.506 0-6.221 2.303-6.221 5.54 0 3.278 2.552 5.528 6.22 5.46 1.026-.038 2.441-.401 3.303-.96l-1.346-2.51Z\"\n      />\n      <path\n        fill=\"#5B57A2\"\n        d=\"m0 9.142 5.047 9.091v5.546L.006 32.852 0 9.142Z\"\n      />\n      <path\n        fill=\"#D90751\"\n        d=\"m19.377 14.925 4.729-2.921 9.678-.01-14.407 8.896v-5.965Z\"\n      />\n      <path\n        fill=\"#FAB718\"\n        d=\"m19.35 9.088.027 12.037-5.059-3.133V0l5.032 9.088Z\"\n      />\n      <path\n        fill=\"#ED6F26\"\n        d=\"m33.784 11.995-9.679.009-4.755-2.916L14.318 0l19.466 11.995Z\"\n      />\n      <path\n        fill=\"#63B22F\"\n        d=\"M19.377 32.903v-5.84l-5.059-3.073.003 18.01 5.056-9.097Z\"\n      />\n      <path\n        fill=\"#1487C9\"\n        d=\"M24.094 30.008 5.046 18.233 0 9.143l33.764 20.853-9.67.012Z\"\n      />\n      <path\n        fill=\"#017F36\"\n        d=\"m14.322 42 5.055-9.097 4.717-2.895 9.67-.012L14.322 42Z\"\n      />\n      <path\n        fill=\"#984995\"\n        d=\"M.006 32.852 14.36 23.99l-4.826-2.984-4.487 2.773-5.041 9.073Z\"\n      />\n      <path\n        fill=\"#212121\"\n        d=\"M39.806 29.168c-.111.143-.258.25-.433.323-.18.074-.372.112-.567.111a1.596 1.596 0 0 1-.567-.096 1.24 1.24 0 0 1-.724-.702 1.473 1.473 0 0 1-.103-.556c0-.19.032-.364.1-.53.064-.166.157-.309.274-.428a1.309 1.309 0 0 1 .944-.396c.208 0 .4.026.576.078.175.053.324.14.447.263l-.213.364a1 1 0 0 0-.357-.21 1.245 1.245 0 0 0-.389-.061.898.898 0 0 0-.622.253.93.93 0 0 0-.269.67.925.925 0 0 0 .278.672.824.824 0 0 0 .298.184 1 1 0 0 0 .362.064.942.942 0 0 0 .424-.093c.121-.06.23-.141.322-.242l.219.332Zm.602.373v-2.592h.461v1.931l1.502-1.931h.462v2.592h-.462v-1.93l-1.502 1.93h-.462Zm5.485-.373a1.046 1.046 0 0 1-.433.323c-.18.074-.372.112-.567.111a1.596 1.596 0 0 1-.566-.096 1.237 1.237 0 0 1-.725-.702 1.471 1.471 0 0 1-.103-.556c0-.19.033-.364.1-.53.064-.166.158-.309.274-.428.117-.123.258-.216.415-.288.167-.074.347-.111.53-.108.207 0 .4.026.575.078.175.053.324.14.447.263l-.213.364a.997.997 0 0 0-.357-.21 1.248 1.248 0 0 0-.388-.061.9.9 0 0 0-.623.253.931.931 0 0 0-.269.67.927.927 0 0 0 .278.672.824.824 0 0 0 .298.184c.114.04.234.064.362.064a.95.95 0 0 0 .424-.093c.122-.06.23-.141.322-.242l.219.332Zm.237-2.219h2.37v.46h-.953v2.132h-.462v-2.132h-.953v-.46h-.002Z\"\n      />\n      <path\n        fill=\"#212121\"\n        fillRule=\"evenodd\"\n        d=\"M50.655 29.515a1.2 1.2 0 0 0 .453-.257l-.14-.36a1.08 1.08 0 0 1-.336.192 1.29 1.29 0 0 1-.462.078c-.254 0-.465-.067-.631-.204-.166-.137-.257-.329-.278-.574h2c.02-.09.028-.192.028-.311a1.18 1.18 0 0 0-.353-.86 1.145 1.145 0 0 0-.386-.24 1.462 1.462 0 0 0-1.043.02c-.157.066-.3.164-.418.288a1.218 1.218 0 0 0-.26.428c-.062.17-.093.35-.09.53 0 .204.034.39.099.556a1.206 1.206 0 0 0 .719.702 1.737 1.737 0 0 0 1.099.012Zm-1.169-1.995c.144-.131.333-.195.573-.195.225 0 .406.06.538.183s.201.292.213.507h-1.578a.794.794 0 0 1 .254-.495Z\"\n        clipRule=\"evenodd\"\n      />\n      <path\n        fill=\"#212121\"\n        d=\"M51.918 26.949h.42l1 1.284.947-1.284h.41v2.592h-.462v-1.89l-.9 1.202h-.018l-.935-1.203v1.89h-.462V26.95Z\"\n      />\n      <path\n        fill=\"#212121\"\n        fillRule=\"evenodd\"\n        d=\"M55.95 26.958c-.14.037-.273.094-.397.171l.123.368c.105-.053.21-.096.316-.134.105-.038.24-.056.4-.056.129 0 .231.02.31.061a.41.41 0 0 1 .178.167c.041.07.067.157.082.259.014.101.02.212.02.332a.788.788 0 0 0-.315-.132 1.8 1.8 0 0 0-.333-.035c-.138 0-.266.021-.39.056a.854.854 0 0 0-.312.157.748.748 0 0 0-.204.26.81.81 0 0 0-.076.352c0 .253.073.451.219.591.146.14.339.21.578.21.217 0 .39-.038.52-.114.132-.076.237-.163.313-.262v.335h.433v-1.59c0-.338-.073-.6-.222-.784-.146-.183-.406-.276-.774-.276-.164 0-.32.023-.468.064Zm.773 2.1a.69.69 0 0 1-.413.11.508.508 0 0 1-.347-.11.386.386 0 0 1-.123-.298c0-.072.014-.134.047-.189a.428.428 0 0 1 .126-.134.554.554 0 0 1 .178-.079.804.804 0 0 1 .204-.026.97.97 0 0 1 .585.172v.329a1.335 1.335 0 0 1-.257.225Zm4.769-3.02a.712.712 0 0 0 .263-.225l-.252-.364a.506.506 0 0 1-.219.18 1.38 1.38 0 0 1-.269.076l-.087.016-.246.043c-.14.026-.278.07-.409.128-.207.09-.374.212-.5.367a1.727 1.727 0 0 0-.292.521 2.747 2.747 0 0 0-.137.603c-.024.21-.035.41-.035.603 0 .247.032.471.096.672.065.202.155.37.275.507.12.14.263.245.432.32.17.076.36.114.573.114.196 0 .377-.038.54-.108a1.306 1.306 0 0 0 .796-1.223c0-.195-.03-.372-.085-.53a1.147 1.147 0 0 0-.24-.404 1.067 1.067 0 0 0-.383-.263 1.32 1.32 0 0 0-.827-.05 1.243 1.243 0 0 0-.534.315.856.856 0 0 0-.17.248h-.012a2.83 2.83 0 0 1 .05-.367c.026-.125.064-.245.114-.358a1.25 1.25 0 0 1 .193-.309.874.874 0 0 1 .304-.218c.127-.062.262-.105.4-.131l.092-.017.262-.05a1.41 1.41 0 0 0 .307-.097Zm-1.625 2.49a1.463 1.463 0 0 1-.064-.455.736.736 0 0 1 .105-.247.867.867 0 0 1 .19-.21.958.958 0 0 1 .602-.207c.272 0 .476.085.62.25a.939.939 0 0 1 .213.633.94.94 0 0 1-.064.343.826.826 0 0 1-.793.533.796.796 0 0 1-.63-.297c-.08-.103-.14-.22-.179-.343Zm5.696-1.579H65.1v2.592h.462V26.95Zm-2.876 0h.462v.778h.427c.201 0 .365.026.496.075a.85.85 0 0 1 .316.198.693.693 0 0 1 .166.286c.032.107.05.218.05.335 0 .116-.017.227-.055.338a.766.766 0 0 1-.179.294.857.857 0 0 1-.333.21c-.14.052-.31.08-.514.08h-.839V26.95h.003Zm.462 1.211v.95h.336c.23 0 .394-.04.488-.123.094-.081.14-.197.14-.352 0-.157-.05-.276-.143-.358-.096-.082-.257-.123-.48-.123h-.341v.006Z\"\n        clipRule=\"evenodd\"\n      />\n      <path\n        fill=\"#212121\"\n        d=\"M68.616 29.168c-.11.143-.257.25-.433.323-.18.074-.372.112-.566.111a1.594 1.594 0 0 1-.567-.096 1.254 1.254 0 0 1-.439-.274 1.246 1.246 0 0 1-.286-.428 1.478 1.478 0 0 1-.102-.556 1.387 1.387 0 0 1 .374-.958c.117-.123.257-.216.415-.288.166-.074.347-.111.529-.108.207 0 .4.026.576.078.175.053.324.14.446.263l-.213.364a1 1 0 0 0-.356-.21 1.245 1.245 0 0 0-.39-.061.897.897 0 0 0-.622.253.931.931 0 0 0-.269.67.925.925 0 0 0 .278.672.822.822 0 0 0 .298.184c.114.04.234.064.363.064a.952.952 0 0 0 .424-.093c.121-.06.23-.141.321-.242l.22.332Zm.237-2.219h2.37v.46h-.953v2.132h-.462v-2.132h-.952v-.46h-.003Z\"\n      />\n      <path\n        fill=\"#212121\"\n        fillRule=\"evenodd\"\n        d=\"M72.188 26.95h-.461v3.744h.461v-1.272c.094.06.205.105.334.134.128.029.262.043.4.043.204 0 .389-.038.555-.107a1.281 1.281 0 0 0 .701-.737c.065-.172.097-.356.097-.55 0-.193-.03-.37-.085-.53a1.236 1.236 0 0 0-.24-.414 1.04 1.04 0 0 0-.377-.271 1.203 1.203 0 0 0-.5-.1c-.18 0-.35.036-.51.106a.989.989 0 0 0-.375.259v-.306Zm.322.48a.9.9 0 0 1 .43-.105c.134 0 .254.02.362.064a.723.723 0 0 1 .266.186.775.775 0 0 1 .164.286c.038.11.055.23.055.36 0 .14-.023.266-.064.382a.82.82 0 0 1-.462.492.928.928 0 0 1-.377.073 1.39 1.39 0 0 1-.353-.043 1.153 1.153 0 0 1-.342-.158v-1.284c.081-.099.19-.183.321-.253Zm5.307-.481h-.462v2.592h.462v-2.592Zm-2.879 0h.462v.778h.427c.201 0 .365.026.496.075a.85.85 0 0 1 .316.198.689.689 0 0 1 .166.286c.033.107.05.218.05.334 0 .117-.017.228-.055.339a.768.768 0 0 1-.178.294.857.857 0 0 1-.334.21 1.47 1.47 0 0 1-.514.08h-.839V26.95h.003Zm.465 1.211v.95h.336c.231 0 .395-.04.488-.123.094-.081.14-.197.14-.352 0-.157-.049-.276-.142-.358-.097-.082-.258-.123-.48-.123h-.342v.006Z\"\n        clipRule=\"evenodd\"\n      />\n      <path\n        fill=\"#212121\"\n        d=\"m80.031 28.198.988 1.343h-.567l-.763-1.049-.774 1.049h-.538l.982-1.32-.923-1.272h.567l.704.978.716-.978h.538l-.93 1.25Zm-40.568 4.546h-1.417v2.161h-.462v-2.592h2.34v2.592h-.46v-2.16Zm3.083.03h-.912l-.03.436c-.031.37-.075.667-.136.894a1.646 1.646 0 0 1-.225.524.646.646 0 0 1-.307.248c-.121.044-.249.066-.377.064l-.035-.448a.374.374 0 0 0 .172-.038.482.482 0 0 0 .19-.19c.061-.099.117-.238.167-.419.05-.183.082-.422.099-.722l.047-.807h1.809v2.592h-.462v-2.135Z\"\n      />\n      <path\n        fill=\"#212121\"\n        fillRule=\"evenodd\"\n        d=\"M44.253 32.32a1.44 1.44 0 0 0-.397.17l.123.368c.105-.052.21-.096.315-.134.105-.038.24-.055.4-.055.13 0 .231.02.31.06a.41.41 0 0 1 .179.167.72.72 0 0 1 .081.259c.015.102.02.213.02.332a.788.788 0 0 0-.315-.13 1.8 1.8 0 0 0-.333-.036c-.137 0-.266.02-.389.055a.853.853 0 0 0-.312.158.748.748 0 0 0-.205.259.809.809 0 0 0-.076.352c0 .253.073.452.22.591.145.14.338.21.578.21.216 0 .389-.038.52-.114.132-.075.237-.163.313-.262v.335h.433v-1.59c0-.338-.074-.6-.223-.783-.146-.184-.406-.277-.774-.277-.158 0-.315.022-.468.064Zm.775 2.099a.686.686 0 0 1-.412.11.5.5 0 0 1-.348-.11.385.385 0 0 1-.123-.297c0-.073.015-.134.047-.19a.425.425 0 0 1 .126-.134.55.55 0 0 1 .178-.078.802.802 0 0 1 .205-.026c.227 0 .423.055.584.171v.33c-.076.085-.162.16-.257.224Z\"\n        clipRule=\"evenodd\"\n      />\n      <path\n        fill=\"#212121\"\n        d=\"M46.17 32.313h2.37v.46h-.953v2.132h-.461v-2.131h-.953v-.46h-.003Z\"\n      />\n      <path\n        fill=\"#212121\"\n        fillRule=\"evenodd\"\n        d=\"M50.697 34.88c.175-.056.324-.14.453-.257l-.14-.361c-.085.076-.2.14-.337.193a1.287 1.287 0 0 1-.462.078c-.254 0-.464-.067-.63-.204-.168-.137-.258-.329-.278-.574h1.999c.02-.09.029-.192.029-.311a1.182 1.182 0 0 0-.354-.86 1.137 1.137 0 0 0-.385-.241 1.462 1.462 0 0 0-1.043.02c-.158.067-.3.165-.419.289a1.225 1.225 0 0 0-.26.428c-.062.17-.092.349-.09.53 0 .204.034.39.099.556a1.202 1.202 0 0 0 .72.702c.184.066.378.099.574.096.173 0 .348-.03.524-.085Zm-1.172-1.998c.143-.131.333-.195.573-.195.228 0 .406.064.538.183.13.123.201.291.213.507H49.27a.792.792 0 0 1 .254-.495Zm2.03-.568h.585l.892 1.25-.953 1.342h-.567l1-1.343-.956-1.25Zm1.59 0h.462v2.592h-.462v-2.592Zm2.113 2.592-1.017-1.343.95-1.25h-.573l-.897 1.25.965 1.343h.572Zm2.11-.027c.176-.055.325-.14.453-.256l-.14-.361a1.08 1.08 0 0 1-.336.193 1.29 1.29 0 0 1-.462.078c-.254 0-.465-.067-.631-.204-.167-.137-.257-.329-.278-.574h2c.02-.09.028-.192.028-.311a1.176 1.176 0 0 0-.353-.86 1.138 1.138 0 0 0-.386-.241 1.276 1.276 0 0 0-.47-.088c-.216 0-.407.038-.573.108a1.214 1.214 0 0 0-.678.717c-.062.17-.093.349-.09.53 0 .204.034.39.099.556a1.2 1.2 0 0 0 .719.702c.184.066.38.099.575.096a1.74 1.74 0 0 0 .523-.085Zm-1.171-1.997c.143-.131.333-.195.573-.195.225 0 .406.064.537.183.132.123.202.291.213.507h-1.578a.792.792 0 0 1 .255-.495Zm3.679-1.439c-.272 0-.42-.152-.444-.454h-.436c0 .116.02.221.059.32a.69.69 0 0 0 .166.253.85.85 0 0 0 .275.17.999.999 0 0 0 .377.063.91.91 0 0 0 .623-.233.734.734 0 0 0 .172-.253.822.822 0 0 0 .061-.32h-.432c-.02.302-.164.454-.421.454Zm-1.248.87v2.593h.462l1.502-1.931v1.93h.462v-2.592h-.462l-1.502 1.931v-1.93h-.462Z\"\n        clipRule=\"evenodd\"\n      />\n    </svg>\n  );\n};\n","export const MastercardIcon = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width={23} height={14} fill=\"none\">\n    <ellipse cx={15.698} cy={7} fill=\"#F79E1B\" rx={7.302} ry={7} />\n    <ellipse cx={7.302} cy={7} fill=\"#EB001B\" rx={7.302} ry={7} />\n    <path\n      fill=\"#FF5F00\"\n      d=\"M11.5 12.728c1.877-1.267 3.103-3.36 3.103-5.728S13.377 2.539 11.5 1.272C9.623 2.539 8.396 4.632 8.396 7s1.227 4.46 3.104 5.728Z\"\n    />\n  </svg>\n);\n","export const MirIcon = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width={23} height={6} fill=\"none\">\n    <path\n      fill=\"#0F754E\"\n      fillRule=\"evenodd\"\n      d=\"M2.779.201c.19 0 .757-.05.997.731.161.527.419 1.39.772 2.588h.144c.379-1.263.639-2.126.78-2.588.243-.79.849-.73 1.091-.73h1.87v5.616H6.527v-3.31H6.4l-1.062 3.31H3.903L2.84 2.505h-.127v3.313H.807V.2h1.972Zm8.391 0v3.313h.152L12.615.79C12.865.248 13.4.2 13.4.2h1.845v5.617h-1.946V2.505h-.152L11.88 5.23c-.251.54-.811.589-.811.589H9.224V.2h1.946Zm10.8 2.67c-.271.742-1.124 1.274-2.067 1.274h-2.04v1.673h-1.851V2.87h5.958Z\"\n      clipRule=\"evenodd\"\n    />\n    <path\n      fill=\"url(#a)\"\n      fillRule=\"evenodd\"\n      d=\"M19.991.201h-4.077c.097 1.25 1.212 2.321 2.367 2.321h3.817c.22-1.04-.538-2.32-2.107-2.32Z\"\n      clipRule=\"evenodd\"\n    />\n    <defs>\n      <linearGradient\n        id=\"a\"\n        x1={22.135}\n        x2={15.914}\n        y1={1.661}\n        y2={1.661}\n        gradientUnits=\"userSpaceOnUse\"\n      >\n        <stop stopColor=\"#1F5CD7\" />\n        <stop offset={1} stopColor=\"#02AEFF\" />\n      </linearGradient>\n    </defs>\n  </svg>\n);\n","export const VisaIcon = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width={29} height={14} fill=\"none\">\n    <path fill=\"#F6F6F6\" d=\"M22 0H7a7 7 0 0 0 0 14h15a7 7 0 1 0 0-14Z\" />\n    <path\n      fill=\"#265697\"\n      fillRule=\"evenodd\"\n      d=\"M19.575 3.96a4.892 4.892 0 0 0-1.678-.285c-1.85 0-3.153.92-3.164 2.238-.011.974.93 1.518 1.64 1.842.73.333.974.545.97.841-.004.455-.581.663-1.12.663-.75 0-1.147-.103-1.762-.356l-.242-.108-.262 1.518c.437.19 1.246.353 2.085.362 1.969 0 3.247-.91 3.261-2.317.007-.772-.492-1.359-1.572-1.843-.655-.313-1.055-.523-1.051-.84 0-.282.34-.584 1.072-.584a3.493 3.493 0 0 1 1.402.26l.168.078.253-1.47ZM24.408 3.85h-1.444c-.447 0-.781.118-.977.552L19.212 10.5h1.961s.32-.82.393-1l2.392.003c.056.233.227.997.227.997h1.733l-1.511-6.65Zm-2.303 4.289.744-1.86c-.011.017.153-.386.247-.635l.127.573.432 1.922h-1.55ZM10.875 10.5l1.186-6.65h1.896L12.77 10.5h-1.895ZM9.279 3.85 7.468 8.392l-.193-.923c-.337-1.064-1.388-2.217-2.562-2.794L6.369 10.5l1.957-.002 2.912-6.648h-1.96Z\"\n      clipRule=\"evenodd\"\n    />\n    <path\n      fill=\"#D97B16\"\n      fillRule=\"evenodd\"\n      d=\"M5.75 3.85H2.743l-.024.14c2.34.56 3.888 1.911 4.531 3.535L6.596 4.42c-.113-.427-.44-.555-.846-.57Z\"\n      clipRule=\"evenodd\"\n    />\n  </svg>\n);\n","import { MastercardIcon } from './MastercardIcon';\nimport { MirIcon } from './MirIcon';\nimport { VisaIcon } from './VisaIcon';\nimport styles from './CardsIcons.module.css';\n\nexport const CardsIcons = (): JSX.Element => {\n  return (\n    <div className={styles.cards}>\n      <MirIcon />\n      <MastercardIcon />\n      <VisaIcon />\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"cards\":\"ja_1UJID7IAcWi3NXQIU\"};","import clsx from 'clsx';\nimport styles from './PaymentMethodItem.module.css';\nimport { PaymentMethod } from '@app/storage/session/shared';\nimport { SBPIcon } from './SBPIcon';\nimport { CardsIcons } from './CardsIcons';\n\ntype PaymentMethodProps = {\n  method: PaymentMethod;\n  active: boolean;\n  onClick: (method: PaymentMethod) => void;\n};\n\nexport const PaymentMethodItem = ({\n  method,\n  active,\n  onClick,\n}: PaymentMethodProps): JSX.Element => {\n  const handleClick = () => {\n    onClick(method);\n  };\n\n  return (\n    <button\n      className={clsx({\n        [styles['payment-method-item']]: true,\n        [styles.active]: active,\n      })}\n      onClick={handleClick}\n    >\n      {method === PaymentMethod.Sbp ? (\n        <SBPIcon />\n      ) : (\n        <>\n          <CardsIcons />\n          <span>Банковской картой</span>\n        </>\n      )}\n    </button>\n  );\n};\n","import { Error } from '@popup/shared/components/errors/Error';\nimport React from 'react';\nimport styles from './PaymentScreenContent.module.css';\nimport { usePaymentScreen } from '../../hooks/usePaymentScreen';\nimport { Loader } from '../../../shared/Loader';\nimport { Button } from '@popup/shared/components/Button';\nimport { PaymentMethodItem } from './PaymentMethodItem';\nimport { useNavigate } from 'react-router-dom';\n\nexport const PaymentScreenContent: React.FC = () => {\n  const {\n    loading,\n    error,\n    selectedPaymentMethod,\n    availablePaymentMethods,\n    setSelectedPaymentMethod,\n    publicOfferUrl,\n    onPaymentClick,\n  } = usePaymentScreen();\n\n  const navigate = useNavigate();\n\n  const handleBack = () => {\n    navigate(-1);\n  };\n\n  if (loading) {\n    return (\n      <Loader className={styles.loader}>Переход к странице платежа</Loader>\n    );\n  }\n\n  if (error) {\n    return <Error />;\n  }\n\n  return (\n    <div className={styles.wrapper}>\n      <div className={styles.container}>\n        <h1 className={styles.title}>Выберите способ оплаты</h1>\n        <p className={styles.guarantee}>\n          Гарантия возврата, если что-то не понравится\n        </p>\n        <div className={styles.methods}>\n          {availablePaymentMethods.map((method) => (\n            <PaymentMethodItem\n              key={method}\n              active={selectedPaymentMethod === method}\n              method={method}\n              onClick={setSelectedPaymentMethod}\n            />\n          ))}\n        </div>\n        {publicOfferUrl && (\n          <p className={styles.agreement}>\n            Нажимая «Оплатить», вы соглашаетесь\n            <br />с условиями{' '}\n            <a className={styles.link} href={publicOfferUrl} target=\"_blank\">\n              публичной оферты\n            </a>\n          </p>\n        )}\n        <p className={styles.instructions}>\n          После нажатия «Оплатить» вы будете перенаправлены на сайт платежной\n          системы.\n        </p>\n        <div className={styles.buttons}>\n          <Button\n            variant=\"primary\"\n            size=\"default\"\n            className={styles.button}\n            onClick={onPaymentClick}\n          >\n            Оплатить\n          </Button>\n          <Button\n            variant=\"secondary\"\n            size=\"default\"\n            className={styles.button}\n            onClick={handleBack}\n            data-close=\"close-button\"\n          >\n            Назад\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport {\n  getFetchTariffsApiUrl,\n  type FetchTariffsResponse,\n  TariffData,\n} from '@api/premium/urls';\nimport { getSessionMetaApiData } from '@app/storage/session/metaApiData';\nimport { fetchTariffs } from '@api/premium/fetchTariffs';\n\ntype TariffsHookValues = {\n  isTariffError: boolean;\n  isTariffsLoading: boolean;\n  tariffs: FetchTariffsResponse | undefined;\n  setSelectedTariff: React.Dispatch<\n    React.SetStateAction<TariffData | undefined>\n  >;\n  selectedTariff?: TariffData;\n};\n\nexport function useTariffs(): TariffsHookValues {\n  const [tariffs, setTariffs] = useState<FetchTariffsResponse | undefined>();\n  const [isTariffsLoading, setIsTariffsLoading] = useState<boolean>(true);\n  const [isTariffError, setIsTariffError] = useState<boolean>(false);\n  const [selectedTariff, setSelectedTariff] =\n    useState<FetchTariffsResponse[number]>();\n\n  useEffect(() => {\n    async function fetchAllTariffs(): Promise<void> {\n      try {\n        setIsTariffsLoading(true);\n        const { apiBaseUrl } = await getSessionMetaApiData();\n        const data = await fetchTariffs(getFetchTariffsApiUrl(apiBaseUrl));\n        if (data.length === 0) {\n          throw new Error('Tariffs data is empty');\n        }\n        setTariffs(data);\n        setSelectedTariff(data[0]);\n      } catch (error) {\n        console.error(error);\n        setIsTariffError(true);\n      } finally {\n        setIsTariffsLoading(false);\n      }\n    }\n    void fetchAllTariffs();\n  }, []);\n\n  return {\n    isTariffError,\n    isTariffsLoading,\n    tariffs,\n    setSelectedTariff,\n    selectedTariff,\n  };\n}\n","import { featureStore } from '@app/features/list';\nimport { httpClient } from '../httpClient';\nimport { type FetchTariffsResponse } from './urls';\nimport { Feature } from '@app/features/types/Feature';\nimport { TariffType } from './types/Tariff';\n\nexport async function fetchTariffs(url: string): Promise<FetchTariffsResponse> {\n  const { featuresList } = await featureStore.getSnapshotAsync();\n  const isMultiDeviceSupported = featuresList[Feature.MultiDeviceSupport];\n\n  const data = await httpClient\n    .post<FetchTariffsResponse>(url, {\n      json: {\n        tariffType: isMultiDeviceSupported\n          ? TariffType.LimitedDevices\n          : TariffType.Base,\n      },\n    })\n    .json();\n  return data;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"tariff-item\":\"oo4P1h6IMvAVwTEY4_WW\",\"period\":\"rO4t17h9j5RE6TJcvX_K\",\"active\":\"VDH0l_j3QnWv0ajo3JAs\"};","import clsx from 'clsx';\nimport styles from './TariffItem.module.css';\nimport { TariffData } from '@api/premium/urls';\n\ntype TariffItemProps = {\n  tariff: TariffData;\n  onClick: (tariff: TariffData) => void;\n  selected: boolean;\n};\n\nexport const TariffItem = ({\n  tariff,\n  onClick,\n  selected,\n}: TariffItemProps): JSX.Element => {\n  const { price, period } = tariff;\n  const handleClick = () => {\n    onClick(tariff);\n  };\n\n  return (\n    <button\n      className={clsx({\n        [styles['tariff-item']]: true,\n        [styles.active]: selected,\n      })}\n      onClick={handleClick}\n    >\n      {price} ₽ / <span className={styles.period}>{period}</span>\n    </button>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Hjjr9YrnedZXbAwRjfvp\",\"container\":\"oylkjOsV16z8vGfmhaKk\",\"title\":\"yuPKZ48op8RBzuPhNBFW\",\"tariffs\":\"LIDUgc7SRRYHsDgphf4K\",\"buttons\":\"_U82_RUzGrGOxwM4_Fqx\",\"button\":\"pHi5xtxXDMfxIzBe_8TO\",\"loader\":\"xcr3x0oz4Nq5ijs7yxHB\"};","import { RoutePath } from '@popup/project/vrubel/routes/types/RoutePath';\nimport { Button } from '@popup/shared/components/Button';\nimport React from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { useTariffs } from '../../hooks/useTariffs';\nimport { TariffItem } from './TariffItem';\nimport { Error } from '@popup/shared/components/errors/Error';\nimport { Loader } from '../../../shared/Loader';\n\nimport styles from './TariffsScreenContent.module.css';\n\nexport const TariffsScreenContent: React.FC = () => {\n  const {\n    isTariffError,\n    isTariffsLoading,\n    tariffs,\n    selectedTariff,\n    setSelectedTariff,\n  } = useTariffs();\n\n  const navigate = useNavigate();\n\n  const handlePaymentClick = () => {\n    navigate(RoutePath.Payment, {\n      state: { selectedTariff: selectedTariff?.tariff },\n    });\n  };\n\n  if (isTariffsLoading) {\n    return <Loader className={styles.loader} />;\n  }\n\n  if (isTariffError) {\n    return <Error />;\n  }\n\n  if (!tariffs) {\n    return null;\n  }\n\n  return (\n    <div className={styles.wrapper}>\n      <div className={styles.container}>\n        <h1 className={styles.title}>\n          Выберите тариф\n          <br />\n          <span>за 1 рубль в день</span>\n        </h1>\n        <div className={styles.tariffs}>\n          {tariffs.map((tariff) => (\n            <TariffItem\n              key={tariff.tariff}\n              tariff={tariff}\n              onClick={setSelectedTariff}\n              selected={selectedTariff?.tariff === tariff.tariff}\n            />\n          ))}\n        </div>\n        <div className={styles.buttons}>\n          <Button\n            variant=\"primary\"\n            size=\"default\"\n            className={styles.button}\n            onClick={handlePaymentClick}\n          >\n            Продолжить\n          </Button>\n\n          <Link to={RoutePath.Root} className={styles.button}>\n            <Button\n              variant=\"secondary\"\n              size=\"default\"\n              className={styles.button}\n              data-close=\"close-button\"\n            >\n              Назад\n            </Button>\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { LimitedOnboardingStatus } from './types';\n\nexport enum OnboardingStep {\n  StepZero = 'step-zero',\n  StepOne = 'step-one',\n  Done = 'done',\n}\n\nexport const stepMap: Record<number, LimitedOnboardingStatus> = {\n  0: OnboardingStep.StepZero,\n  1: OnboardingStep.StepOne,\n  2: OnboardingStep.Done,\n};\n\nexport const stepMapReverse: Record<LimitedOnboardingStatus, number> = {\n  [OnboardingStep.StepZero]: 0,\n  [OnboardingStep.StepOne]: 1,\n  [OnboardingStep.Done]: 2,\n};\n","export const PauseIcon = () => {\n  return (\n    <svg\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M6.75 3C6.55109 3 6.36032 3.07902 6.21967 3.21967C6.07902 3.36032 6 3.55109 6 3.75V20.25C6 20.4489 6.07902 20.6397 6.21967 20.7803C6.36032 20.921 6.55109 21 6.75 21H8.25C8.44891 21 8.63968 20.921 8.78033 20.7803C8.92098 20.6397 9 20.4489 9 20.25V3.75C9 3.55109 8.92098 3.36032 8.78033 3.21967C8.63968 3.07902 8.44891 3 8.25 3H6.75ZM15.75 3C15.5511 3 15.3603 3.07902 15.2197 3.21967C15.079 3.36032 15 3.55109 15 3.75V20.25C15 20.4489 15.079 20.6397 15.2197 20.7803C15.3603 20.921 15.5511 21 15.75 21H17.25C17.4489 21 17.6397 20.921 17.7803 20.7803C17.921 20.6397 18 20.4489 18 20.25V3.75C18 3.55109 17.921 3.36032 17.7803 3.21967C17.6397 3.07902 17.4489 3 17.25 3H15.75Z\"\n        fill=\"currentColor\"\n      />\n    </svg>\n  );\n};\n","import { ConnectionState } from '@app/storage/local/shared';\nimport { usePaymentStatus } from '@popup/shared/hooks/usePaymentStatus';\nimport { usePremiumData } from '@popup/shared/hooks/usePremiumData';\nimport { clsx } from 'clsx';\nimport { useConnectButton } from '../hooks/useConnectButton';\nimport { PauseIcon } from './PauseIcon';\nimport { PlayIcon } from './PlayIcon';\nimport { ErrorIcon } from './ErrorIcon';\n\nimport styles from './ConnectButton.module.css';\n\ntype StatusRus = 'ПОДКЛЮЧЕНО' | 'ПОДКЛЮЧИТЬСЯ' | 'ПОДКЛЮЧЕНИЕ' | 'ОШИБКА';\n\nconst STATUS_MAP: Record<ConnectionState, StatusRus> = {\n  connected: 'ПОДКЛЮЧЕНО',\n  disconnected: 'ПОДКЛЮЧИТЬСЯ',\n  connecting: 'ПОДКЛЮЧЕНИЕ',\n  error: 'ОШИБКА',\n};\n\nexport const ConnectButton = ({\n  onExpiredRoute,\n  className,\n}: {\n  onExpiredRoute: string;\n  className?: string;\n}): JSX.Element => {\n  const { handleClick, status } = useConnectButton({\n    onExpiredRoute,\n  });\n  const paymentStatus = usePaymentStatus();\n  const { hasPremium } = usePremiumData();\n\n  const Icon = () => {\n    if (status === 'connected') {\n      return PauseIcon();\n    }\n    if (status === 'error') {\n      return ErrorIcon();\n    }\n    return PlayIcon();\n  };\n\n  return (\n    <div className={className}>\n      <button\n        className={clsx(\n          styles['connect-button'],\n          status === 'connected' && styles.enabled,\n          status === 'connecting' && styles.connecting,\n          status === 'error' && styles.error,\n          (paymentStatus === 'Expired' || paymentStatus === 'New') &&\n            hasPremium &&\n            styles.disabled,\n        )}\n        type=\"button\"\n        onClick={handleClick}\n      >\n        <div className={styles.content}>\n          {status === 'error' ? (\n            <div className={styles['error-info']}>\n              <span>{STATUS_MAP[status]}</span>\n              <br></br>\n              <span className={styles['description']}>\n                Попробуйте через 5 минут\n              </span>\n            </div>\n          ) : (\n            <span>{STATUS_MAP[status]}</span>\n          )}\n          <div className={styles.icon}>{Icon()}</div>\n        </div>\n      </button>\n    </div>\n  );\n};\n\nConnectButton.displayName = 'ConnectButton';\n","import {\n  LocalStorageKey,\n  getLocalStorageData,\n  setLocalStorageData,\n  type ConnectionState,\n} from '@app/storage/local/shared';\nimport { useFeedbackOverlay } from '@popup/shared/contexts/FeedbackOverlayContext';\nimport { usePaymentStatus } from '@popup/shared/hooks/usePaymentStatus';\nimport { usePremiumData } from '@popup/shared/hooks/usePremiumData';\nimport { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\ntype ConnectToggleHookValues = {\n  status: ConnectionState;\n  handleClick: () => Promise<void>;\n};\n\nexport function useConnectButton({\n  onExpiredRoute,\n}: {\n  onExpiredRoute: string;\n}): ConnectToggleHookValues {\n  const [status, setStatus] = useState<ConnectionState>('disconnected');\n  const { checkAndShowFeedbackOverlay } = useFeedbackOverlay();\n  const paymentStatus = usePaymentStatus();\n  const { hasPremium } = usePremiumData();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    async function getStatus(): Promise<void> {\n      const { currentState } = await getLocalStorageData(\n        LocalStorageKey.CurrentState,\n      );\n      if (currentState) {\n        setStatus(currentState);\n      }\n    }\n    void getStatus();\n  }, []);\n\n  useEffect(() => {\n    function listener(changes: {\n      currentState?: { newValue: ConnectionState };\n    }): void {\n      if (changes.currentState) {\n        setStatus(changes.currentState.newValue);\n      }\n    }\n    chrome.storage.onChanged.addListener(listener);\n    return () => {\n      chrome.storage.onChanged.removeListener(listener);\n    };\n  }, []);\n\n  async function handleClick(): Promise<void> {\n    if (\n      (paymentStatus === 'Expired' || paymentStatus === 'New') &&\n      hasPremium\n    ) {\n      navigate(onExpiredRoute);\n      return;\n    }\n    const { currentState, targetState } = await getLocalStorageData([\n      LocalStorageKey.TargetState,\n      LocalStorageKey.CurrentState,\n    ]);\n\n    if (!targetState || targetState === 'disconnected') {\n      await setLocalStorageData({ targetState: 'connected' });\n    } else {\n      if (currentState === 'connected') {\n        await checkAndShowFeedbackOverlay();\n      }\n      await setLocalStorageData({ targetState: 'disconnected' });\n    }\n  }\n\n  return {\n    status,\n    handleClick,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"connect-button\":\"VxMCJzx3MlQmSJxOpXxf\",\"content\":\"eWPTa72qQyLEPIvIm_Nc\",\"icon\":\"kXJzsdRJbOmFW17GjvQQ\",\"disabled\":\"rdI1oNhh60tp6Xca4yZE\",\"enabled\":\"hQ0YNeSVAtu1OF65oMPP\",\"connecting\":\"cPNOb7zbASUvsugKANTy\",\"rotation\":\"Vo1tz8MkcZanJf3mV3Jw\",\"error\":\"T1roeABRsYEcugHS5hL4\",\"error-info\":\"WzkqYTUDpeOBmgxAcSgf\",\"description\":\"aazQjm4V8HfoPLYgi6py\"};","export const ErrorIcon = () => {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width={24} height={24} fill=\"none\">\n      <path\n        fill=\"currentColor\"\n        fillRule=\"evenodd\"\n        d=\"M9.4 3.003c1.156-2 4.044-2 5.198 0l7.355 12.748c1.154 2-.29 4.5-2.6 4.5H4.646c-2.31 0-3.752-2.5-2.598-4.5L9.4 3.003ZM12 8.25a.75.75 0 0 1 .75.75v3.75a.75.75 0 1 1-1.5 0V9a.75.75 0 0 1 .75-.75Zm0 8.25a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5Z\"\n        clipRule=\"evenodd\"\n      />\n    </svg>\n  );\n};\n","export const PlayIcon = () => {\n  return (\n    <svg\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M4.5 5.59796C4.50019 5.19491 4.60864 4.79931 4.81401 4.4525C5.01939 4.1057 5.31415 3.82044 5.66749 3.62652C6.02083 3.43261 6.41977 3.33716 6.82261 3.35017C7.22545 3.36318 7.61741 3.48416 7.9575 3.70046L18.0165 10.101C18.3358 10.3042 18.5988 10.5847 18.7809 10.9165C18.9631 11.2483 19.0585 11.6207 19.0585 11.9992C19.0585 12.3777 18.9631 12.7501 18.7809 13.0819C18.5988 13.4138 18.3358 13.6942 18.0165 13.8975L7.9575 20.2995C7.6173 20.5158 7.22521 20.6368 6.82224 20.6498C6.41926 20.6627 6.02022 20.5671 5.66683 20.373C5.31345 20.1789 5.01871 19.8935 4.81344 19.5465C4.60817 19.1994 4.49992 18.8036 4.5 18.4005V5.59796Z\"\n        fill=\"currentColor\"\n      />\n    </svg>\n  );\n};\n","import { detect } from 'detect-browser';\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\n\ntype DebugButtonHookValues = {\n  isCopied: boolean;\n  handleCopy: () => void;\n};\n\n// TODO remove this function after the backend logic will be implemented\nfunction reducePacScript(\n  storageData: Record<string, unknown>,\n): Record<string, unknown> {\n  const { pacPremiumData, pacData, ...rest } = storageData;\n\n  return {\n    ...rest,\n    pacData: {\n      updatedAt: (pacData as Record<string, unknown>)?.updatedAt,\n    },\n    pacPremiumData: pacPremiumData\n      ? {\n          updatedAt: (pacPremiumData as Record<string, unknown>)?.updatedAt,\n        }\n      : undefined,\n  };\n}\n\nexport function useDebugButton(): DebugButtonHookValues {\n  const [isCopied, setIsCopied] = useState(false);\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null);\n\n  const handleGetDebugInfo = useCallback(async () => {\n    try {\n      setIsCopied(true);\n      const browserInfo = detect();\n      const extensionInfo = {\n        version: chrome.runtime.getManifest().version,\n      };\n      const platformInfo = await chrome.runtime.getPlatformInfo();\n      const storageData = {\n        local: reducePacScript(await chrome.storage.local.get()),\n        session: await chrome.storage.session.get(),\n      };\n      const debugData = JSON.stringify(\n        {\n          browserInfo,\n          extensionInfo,\n          platformInfo,\n          storageData,\n          chromeRuntimeLastError: chrome.runtime.lastError?.message,\n        },\n        null,\n        2,\n      );\n\n      const encodedDebugData = btoa(encodeURIComponent(debugData));\n\n      await navigator.clipboard.writeText(encodedDebugData);\n\n      return encodedDebugData;\n    } catch (error) {\n      console.error('Error gathering debug information:', error);\n    } finally {\n      setIsCopied(true);\n\n      timeoutRef.current = setTimeout(() => {\n        setIsCopied(false);\n      }, 1000);\n    }\n  }, []);\n\n  useEffect(() => {\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, []);\n\n  return useMemo(\n    () => ({\n      isCopied,\n      handleCopy: handleGetDebugInfo,\n    }),\n    [handleGetDebugInfo, isCopied],\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"link\":\"o9sK3ttbryUA8oACXQsY\",\"info\":\"PGk2i9bb4KO_t5xJtrgg\",\"copied\":\"Asa0aUlEmSAHcFz9hnK4\",\"copy-text\":\"efrs7FY4FeWYvrTXmMTg\"};","import { Button } from '@popup/shared/components/Button';\nimport { clsx } from 'clsx';\nimport { useDebugButton } from '../hooks/useDebugButton';\n\nimport styles from './DebugButton.module.css';\n\nexport function DebugButton({\n  className,\n}: {\n  className?: string;\n}): JSX.Element {\n  const { handleCopy, isCopied } = useDebugButton();\n  return (\n    <>\n      <Button\n        variant=\"link\"\n        className={clsx(styles.link, className)}\n        onClick={handleCopy}\n      >\n        <div className={clsx(styles.info, { [styles.copied]: isCopied })}>\n          <span>Отладка</span>\n        </div>\n        <span\n          className={clsx(styles['copy-text'], {\n            [styles.copied]: isCopied,\n          })}\n        >\n          Скопировано\n        </span>\n      </Button>\n    </>\n  );\n}\n","import { OnboardingScreenStatus } from '@app/storage/local/shared';\n\nexport enum OnboardingStep {\n  StepZero = 'step-zero',\n  StepOne = 'step-one',\n  StepTwo = 'step-two',\n  StepThree = 'step-three',\n  StepFour = 'step-four',\n  StepFive = 'step-five',\n  StepSix = 'step-six',\n  Done = 'done',\n}\n\nexport const stepMap: Record<number, OnboardingScreenStatus> = {\n  0: OnboardingStep.StepZero,\n  1: OnboardingStep.StepOne,\n  2: OnboardingStep.StepTwo,\n  3: OnboardingStep.StepThree,\n  4: OnboardingStep.StepFour,\n  5: OnboardingStep.StepFive,\n  6: OnboardingStep.StepSix,\n  7: OnboardingStep.Done,\n};\n\nexport const stepMapReverse: Record<OnboardingScreenStatus, number> = {\n  [OnboardingStep.StepZero]: 0,\n  [OnboardingStep.StepOne]: 1,\n  [OnboardingStep.StepTwo]: 2,\n  [OnboardingStep.StepThree]: 3,\n  [OnboardingStep.StepFour]: 4,\n  [OnboardingStep.StepFive]: 5,\n  [OnboardingStep.StepSix]: 6,\n  [OnboardingStep.Done]: 7,\n};\n","import { useEffect, useState } from 'react';\nimport {\n  SessionStorageKey,\n  getSessionStorageData,\n} from '../../../../../app/storage/session/shared';\n\nconst version = chrome.runtime.getManifest().version;\n\nconst getNegativeFeedbackUrl = (\n  proxy?: string,\n  port?: number,\n  userId?: string,\n): string => {\n  const body = [proxy, userId, version];\n\n  return `${process.env.POPUP_HTML_FEEDBACK_BOT_URL}?start=${btoa(JSON.stringify(body))}`;\n};\nexport function useNegativeFeedbackUrl(): { negativeFeedbackUrl: string } {\n  const [proxy, setProxy] = useState<string | undefined>();\n  const [port, setPort] = useState<number | undefined>();\n  const [userId, setUserId] = useState<string | undefined>();\n\n  useEffect(() => {\n    async function getStatus(): Promise<void> {\n      const { lastProxyHost, lastProxyPort } = await getSessionStorageData([\n        SessionStorageKey.LastProxyHost,\n        SessionStorageKey.LastProxyPort,\n      ]);\n      setProxy(lastProxyHost);\n      setPort(lastProxyPort);\n\n      const { LocalStoragePremiumKey, getLocalStoragePremiumData } =\n        await import('../../../../../app/storage/local/premium');\n      const { userId } = await getLocalStoragePremiumData(\n        LocalStoragePremiumKey.UserId,\n      );\n      setUserId(userId);\n    }\n    void getStatus();\n  }, []);\n\n  useEffect(() => {\n    function listener(changes: {\n      lastProxyHost?: { newValue: string };\n      lastProxyPort?: { newValue: number };\n    }): void {\n      if (changes.lastProxyHost) {\n        setProxy(changes.lastProxyHost.newValue);\n      }\n      if (changes.lastProxyPort) {\n        setPort(changes.lastProxyPort.newValue);\n      }\n    }\n    chrome.storage.session.onChanged.addListener(listener);\n    return () => {\n      chrome.storage.session.onChanged.removeListener(listener);\n    };\n  }, []);\n\n  return {\n    negativeFeedbackUrl: getNegativeFeedbackUrl(proxy, port, userId),\n  };\n}\n","export function NegativeIcon({\n  className,\n}: {\n  className?: string;\n}): JSX.Element {\n  return (\n    <svg\n      width=\"51\"\n      height=\"84\"\n      viewBox=\"0 0 51 84\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className={className}\n    >\n      <path\n        d=\"M41.7961 53.7183C41.7961 61.9687 43.428 68.4209 46.6919 73.075C47.5986 74.3443 48.4145 75.3416 49.1398 76.0669C50.258 77.2758 50.8171 78.3335 50.8171 79.2402C50.8171 80.1468 50.7113 80.857 50.4998 81.3708C50.2882 81.8845 49.986 82.3378 49.5932 82.7307C48.747 83.5769 47.8705 84 46.9639 84C46.0573 84 45.2262 83.8187 44.4707 83.456C43.7151 83.1236 42.8538 82.5796 41.8867 81.8241C40.9499 81.0988 39.9828 80.1468 38.9855 78.9682C37.9882 77.7895 37.006 76.3842 36.0389 74.7523C35.0718 73.1203 34.2105 71.2617 33.455 69.1765C31.8231 64.4922 31.0071 59.2639 31.0071 53.4916V30.5084C31.0071 19.81 33.6666 11.3179 38.9855 5.03184C41.8263 1.67728 44.3649 0 46.6013 0C47.8101 0 48.8074 0.423098 49.5932 1.26929C50.4091 2.08527 50.8171 2.91635 50.8171 3.76255C50.8171 5.30383 50.3487 6.57312 49.4118 7.57043C48.5052 8.53751 47.5986 9.6708 46.6919 10.9703C45.7853 12.2396 44.9693 13.7658 44.244 15.5488C42.612 19.5683 41.7961 24.4792 41.7961 30.2817V53.7183Z\"\n        fill=\"#5F2E99\"\n      />\n      <path\n        d=\"M6.11981 59.4753C7.78197 59.4753 9.21748 60.0798 10.4263 61.2886C11.6352 62.4975 12.2396 63.7214 12.2396 64.9605C12.2396 66.1996 12.0734 67.1817 11.741 67.9071C11.4085 68.6324 10.9703 69.267 10.4263 69.811C9.21748 71.0198 7.78197 71.6243 6.11981 71.6243C4.45764 71.6243 3.02213 71.0198 1.81328 69.811C0.604425 68.6021 0 67.3933 0 66.1844C0 64.1294 0.604425 62.4975 1.81328 61.2886C3.02213 60.0798 4.45764 59.4753 6.11981 59.4753ZM6.11981 21.5325C7.78197 21.5325 9.21748 22.137 10.4263 23.3458C11.6352 24.5547 12.2396 25.7786 12.2396 27.0177C12.2396 28.2568 12.0734 29.239 11.741 29.9643C11.4085 30.6896 10.9703 31.3242 10.4263 31.8682C9.21748 33.0771 7.78197 33.6815 6.11981 33.6815C4.45764 33.6815 3.02213 33.0771 1.81328 31.8682C0.604425 30.6594 0 29.4505 0 28.2417C0 26.1866 0.604425 24.5547 1.81328 23.3458C3.02213 22.137 4.45764 21.5325 6.11981 21.5325Z\"\n        fill=\"#5F2E99\"\n      />\n    </svg>\n  );\n}\n","import styles from './PositiveIcon.module.css';\n\nexport function PositiveIcon({\n  className,\n}: {\n  className?: string;\n}): JSX.Element {\n  return (\n    <svg\n      width=\"49\"\n      height=\"81\"\n      viewBox=\"0 0 49 81\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className={className}\n    >\n      <path\n        d=\"M38.5983 51.7998V29.2002C38.5983 23.605 37.8114 18.8694 36.2378 14.9935C35.5384 13.2741 34.7515 11.8025 33.8773 10.5785C33.003 9.32542 32.1142 8.2326 31.2108 7.30005C30.3365 6.33837 29.8994 5.11441 29.8994 3.62817C29.8994 2.8122 30.2783 2.01079 31.0359 1.22396C31.8228 0.407987 32.799 0 33.9647 0C36.1212 0 38.5691 1.61738 41.3085 4.85213C46.4375 10.9137 49.0019 19.1025 49.0019 29.4188V51.5812C49.0019 57.1473 48.2151 62.1889 46.6415 66.7059C45.9129 68.7167 45.0824 70.5089 44.1498 72.0826C43.2173 73.6562 42.2702 75.0113 41.3085 76.1479C40.3468 77.2844 39.3997 78.2024 38.4671 78.9018C37.5637 79.6303 36.7478 80.1549 36.0192 80.4754C35.2907 80.8251 34.4893 81 33.615 81C32.7408 81 31.8956 80.592 31.0797 79.776C30.7008 79.3972 30.4094 78.9601 30.2054 78.4646C30.0014 77.9692 29.8994 77.2844 29.8994 76.4101C29.8994 75.5359 30.4385 74.5159 31.5168 73.3502C32.2162 72.6508 33.003 71.6891 33.8773 70.4652C37.0246 65.9773 38.5983 59.7555 38.5983 51.7998Z\"\n        fill=\"#5F2E99\"\n      />\n      <path\n        d=\"M5.90124 57.3514C7.50405 57.3514 8.88829 57.9342 10.054 59.0999C11.2196 60.2656 11.8025 61.4458 11.8025 62.6407C11.8025 63.8355 11.6422 64.7826 11.3216 65.482C11.0011 66.1814 10.5785 66.7934 10.054 67.3179C8.88829 68.4836 7.50405 69.0665 5.90124 69.0665C4.29843 69.0665 2.91419 68.4836 1.74852 67.3179C0.582839 66.1523 0 64.9866 0 63.8209C0 61.8393 0.582839 60.2656 1.74852 59.0999C2.91419 57.9342 4.29843 57.3514 5.90124 57.3514ZM5.90124 20.7637C7.50405 20.7637 8.88829 21.3465 10.054 22.5122C11.2196 23.6779 11.8025 24.8581 11.8025 26.053C11.8025 27.2478 11.6422 28.1949 11.3216 28.8943C11.0011 29.5937 10.5785 30.2057 10.054 30.7302C8.88829 31.8959 7.50405 32.4788 5.90124 32.4788C4.29843 32.4788 2.91419 31.8959 1.74852 30.7302C0.582839 29.5646 0 28.3989 0 27.2332C0 25.2516 0.582839 23.6779 1.74852 22.5122C2.91419 21.3465 4.29843 20.7637 5.90124 20.7637Z\"\n        fill=\"#5F2E99\"\n      />\n    </svg>\n  );\n}\n","export function VrubelIcon({ className }: { className?: string }): JSX.Element {\n  return (\n    <svg\n      className={className}\n      width=\"114\"\n      height=\"53\"\n      viewBox=\"0 0 114 53\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M62.2959 0.181094C56.2395 0.475376 54.4419 0.724979 51.3272 1.70277C49.2783 2.34632 46.2021 3.2223 44.4914 3.64933C41.1829 4.47547 33.0172 8.97648 30.9675 11.1043C29.5859 12.5379 29.2175 12.5031 28.9108 10.9102C28.6438 9.52424 27.4017 8.34796 26.2054 8.34796C25.8077 8.34796 25.0672 7.76498 24.5597 7.05269C23.1106 5.01849 21.4409 4.76374 11.5914 5.07177C6.81064 5.22127 2.50676 5.45498 2.02703 5.59116C1.25508 5.80983 1.12263 6.26694 0.875935 9.56333C0.722787 11.6121 0.458296 14.9317 0.288591 16.9401C-0.646443 28.0034 0.836614 49.9844 2.64501 51.8614C3.17689 52.4134 10.2184 52.9543 17.4391 52.9972C21.4218 53.0213 22.5651 52.8941 22.974 52.3829C23.3114 51.961 24.2336 51.7385 25.6429 51.7385C27.359 51.7385 27.9795 51.5366 28.6968 50.7444C29.1918 50.1975 29.5966 49.532 29.5966 49.2661C29.5966 48.269 30.4953 48.2879 33.3181 49.3451C38.4499 51.2663 43.6466 51.8592 53.1898 51.6126C60.057 51.4348 62.346 51.2148 65.1933 50.4574C67.4152 49.8663 69.7969 49.5449 71.6578 49.5853C75.5966 49.6703 79.4585 48.9018 81.8463 47.5575C84.5923 46.0118 85.2239 44.8639 84.9006 42.0087C84.7553 40.7276 84.8054 39.7094 85.014 39.7094C85.2193 39.7094 85.966 39.1484 86.673 38.4631C88.2554 36.929 88.3667 35.0538 87.0629 31.9073L86.1668 29.7459L87.4288 28.7209C89.0352 27.4157 90.1635 24.5812 89.7906 22.7867C89.0708 19.3223 87.1118 16.956 83.3054 14.9541C82.1771 14.3608 81.3327 13.7928 81.4295 13.6927C81.8207 13.2867 95.6628 12.4559 102.446 12.431C106.822 12.4151 110.099 12.2149 110.724 11.9253C112.213 11.2358 113.489 9.63379 113.812 8.04681C114.175 6.26479 112.802 2.92758 111.473 2.35921C109.63 1.57131 103.854 0.642066 99.5482 0.441009C89.993 -0.0049257 69.1276 -0.150565 62.2959 0.181094ZM75.3342 1.92402C72.6024 2.08512 67.9458 2.26599 64.9864 2.32613C62.0269 2.38585 59.0467 2.568 58.3637 2.72996L57.122 3.02511L58.1568 3.39156C61.7727 4.67223 65.3974 5.0911 69.4148 4.69199C70.7481 4.55967 71.544 4.69027 71.9455 5.10699C72.383 5.56066 72.6508 5.59116 73.0014 5.22728C73.3524 4.86297 73.4749 5.0606 73.484 6.0066C73.4948 7.07503 73.5631 7.15623 73.9186 6.52213C74.5064 5.47474 75.1256 5.58386 75.1364 6.73693L75.1455 7.70355L75.9075 6.67507C76.6542 5.6672 77.6923 5.7179 77.4535 6.75068C77.3868 7.03851 77.4108 7.12873 77.506 6.95174C77.8376 6.33653 78.8525 6.63339 78.8525 7.34569C78.8525 7.73921 78.975 7.93425 79.1249 7.77873C79.2747 7.62322 79.6774 7.7362 80.0202 8.02963C80.514 8.45236 80.6783 8.45279 80.8149 8.03134C80.9097 7.73921 81.3583 7.06257 81.8116 6.52771L82.6353 5.5555L82.3766 6.84433L82.1175 8.13316L82.8083 7.1326L83.4987 6.13161L84.6937 7.32034C85.9511 8.5705 86.2289 8.47169 85.3874 7.07288C84.5653 5.7063 85.3501 5.56925 86.9127 6.8061C87.9851 7.65544 88.3725 7.79205 88.3725 7.3212C88.3725 6.96849 88.1863 6.56079 87.9586 6.41472C87.731 6.26866 87.5447 5.9675 87.5447 5.74496C87.5447 5.52243 87.731 5.3407 87.9586 5.3407C88.1863 5.3407 88.3725 5.63069 88.3725 5.98511C88.3725 6.33954 88.6519 6.62953 88.9934 6.62953C89.3349 6.62953 89.6143 6.91951 89.6143 7.27394C89.6143 8.15034 90.3097 8.08762 90.8072 7.16654C91.1768 6.48217 91.3271 6.52814 92.4831 7.67648C93.8039 8.98851 94.0705 8.90646 93.306 7.42387C92.5415 5.94129 93.2853 5.97695 94.7944 7.49519C96.3317 9.04135 96.645 8.96445 95.5937 7.29843C94.8226 6.07748 95.4964 5.36734 96.3123 6.54103C96.6123 6.97321 97.1372 7.49691 97.4787 7.70484C98.0031 8.02447 98.0163 7.97635 97.5619 7.39466C97.1608 6.88085 97.1463 6.62781 97.5047 6.39797C97.7688 6.22827 98.1057 6.25963 98.2527 6.46714C98.4 6.67464 99.0544 7.32764 99.7068 7.91836C100.882 8.9825 100.89 8.98336 100.607 8.02576C100.401 7.33194 100.489 7.05914 100.919 7.05914C101.248 7.05914 101.815 7.49433 102.179 8.02576C102.76 8.87295 102.81 8.88626 102.58 8.13316C102.435 7.66059 102.137 7.0325 101.917 6.73693C101.23 5.81585 102.79 6.10669 103.564 7.04367C104.089 7.68035 104.394 7.771 104.809 7.41399C105.221 7.05957 105.564 7.13389 106.179 7.71085C106.972 8.45623 106.999 8.45107 106.999 7.55533C106.999 6.48561 107.735 6.31291 108.099 7.29714C108.31 7.86723 108.485 7.83029 109.293 7.04195L110.239 6.11915L110.709 7.03078C111.233 8.04724 111.966 7.84532 111.966 6.68452C111.966 5.43521 109.83 3.70432 107.67 3.2034C106.56 2.94563 104.138 2.77078 102.289 2.81503C98.328 2.90911 81.8211 2.16202 80.9221 1.84755C80.5806 1.72855 78.0661 1.76248 75.3342 1.92402ZM52.2974 4.69199C52.1856 4.80755 50.9907 5.08981 49.6413 5.31922C43.8117 6.3099 43.3059 6.4869 40.9023 8.38105C36.6377 11.7414 36.0285 12.1852 35.0703 12.6264C34.5524 12.8653 34.0202 13.3538 33.8877 13.7116C33.7557 14.0695 33.3144 14.3625 32.908 14.3625C32.5015 14.3625 32.0615 14.6525 31.9303 15.0069C31.7995 15.3613 31.4071 15.6513 31.0582 15.6513C30.7097 15.6513 30.4245 15.8446 30.4245 16.0809C30.4245 16.3172 30.2101 16.5105 29.9481 16.5105C29.6861 16.5105 28.4903 17.5626 27.2907 18.848C25.3246 20.9548 25.0796 21.4313 24.8097 23.6726C24.4289 26.8362 24.8958 36.6171 25.5755 39.7094C25.984 41.5692 26.2799 42.0998 26.9641 42.2024C27.4426 42.2738 28.0498 42.7571 28.3143 43.2765C28.5784 43.7954 28.7038 43.8882 28.5929 43.4823C28.2142 42.0968 29.1633 42.2441 29.761 43.6636C30.2647 44.8609 30.362 44.93 30.3905 44.1129C30.4212 43.2468 31.2523 42.6497 31.2523 43.4939C31.2523 43.685 31.5284 44.2165 31.8657 44.6753C32.4365 45.4507 32.463 45.4039 32.2457 44.0055L32.0118 42.5019L32.8289 43.5467C33.5918 44.5223 33.6572 44.5365 33.8153 43.7615C33.9572 43.0647 34.0988 43.1553 34.6986 44.3277C35.622 46.1334 35.9105 46.0977 35.5711 44.2203C35.23 42.3343 35.6203 42.2832 36.3915 44.1129C36.836 45.168 36.9912 45.2991 37.0272 44.6499C37.0728 43.8225 37.1034 43.8264 37.8468 44.7513C38.471 45.5276 38.6639 45.5891 38.8547 45.0735C38.9846 44.7221 38.9904 44.097 38.8683 43.6833C38.7458 43.2696 38.913 43.3959 39.2396 43.963C39.6796 44.7273 39.8948 44.839 40.0699 44.3926C40.2574 43.9153 40.4404 43.9634 40.9532 44.6246C41.5758 45.4267 41.6006 45.4103 41.6134 44.195C41.6258 42.9951 41.6569 42.9732 42.2297 43.7594C42.5617 44.2147 42.9578 44.4579 43.1101 44.3002C43.262 44.1421 43.6366 44.2285 43.9421 44.4914C44.3763 44.8656 44.4976 44.7762 44.4976 44.0833C44.4976 42.8641 45.2066 42.5113 45.5303 43.5695C45.8287 44.5455 46.3933 44.7032 46.7083 43.8981C46.866 43.4939 47.0266 43.5205 47.3573 44.0055C47.7207 44.5391 47.7973 44.4837 47.8027 43.6833C47.8106 42.4821 48.489 42.4164 48.8458 43.5824C48.991 44.0584 49.2837 44.3363 49.4956 44.2006C49.7282 44.0511 49.7092 43.6206 49.4463 43.1115C48.9952 42.236 49.27 41.2522 49.8603 41.6311C50.0461 41.7505 50.3201 42.5199 50.4683 43.3414C50.6169 44.1628 50.9145 44.9477 51.1301 45.086C51.3632 45.2355 51.4195 44.8063 51.2692 44.027C51.1049 43.1738 51.1827 42.7167 51.4927 42.7167C51.7543 42.7167 52.0871 43.3315 52.232 44.0833C52.4923 45.4335 52.4998 45.4374 52.8711 44.4055C53.2419 43.3753 53.2552 43.3727 53.8632 44.2203C54.4266 45.0057 54.4551 44.8858 54.1952 42.8241C53.8707 40.2477 54.1646 39.9406 55.0176 41.9649C55.5185 43.1536 55.6108 43.2176 55.6393 42.3945C55.658 41.8626 55.783 41.4279 55.9175 41.4279C56.0516 41.4279 56.5276 41.8626 56.9755 42.3945C57.7851 43.3555 57.7871 43.3555 57.3521 42.4228C56.8269 41.2951 56.8062 40.9983 57.2524 40.9983C57.4378 40.9983 57.9113 41.6989 58.3049 42.5552C59.2636 44.6422 59.5873 44.152 58.8 41.8051C58.04 39.5406 58.0127 39.1582 58.6257 39.3705C58.8836 39.4598 59.3029 40.1983 59.557 41.012C59.9817 42.3709 61.4681 43.3873 61.4681 42.3185C61.4681 42.065 61.1887 41.8575 60.8472 41.8575C59.9296 41.8575 60.0931 40.6705 61.0542 40.3538C61.5095 40.2039 61.882 39.901 61.882 39.6806C61.882 39.1445 61.1688 39.169 60.8431 39.7163C60.4316 40.4076 59.8124 39.758 59.8124 38.6354C59.8124 38.0726 59.6262 37.4926 59.3985 37.3466C59.1709 37.2005 58.9846 37.3986 58.9846 37.7865C58.9846 38.1749 58.752 38.4124 58.4672 38.3154C57.8571 38.1066 57.5636 36.5136 57.9469 35.4894C58.182 34.8617 58.2805 34.8922 58.7139 35.7261C59.1924 36.6476 59.2288 36.6532 59.699 35.8717C60.0873 35.2269 60.0686 35.0129 59.61 34.8304C59.2925 34.7036 59.0094 34.2517 58.9813 33.8255C58.9527 33.3993 58.8352 31.3591 58.7197 29.2914C58.6042 27.2241 58.3285 25.5323 58.1067 25.5323C57.8848 25.5323 56.7817 26.4891 55.6547 27.6585C51.6078 31.8592 44.2658 34.9837 38.4424 34.9837C34.324 34.9837 32.1753 33.9325 34.1042 32.861C34.7342 32.5109 34.9279 32.5921 35.1005 33.2773C35.3865 34.4128 36.4978 33.9492 36.4573 32.7111C36.4304 31.8871 36.6717 31.7436 38.2822 31.6246L40.1386 31.4876L39.1101 30.6266L38.0819 29.7661L39.6895 30.0424C41.0435 30.2748 41.2579 30.2121 41.0476 29.6437C40.8841 29.2016 41.0298 28.9692 41.4702 28.9692C42.0538 28.9692 42.0385 28.8489 41.3539 28.0563L40.5654 27.1434L41.9106 27.4462C43.4053 27.7822 43.6271 27.4484 42.5315 26.5114C41.8543 25.9323 41.8609 25.9112 42.635 26.1905C45.0423 27.0587 45.176 26.9608 44.9235 24.5056C44.8651 23.9385 45.0299 23.7692 45.4686 23.9441C45.9181 24.1228 46.176 23.8242 46.3718 22.8997C46.5564 22.0276 46.8354 21.6809 47.2273 21.8368C47.6603 22.0091 47.8089 21.6744 47.8089 20.5282C47.8089 19.1715 47.9132 19.0165 48.6839 19.2257L49.5593 19.4632L48.6839 18.4962C47.65 17.3534 47.5825 16.9401 48.4298 16.9401C48.7712 16.9401 49.0506 16.7399 49.0506 16.4955C49.0506 16.1939 49.3172 16.1986 49.8785 16.5105C51.0366 17.1537 50.9249 16.4165 49.6202 14.8067C48.5842 13.5295 48.5287 12.3601 49.5544 13.4247C50.3425 14.2426 50.775 14.0098 50.2733 13.0367C49.6115 11.7535 50.2237 11.3909 51.1186 12.5367C52.1219 13.8212 52.4298 13.7559 52.1347 12.3218C51.922 11.2873 51.9596 11.2294 52.4373 11.8549C52.7374 12.248 53.2047 12.9246 53.4758 13.3585C53.9183 14.0665 53.9725 14.0149 54.0023 12.8589L54.0358 11.57L54.8455 12.6441C55.5893 13.6309 55.6563 13.6485 55.6733 12.8589C55.6902 12.0692 55.7573 12.0869 56.5011 13.0737C57.2457 14.0618 57.3124 14.079 57.3331 13.2885C57.3538 12.4825 57.3894 12.4761 57.9051 13.1811C58.5922 14.1206 58.9846 14.1404 58.9846 13.2361C58.9846 12.6651 59.0968 12.6355 59.6055 13.0737C60.1142 13.5119 60.2263 13.4822 60.2263 12.9113C60.2263 11.8231 60.8476 12.092 61.3443 13.3959L61.7938 14.5773L61.851 13.0737C61.906 11.634 61.935 11.6065 62.5393 12.4293C62.8862 12.9018 63.4387 13.2318 63.7678 13.1622C64.1585 13.0797 64.3655 13.3984 64.3655 14.0828C64.3655 14.6585 64.6449 15.241 64.9864 15.3772C65.3278 15.513 65.6072 15.9258 65.6072 16.294C65.6072 16.6622 66.2053 17.6159 66.9363 18.4133C68.1453 19.7322 68.3167 19.7992 68.83 19.1535C69.3378 18.5142 69.3747 18.5374 69.2 19.3906C69.0626 20.0613 69.3056 20.5416 70.0328 21.036C71.4045 21.9687 71.5808 21.653 70.789 19.6853C70.174 18.1577 70.1789 17.942 70.8586 16.6317C71.5622 15.2758 71.5606 15.1641 70.8085 13.7146C69.349 10.902 66.1014 8.1976 62.7098 6.97064C57.3302 5.02408 52.9091 4.0566 52.2974 4.69199ZM99.5482 6.44007C99.5482 6.80824 99.7345 6.9904 99.9622 6.84433C100.19 6.69827 100.376 6.39711 100.376 6.17457C100.376 5.95203 100.19 5.77031 99.9622 5.77031C99.7345 5.77031 99.5482 6.07189 99.5482 6.44007ZM80.0942 6.65487C80.0942 6.90491 80.2805 6.9904 80.5082 6.84433C80.7358 6.69827 80.9221 6.49377 80.9221 6.38938C80.9221 6.28498 80.7358 6.19992 80.5082 6.19992C80.2805 6.19992 80.0942 6.40484 80.0942 6.65487ZM18.697 8.63451C18.5451 8.79175 18.421 9.1204 18.421 9.36485C18.421 9.63379 18.6138 9.60844 18.9106 9.30041C19.1801 9.02073 19.3042 8.69208 19.1867 8.57007C19.0691 8.44806 18.8485 8.47685 18.697 8.63451ZM21.1917 10.1665C20.777 10.4818 20.0708 12.1633 19.6047 13.9445C17.4983 22.0014 18.512 41.4064 21.4049 48.409C22.2464 50.4449 22.253 50.4497 24.2667 50.4497C26.6401 50.4497 26.6276 50.4961 25.4836 45.7957C23.8254 38.983 22.9256 23.1282 23.7973 16.0809C24.5891 9.67761 24.6077 9.8705 23.181 9.72529C22.498 9.65569 21.6027 9.8546 21.1917 10.1665ZM26.08 10.5678C25.6711 11.7054 25.1189 15.4301 25.311 15.7527C25.6578 16.3357 26.9844 15.2935 27.4695 14.0566C27.7556 13.3276 27.8094 12.3652 27.6074 11.598C27.2448 10.2224 26.407 9.65742 26.08 10.5678ZM17.4367 12.4473C17.2947 12.8318 17.0915 14.2418 16.9855 15.5804L16.7926 18.0142L17.3965 15.0396C17.9723 12.2041 17.9917 10.9462 17.4367 12.4473ZM78.2374 14.3526C77.8885 14.9386 78.3459 15.6513 79.0711 15.6513C79.4196 15.6513 79.5586 15.9108 79.4163 16.2957C79.285 16.6502 79.3972 16.9401 79.6654 16.9401C80.1919 16.9401 81.336 17.9815 81.336 18.461C81.336 18.6221 80.6841 18.6272 79.8873 18.4721C78.9821 18.296 78.4386 18.3587 78.4386 18.6393C78.4386 18.8863 79.1017 19.0882 79.9117 19.0882C80.7884 19.0882 81.2813 19.2622 81.129 19.5178C80.9883 19.7541 80.4651 19.9504 79.9663 19.9539C79.2292 19.9594 79.1758 20.0385 79.6803 20.377C80.0218 20.606 80.8244 20.7963 81.4643 20.8002C82.2888 20.8049 83.271 21.4386 84.8389 22.9774L87.0505 25.1487L87.3324 23.4165C87.4876 22.4641 87.4926 21.1086 87.3436 20.4045C87.0265 18.906 84.9954 16.9195 82.9693 16.1256C82.1849 15.8184 80.8579 15.1946 80.021 14.7401C79.0541 14.2147 78.4038 14.0734 78.2374 14.3526ZM47.8089 15.8915C47.8089 16.2596 47.9981 16.4397 48.2294 16.2914C48.4608 16.1428 48.5432 15.8416 48.412 15.6217C48.0572 15.0258 47.8089 15.1367 47.8089 15.8915ZM75.3615 16.0607C74.7705 16.2837 74.6989 16.4504 75.0875 16.6996C75.3764 16.8852 75.8177 16.825 76.0669 16.5664C76.6778 15.9323 76.3417 15.6917 75.3615 16.0607ZM77.3396 16.7438C76.9547 17.7852 77.492 17.9734 78.0056 16.9771C78.326 16.3554 78.3322 16.0809 78.0263 16.0809C77.7834 16.0809 77.4746 16.3791 77.3396 16.7438ZM71.5481 17.5944C71.2733 18.3377 72.7928 22.1006 73.3627 22.089C73.5366 22.0851 73.9398 21.9107 74.2593 21.7006C74.7415 21.384 74.6711 20.9695 73.8454 19.2566C72.7688 17.0239 71.972 16.4474 71.5481 17.5944ZM46.3602 20.377C46.5009 20.6133 46.698 20.8066 46.7985 20.8066C46.8991 20.8066 46.9811 20.6133 46.9811 20.377C46.9811 20.1407 46.7836 19.9474 46.5427 19.9474C46.3018 19.9474 46.2195 20.1407 46.3602 20.377ZM77.1199 23.5458C75.6277 24.6194 74.5697 25.6788 74.6542 26.0161C74.7353 26.3409 74.8996 27.3315 75.0192 28.2174C75.1384 29.1037 75.398 29.8284 75.5958 29.8284C75.7933 29.8284 75.9551 29.6351 75.9551 29.3988C75.9551 28.6672 76.7121 28.9262 76.8963 29.721C77.0267 30.2821 77.2403 30.0913 77.7387 28.9692C78.3243 27.6499 78.4084 27.5923 78.4224 28.4988C78.4378 29.4697 78.4841 29.4895 79.1902 28.8261C79.6033 28.4378 80.5529 28.0507 81.2996 27.9656C82.0467 27.881 82.8054 27.564 82.9854 27.2611C83.1655 26.9586 83.5004 26.831 83.7292 26.978C84.3526 27.3779 84.7342 25.2148 84.2168 24.2117C83.6883 23.1862 81.432 21.6697 80.4312 21.6676C80.0475 21.6667 78.5574 22.5118 77.1199 23.5458ZM78.749 23.2606C78.3504 23.7202 78.0247 24.5593 78.0247 25.1246V26.1527L78.8885 25.2561C79.3914 24.7341 79.6944 23.9552 79.6129 23.392C79.4754 22.4379 79.4634 22.4361 78.749 23.2606ZM16.2454 26.1295C15.7839 29.2768 15.87 32.3782 16.5472 37.0274C17.1825 41.3853 18.6213 47.5747 19.2649 48.7153C19.7629 49.5977 19.7604 48.7317 19.2604 47.1842C18.3659 44.4171 17.0865 35.2866 16.8278 29.8284C16.5997 25.0112 16.5008 24.3844 16.2454 26.1295ZM61.8634 25.568C61.2189 26.8186 62.3915 28.11 64.1722 28.11C65.7227 28.11 66.6122 27.2185 66.2484 26.029C65.7831 24.5073 62.584 24.1709 61.8634 25.568ZM67.6768 26.9896C67.6768 29.1131 67.7646 29.3284 68.7306 29.5801C69.3101 29.7313 69.962 29.7408 70.1793 29.6016C70.3966 29.462 70.5742 29.5414 70.5742 29.7773C70.5742 30.0136 70.9931 30.1549 71.5055 30.0918C73.2324 29.8783 73.8855 29.3404 73.8855 28.1306C73.8855 26.6738 72.9331 25.7587 70.7812 25.1478C67.8221 24.3079 67.6768 24.3943 67.6768 26.9896ZM56.915 28.3248C56.915 28.6792 57.1013 28.9692 57.3289 28.9692C57.5566 28.9692 57.7428 28.6792 57.7428 28.3248C57.7428 27.9704 57.5566 27.6804 57.3289 27.6804C57.1013 27.6804 56.915 27.9704 56.915 28.3248ZM57.687 31.766C57.5616 32.0001 57.5777 32.6724 57.7222 33.261C57.867 33.8491 58.0876 34.1391 58.2126 33.9054C58.3381 33.6713 58.3219 32.9989 58.1775 32.4104C58.0326 31.8222 57.812 31.5322 57.687 31.766ZM81.4527 32.1896C79.1261 32.7794 76.0971 34.2474 76.2655 34.7036C76.3222 34.8579 76.3905 35.8051 76.417 36.8096C76.4435 37.814 76.5503 38.2973 76.6542 37.8836C76.7585 37.4699 77.0379 37.1318 77.2755 37.1318C77.5131 37.1318 77.6099 37.5184 77.4907 37.991C77.3719 38.4636 77.4431 38.8502 77.6497 38.8502C77.8558 38.8502 78.0247 38.6449 78.0247 38.3935C78.0247 38.1426 78.3504 37.9927 78.749 38.0606C79.1476 38.1289 79.7271 38.0194 80.0371 37.8179C80.3885 37.5893 80.7255 37.6606 80.932 38.0082C81.1708 38.4086 81.5057 38.153 82.1262 37.0965C82.8778 35.8167 83.2073 35.7132 83.0405 36.8096C82.9449 37.4407 83.6883 37.1167 84.5206 36.1652C85.4859 35.0624 86.0066 33.224 85.6374 32.2252C85.3464 31.4382 84.4461 31.4304 81.4527 32.1896ZM62.2959 33.6949C62.2959 35.0172 63.5248 36.7022 64.4897 36.7022C65.9582 36.7022 66.5431 34.2981 65.3709 33.081C65.0128 32.7098 64.1747 32.4061 63.5083 32.4061C62.4371 32.4061 62.2959 32.5564 62.2959 33.6949ZM67.2687 34.1829C67.2716 34.9777 67.3883 36.0706 67.5282 36.6119C67.7687 37.5442 67.8225 37.5579 68.5572 36.8676C69.2907 36.1789 69.3325 36.1862 69.3325 37.0055C69.3325 37.7315 69.5667 37.8522 70.7812 37.7521C71.8246 37.6662 72.2299 37.8071 72.2299 38.2565C72.2299 38.7394 72.4099 38.7802 73.0279 38.4374C73.4666 38.1933 74.0946 38.1014 74.4236 38.2324C75.292 38.5783 75.6322 36.3022 74.8909 35.1079C74.2854 34.1322 72.6711 33.5394 69.229 33.0294L67.2629 32.7382L67.2687 34.1829ZM55.0396 37.5829C54.6464 38.2436 55.1849 38.6698 55.7163 38.1182C56.0135 37.8097 56.0206 37.5695 55.7379 37.3883C55.5061 37.2396 55.1919 37.3273 55.0396 37.5829ZM53.6037 39.0904C53.6037 39.4585 53.7929 39.6385 54.0243 39.4903C54.2556 39.3417 54.338 39.0405 54.2068 38.8206C53.8521 38.2247 53.6037 38.3355 53.6037 39.0904ZM56.7081 38.8502C56.5673 39.0865 56.6497 39.2798 56.8906 39.2798C57.1315 39.2798 57.3289 39.0865 57.3289 38.8502C57.3289 38.6139 57.247 38.4206 57.1464 38.4206C57.0458 38.4206 56.8488 38.6139 56.7081 38.8502ZM49.0506 39.9496C49.0506 40.3178 49.2398 40.4978 49.4712 40.3496C49.7026 40.2009 49.7849 39.8997 49.6537 39.6798C49.299 39.0839 49.0506 39.1948 49.0506 39.9496ZM55.1327 39.5543C54.802 39.8976 55.1758 40.5686 55.6977 40.5686C55.9121 40.5686 56.0872 40.2787 56.0872 39.9242C56.0872 39.2601 55.5988 39.0706 55.1327 39.5543ZM51.948 40.139C51.948 40.3753 52.1343 40.5686 52.362 40.5686C52.5896 40.5686 52.7759 40.3753 52.7759 40.139C52.7759 39.9028 52.5896 39.7094 52.362 39.7094C52.1343 39.7094 51.948 39.9028 51.948 40.139ZM63.1883 40.5184C62.728 40.8208 62.7454 41.1121 63.2872 42.1995C64.1196 43.8706 65.5435 44.4055 66.3001 43.3315C67.0307 42.2944 66.9967 42.0109 66.0211 40.9983C65.1449 40.0888 64.108 39.9131 63.1883 40.5184ZM47.395 41.2131C47.395 41.5675 47.5812 41.8575 47.8089 41.8575C48.0365 41.8575 48.2228 41.5675 48.2228 41.2131C48.2228 40.8586 48.0365 40.5686 47.8089 40.5686C47.5812 40.5686 47.395 40.8586 47.395 41.2131ZM50.7063 41.2131C50.7063 41.5675 50.8926 41.8575 51.1202 41.8575C51.3479 41.8575 51.5341 41.5675 51.5341 41.2131C51.5341 40.8586 51.3479 40.5686 51.1202 40.5686C50.8926 40.5686 50.7063 40.8586 50.7063 41.2131ZM67.6913 41.7501C67.7116 43.3555 68.6868 45.1719 69.1296 44.4283C69.3859 43.9982 69.575 44.0403 69.9811 44.6169C70.8002 45.7794 72.727 45.3506 73.0912 43.9248C73.436 42.5754 72.7775 41.8124 70.616 41.0593C68.3142 40.2568 67.6747 40.408 67.6913 41.7501ZM80.6398 41.4304C80.1431 41.6384 78.6062 41.9408 77.225 42.1032C74.9811 42.3666 74.7133 42.501 74.7133 43.3641C74.7133 44.5284 75.7171 45.4976 76.4419 45.0327C76.7295 44.8484 77.6223 44.6598 78.4262 44.6143C79.2296 44.5683 79.9804 44.4798 80.0942 44.4175C80.2081 44.3552 80.4875 44.2672 80.7151 44.222C81.5661 44.0523 83.4056 43.1583 83.4056 42.9139C83.4056 42.7743 83.2127 42.2862 82.9771 41.8291C82.5127 40.9287 82.0347 40.847 80.6398 41.4304ZM52.5466 41.8949C52.3938 42.1518 52.4758 42.5771 52.7291 42.84C53.0673 43.191 53.1898 43.0668 53.1898 42.373C53.1898 41.3355 52.975 41.1757 52.5466 41.8949ZM46.1532 42.5272C46.1532 42.8954 46.3424 43.0754 46.5738 42.9272C46.8052 42.7786 46.8875 42.4774 46.7563 42.2574C46.4016 41.6616 46.1532 41.7724 46.1532 42.5272ZM42.8419 42.9568C42.8419 43.325 43.0311 43.505 43.2625 43.3568C43.4938 43.2082 43.5762 42.907 43.445 42.6871C43.0903 42.0912 42.8419 42.202 42.8419 42.9568ZM26.6992 47.3603C26.6992 47.7878 26.9584 48.5052 27.2754 48.9551C27.7647 49.6497 27.9513 49.6867 28.5172 49.1995C29.4721 48.3768 29.3396 47.6546 28.1285 47.082C26.756 46.4328 26.6992 46.4436 26.6992 47.3603Z\"\n        fill=\"black\"\n      />\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M62.2959 0.181094C56.2395 0.475376 54.4419 0.724979 51.3272 1.70277C49.2783 2.34632 46.2021 3.2223 44.4914 3.64933C41.1829 4.47547 33.0172 8.97648 30.9675 11.1043C29.5859 12.5379 29.2175 12.5031 28.9108 10.9102C28.6438 9.52424 27.4017 8.34796 26.2054 8.34796C25.8077 8.34796 25.0672 7.76498 24.5597 7.05269C23.1106 5.01849 21.4409 4.76374 11.5914 5.07177C6.81064 5.22127 2.50676 5.45498 2.02703 5.59116C1.25508 5.80983 1.12263 6.26694 0.875935 9.56333C0.722787 11.6121 0.458296 14.9317 0.288591 16.9401C-0.646443 28.0034 0.836614 49.9844 2.64501 51.8614C3.17689 52.4134 10.2184 52.9543 17.4391 52.9972C21.4218 53.0213 22.5651 52.8941 22.974 52.3829C23.3114 51.961 24.2336 51.7385 25.6429 51.7385C27.359 51.7385 27.9795 51.5366 28.6968 50.7444C29.1918 50.1975 29.5966 49.532 29.5966 49.2661C29.5966 48.269 30.4953 48.2879 33.3181 49.3451C38.4499 51.2663 43.6466 51.8592 53.1898 51.6126C60.057 51.4348 62.346 51.2148 65.1933 50.4574C67.4152 49.8663 69.7969 49.5449 71.6578 49.5853C75.5966 49.6703 79.4585 48.9018 81.8463 47.5575C84.5923 46.0118 85.2239 44.8639 84.9006 42.0087C84.7553 40.7276 84.8054 39.7094 85.014 39.7094C85.2193 39.7094 85.966 39.1484 86.673 38.4631C88.2554 36.929 88.3667 35.0538 87.0629 31.9073L86.1668 29.7459L87.4288 28.7209C89.0352 27.4157 90.1635 24.5812 89.7906 22.7867C89.0708 19.3223 87.1118 16.956 83.3054 14.9541C82.1771 14.3608 81.3327 13.7928 81.4295 13.6927C81.8207 13.2867 95.6628 12.4559 102.446 12.431C106.822 12.4151 110.099 12.2149 110.724 11.9253C112.213 11.2358 113.489 9.63379 113.812 8.04681C114.175 6.26479 112.802 2.92758 111.473 2.35921C109.63 1.57131 103.854 0.642066 99.5482 0.441009C89.993 -0.0049257 69.1276 -0.150565 62.2959 0.181094ZM75.3342 1.92402C72.6024 2.08512 67.9458 2.26599 64.9864 2.32613C62.0269 2.38585 59.0467 2.568 58.3637 2.72996L57.122 3.02511L58.1568 3.39156C61.7727 4.67223 65.3974 5.0911 69.4148 4.69199C70.7481 4.55967 71.544 4.69027 71.9455 5.10699C72.383 5.56066 72.6508 5.59116 73.0014 5.22728C73.3524 4.86297 73.4749 5.0606 73.484 6.0066C73.4948 7.07503 73.5631 7.15623 73.9186 6.52213C74.5064 5.47474 75.1256 5.58386 75.1364 6.73693L75.1455 7.70355L75.9075 6.67507C76.6542 5.6672 77.6923 5.7179 77.4535 6.75068C77.3868 7.03851 77.4108 7.12873 77.506 6.95174C77.8376 6.33653 78.8525 6.63339 78.8525 7.34569C78.8525 7.73921 78.975 7.93425 79.1249 7.77873C79.2747 7.62322 79.6774 7.7362 80.0202 8.02963C80.514 8.45236 80.6783 8.45279 80.8149 8.03134C80.9097 7.73921 81.3583 7.06257 81.8116 6.52771L82.6353 5.5555L82.3766 6.84433L82.1175 8.13316L82.8083 7.1326L83.4987 6.13161L84.6937 7.32034C85.9511 8.5705 86.2289 8.47169 85.3874 7.07288C84.5653 5.7063 85.3501 5.56925 86.9127 6.8061C87.9851 7.65544 88.3725 7.79205 88.3725 7.3212C88.3725 6.96849 88.1863 6.56079 87.9586 6.41472C87.731 6.26866 87.5447 5.9675 87.5447 5.74496C87.5447 5.52243 87.731 5.3407 87.9586 5.3407C88.1863 5.3407 88.3725 5.63069 88.3725 5.98511C88.3725 6.33954 88.6519 6.62953 88.9934 6.62953C89.3349 6.62953 89.6143 6.91951 89.6143 7.27394C89.6143 8.15034 90.3097 8.08762 90.8072 7.16654C91.1768 6.48217 91.3271 6.52814 92.4831 7.67648C93.8039 8.98851 94.0705 8.90646 93.306 7.42387C92.5415 5.94129 93.2853 5.97695 94.7944 7.49519C96.3317 9.04135 96.645 8.96445 95.5937 7.29843C94.8226 6.07748 95.4964 5.36734 96.3123 6.54103C96.6123 6.97321 97.1372 7.49691 97.4787 7.70484C98.0031 8.02447 98.0163 7.97635 97.5619 7.39466C97.1608 6.88085 97.1463 6.62781 97.5047 6.39797C97.7688 6.22827 98.1057 6.25963 98.2527 6.46714C98.4 6.67464 99.0544 7.32764 99.7068 7.91836C100.882 8.9825 100.89 8.98336 100.607 8.02576C100.401 7.33194 100.489 7.05914 100.919 7.05914C101.248 7.05914 101.815 7.49433 102.179 8.02576C102.76 8.87295 102.81 8.88626 102.58 8.13316C102.435 7.66059 102.137 7.0325 101.917 6.73693C101.23 5.81585 102.79 6.10669 103.564 7.04367C104.089 7.68035 104.394 7.771 104.809 7.41399C105.221 7.05957 105.564 7.13389 106.179 7.71085C106.972 8.45623 106.999 8.45107 106.999 7.55533C106.999 6.48561 107.735 6.31291 108.099 7.29714C108.31 7.86723 108.485 7.83029 109.293 7.04195L110.239 6.11915L110.709 7.03078C111.233 8.04724 111.966 7.84532 111.966 6.68452C111.966 5.43521 109.83 3.70432 107.67 3.2034C106.56 2.94563 104.138 2.77078 102.289 2.81503C98.328 2.90911 81.8211 2.16202 80.9221 1.84755C80.5806 1.72855 78.0661 1.76248 75.3342 1.92402ZM52.2974 4.69199C52.1856 4.80755 50.9907 5.08981 49.6413 5.31922C43.8117 6.3099 43.3059 6.4869 40.9023 8.38105C36.6377 11.7414 36.0285 12.1852 35.0703 12.6264C34.5524 12.8653 34.0202 13.3538 33.8877 13.7116C33.7557 14.0695 33.3144 14.3625 32.908 14.3625C32.5015 14.3625 32.0615 14.6525 31.9303 15.0069C31.7995 15.3613 31.4071 15.6513 31.0582 15.6513C30.7097 15.6513 30.4245 15.8446 30.4245 16.0809C30.4245 16.3172 30.2101 16.5105 29.9481 16.5105C29.6861 16.5105 28.4903 17.5626 27.2907 18.848C25.3246 20.9548 25.0796 21.4313 24.8097 23.6726C24.4289 26.8362 24.8958 36.6171 25.5755 39.7094C25.984 41.5692 26.2799 42.0998 26.9641 42.2024C27.4426 42.2738 28.0498 42.7571 28.3143 43.2765C28.5784 43.7954 28.7038 43.8882 28.5929 43.4823C28.2142 42.0968 29.1633 42.2441 29.761 43.6636C30.2647 44.8609 30.362 44.93 30.3905 44.1129C30.4212 43.2468 31.2523 42.6497 31.2523 43.4939C31.2523 43.685 31.5284 44.2165 31.8657 44.6753C32.4365 45.4507 32.463 45.4039 32.2457 44.0055L32.0118 42.5019L32.8289 43.5467C33.5918 44.5223 33.6572 44.5365 33.8153 43.7615C33.9572 43.0647 34.0988 43.1553 34.6986 44.3277C35.622 46.1334 35.9105 46.0977 35.5711 44.2203C35.23 42.3343 35.6203 42.2832 36.3915 44.1129C36.836 45.168 36.9912 45.2991 37.0272 44.6499C37.0728 43.8225 37.1034 43.8264 37.8468 44.7513C38.471 45.5276 38.6639 45.5891 38.8547 45.0735C38.9846 44.7221 38.9904 44.097 38.8683 43.6833C38.7458 43.2696 38.913 43.3959 39.2396 43.963C39.6796 44.7273 39.8948 44.839 40.0699 44.3926C40.2574 43.9153 40.4404 43.9634 40.9532 44.6246C41.5758 45.4267 41.6006 45.4103 41.6134 44.195C41.6258 42.9951 41.6569 42.9732 42.2297 43.7594C42.5617 44.2147 42.9578 44.4579 43.1101 44.3002C43.262 44.1421 43.6366 44.2285 43.9421 44.4914C44.3763 44.8656 44.4976 44.7762 44.4976 44.0833C44.4976 42.8641 45.2066 42.5113 45.5303 43.5695C45.8287 44.5455 46.3933 44.7032 46.7083 43.8981C46.866 43.4939 47.0266 43.5205 47.3573 44.0055C47.7207 44.5391 47.7973 44.4837 47.8027 43.6833C47.8106 42.4821 48.489 42.4164 48.8458 43.5824C48.991 44.0584 49.2837 44.3363 49.4956 44.2006C49.7282 44.0511 49.7092 43.6206 49.4463 43.1115C48.9952 42.236 49.27 41.2522 49.8603 41.6311C50.0461 41.7505 50.3201 42.5199 50.4683 43.3414C50.6169 44.1628 50.9145 44.9477 51.1301 45.086C51.3632 45.2355 51.4195 44.8063 51.2692 44.027C51.1049 43.1738 51.1827 42.7167 51.4927 42.7167C51.7543 42.7167 52.0871 43.3315 52.232 44.0833C52.4923 45.4335 52.4998 45.4374 52.8711 44.4055C53.2419 43.3753 53.2552 43.3727 53.8632 44.2203C54.4266 45.0057 54.4551 44.8858 54.1952 42.8241C53.8707 40.2477 54.1646 39.9406 55.0176 41.9649C55.5185 43.1536 55.6108 43.2176 55.6393 42.3945C55.658 41.8626 55.783 41.4279 55.9175 41.4279C56.0516 41.4279 56.5276 41.8626 56.9755 42.3945C57.7851 43.3555 57.7871 43.3555 57.3521 42.4228C56.8269 41.2951 56.8062 40.9983 57.2524 40.9983C57.4378 40.9983 57.9113 41.6989 58.3049 42.5552C59.2636 44.6422 59.5873 44.152 58.8 41.8051C58.04 39.5406 58.0127 39.1582 58.6257 39.3705C58.8836 39.4598 59.3029 40.1983 59.557 41.012C59.9817 42.3709 61.4681 43.3873 61.4681 42.3185C61.4681 42.065 61.1887 41.8575 60.8472 41.8575C59.9296 41.8575 60.0931 40.6705 61.0542 40.3538C61.5095 40.2039 61.882 39.901 61.882 39.6806C61.882 39.1445 61.1688 39.169 60.8431 39.7163C60.4316 40.4076 59.8124 39.758 59.8124 38.6354C59.8124 38.0726 59.6262 37.4926 59.3985 37.3466C59.1709 37.2005 58.9846 37.3986 58.9846 37.7865C58.9846 38.1749 58.752 38.4124 58.4672 38.3154C57.8571 38.1066 57.5636 36.5136 57.9469 35.4894C58.182 34.8617 58.2805 34.8922 58.7139 35.7261C59.1924 36.6476 59.2288 36.6532 59.699 35.8717C60.0873 35.2269 60.0686 35.0129 59.61 34.8304C59.2925 34.7036 59.0094 34.2517 58.9813 33.8255C58.9527 33.3993 58.8352 31.3591 58.7197 29.2914C58.6042 27.2241 58.3285 25.5323 58.1067 25.5323C57.8848 25.5323 56.7817 26.4891 55.6547 27.6585C51.6078 31.8592 44.2658 34.9837 38.4424 34.9837C34.324 34.9837 32.1753 33.9325 34.1042 32.861C34.7342 32.5109 34.9279 32.5921 35.1005 33.2773C35.3865 34.4128 36.4978 33.9492 36.4573 32.7111C36.4304 31.8871 36.6717 31.7436 38.2822 31.6246L40.1386 31.4876L39.1101 30.6266L38.0819 29.7661L39.6895 30.0424C41.0435 30.2748 41.2579 30.2121 41.0476 29.6437C40.8841 29.2016 41.0298 28.9692 41.4702 28.9692C42.0538 28.9692 42.0385 28.8489 41.3539 28.0563L40.5654 27.1434L41.9106 27.4462C43.4053 27.7822 43.6271 27.4484 42.5315 26.5114C41.8543 25.9323 41.8609 25.9112 42.635 26.1905C45.0423 27.0587 45.176 26.9608 44.9235 24.5056C44.8651 23.9385 45.0299 23.7692 45.4686 23.9441C45.9181 24.1228 46.176 23.8242 46.3718 22.8997C46.5564 22.0276 46.8354 21.6809 47.2273 21.8368C47.6603 22.0091 47.8089 21.6744 47.8089 20.5282C47.8089 19.1715 47.9132 19.0165 48.6839 19.2257L49.5593 19.4632L48.6839 18.4962C47.65 17.3534 47.5825 16.9401 48.4298 16.9401C48.7712 16.9401 49.0506 16.7399 49.0506 16.4955C49.0506 16.1939 49.3172 16.1986 49.8785 16.5105C51.0366 17.1537 50.9249 16.4165 49.6202 14.8067C48.5842 13.5295 48.5287 12.3601 49.5544 13.4247C50.3425 14.2426 50.775 14.0098 50.2733 13.0367C49.6115 11.7535 50.2237 11.3909 51.1186 12.5367C52.1219 13.8212 52.4298 13.7559 52.1347 12.3218C51.922 11.2873 51.9596 11.2294 52.4373 11.8549C52.7374 12.248 53.2047 12.9246 53.4758 13.3585C53.9183 14.0665 53.9725 14.0149 54.0023 12.8589L54.0358 11.57L54.8455 12.6441C55.5893 13.6309 55.6563 13.6485 55.6733 12.8589C55.6902 12.0692 55.7573 12.0869 56.5011 13.0737C57.2457 14.0618 57.3124 14.079 57.3331 13.2885C57.3538 12.4825 57.3894 12.4761 57.9051 13.1811C58.5922 14.1206 58.9846 14.1404 58.9846 13.2361C58.9846 12.6651 59.0968 12.6355 59.6055 13.0737C60.1142 13.5119 60.2263 13.4822 60.2263 12.9113C60.2263 11.8231 60.8476 12.092 61.3443 13.3959L61.7938 14.5773L61.851 13.0737C61.906 11.634 61.935 11.6065 62.5393 12.4293C62.8862 12.9018 63.4387 13.2318 63.7678 13.1622C64.1585 13.0797 64.3655 13.3984 64.3655 14.0828C64.3655 14.6585 64.6449 15.241 64.9864 15.3772C65.3278 15.513 65.6072 15.9258 65.6072 16.294C65.6072 16.6622 66.2053 17.6159 66.9363 18.4133C68.1453 19.7322 68.3167 19.7992 68.83 19.1535C69.3378 18.5142 69.3747 18.5374 69.2 19.3906C69.0626 20.0613 69.3056 20.5416 70.0328 21.036C71.4045 21.9687 71.5808 21.653 70.789 19.6853C70.174 18.1577 70.1789 17.942 70.8586 16.6317C71.5622 15.2758 71.5606 15.1641 70.8085 13.7146C69.349 10.902 66.1014 8.1976 62.7098 6.97064C57.3302 5.02408 52.9091 4.0566 52.2974 4.69199ZM99.5482 6.44007C99.5482 6.80824 99.7345 6.9904 99.9622 6.84433C100.19 6.69827 100.376 6.39711 100.376 6.17457C100.376 5.95203 100.19 5.77031 99.9622 5.77031C99.7345 5.77031 99.5482 6.07189 99.5482 6.44007ZM80.0942 6.65487C80.0942 6.90491 80.2805 6.9904 80.5082 6.84433C80.7358 6.69827 80.9221 6.49377 80.9221 6.38938C80.9221 6.28498 80.7358 6.19992 80.5082 6.19992C80.2805 6.19992 80.0942 6.40484 80.0942 6.65487ZM18.697 8.63451C18.5451 8.79175 18.421 9.1204 18.421 9.36485C18.421 9.63379 18.6138 9.60844 18.9106 9.30041C19.1801 9.02073 19.3042 8.69208 19.1867 8.57007C19.0691 8.44806 18.8485 8.47685 18.697 8.63451ZM21.1917 10.1665C20.777 10.4818 20.0708 12.1633 19.6047 13.9445C17.4983 22.0014 18.512 41.4064 21.4049 48.409C22.2464 50.4449 22.253 50.4497 24.2667 50.4497C26.6401 50.4497 26.6276 50.4961 25.4836 45.7957C23.8254 38.983 22.9256 23.1282 23.7973 16.0809C24.5891 9.67761 24.6077 9.8705 23.181 9.72529C22.498 9.65569 21.6027 9.8546 21.1917 10.1665ZM26.08 10.5678C25.6711 11.7054 25.1189 15.4301 25.311 15.7527C25.6578 16.3357 26.9844 15.2935 27.4695 14.0566C27.7556 13.3276 27.8094 12.3652 27.6074 11.598C27.2448 10.2224 26.407 9.65742 26.08 10.5678ZM17.4367 12.4473C17.2947 12.8318 17.0915 14.2418 16.9855 15.5804L16.7926 18.0142L17.3965 15.0396C17.9723 12.2041 17.9917 10.9462 17.4367 12.4473ZM78.2374 14.3526C77.8885 14.9386 78.3459 15.6513 79.0711 15.6513C79.4196 15.6513 79.5586 15.9108 79.4163 16.2957C79.285 16.6502 79.3972 16.9401 79.6654 16.9401C80.1919 16.9401 81.336 17.9815 81.336 18.461C81.336 18.6221 80.6841 18.6272 79.8873 18.4721C78.9821 18.296 78.4386 18.3587 78.4386 18.6393C78.4386 18.8863 79.1017 19.0882 79.9117 19.0882C80.7884 19.0882 81.2813 19.2622 81.129 19.5178C80.9883 19.7541 80.4651 19.9504 79.9663 19.9539C79.2292 19.9594 79.1758 20.0385 79.6803 20.377C80.0218 20.606 80.8244 20.7963 81.4643 20.8002C82.2888 20.8049 83.271 21.4386 84.8389 22.9774L87.0505 25.1487L87.3324 23.4165C87.4876 22.4641 87.4926 21.1086 87.3436 20.4045C87.0265 18.906 84.9954 16.9195 82.9693 16.1256C82.1849 15.8184 80.8579 15.1946 80.021 14.7401C79.0541 14.2147 78.4038 14.0734 78.2374 14.3526ZM47.8089 15.8915C47.8089 16.2596 47.9981 16.4397 48.2294 16.2914C48.4608 16.1428 48.5432 15.8416 48.412 15.6217C48.0572 15.0258 47.8089 15.1367 47.8089 15.8915ZM75.3615 16.0607C74.7705 16.2837 74.6989 16.4504 75.0875 16.6996C75.3764 16.8852 75.8177 16.825 76.0669 16.5664C76.6778 15.9323 76.3417 15.6917 75.3615 16.0607ZM77.3396 16.7438C76.9547 17.7852 77.492 17.9734 78.0056 16.9771C78.326 16.3554 78.3322 16.0809 78.0263 16.0809C77.7834 16.0809 77.4746 16.3791 77.3396 16.7438ZM71.5481 17.5944C71.2733 18.3377 72.7928 22.1006 73.3627 22.089C73.5366 22.0851 73.9398 21.9107 74.2593 21.7006C74.7415 21.384 74.6711 20.9695 73.8454 19.2566C72.7688 17.0239 71.972 16.4474 71.5481 17.5944ZM46.3602 20.377C46.5009 20.6133 46.698 20.8066 46.7985 20.8066C46.8991 20.8066 46.9811 20.6133 46.9811 20.377C46.9811 20.1407 46.7836 19.9474 46.5427 19.9474C46.3018 19.9474 46.2195 20.1407 46.3602 20.377ZM77.1199 23.5458C75.6277 24.6194 74.5697 25.6788 74.6542 26.0161C74.7353 26.3409 74.8996 27.3315 75.0192 28.2174C75.1384 29.1037 75.398 29.8284 75.5958 29.8284C75.7933 29.8284 75.9551 29.6351 75.9551 29.3988C75.9551 28.6672 76.7121 28.9262 76.8963 29.721C77.0267 30.2821 77.2403 30.0913 77.7387 28.9692C78.3243 27.6499 78.4084 27.5923 78.4224 28.4988C78.4378 29.4697 78.4841 29.4895 79.1902 28.8261C79.6033 28.4378 80.5529 28.0507 81.2996 27.9656C82.0467 27.881 82.8054 27.564 82.9854 27.2611C83.1655 26.9586 83.5004 26.831 83.7292 26.978C84.3526 27.3779 84.7342 25.2148 84.2168 24.2117C83.6883 23.1862 81.432 21.6697 80.4312 21.6676C80.0475 21.6667 78.5574 22.5118 77.1199 23.5458ZM78.749 23.2606C78.3504 23.7202 78.0247 24.5593 78.0247 25.1246V26.1527L78.8885 25.2561C79.3914 24.7341 79.6944 23.9552 79.6129 23.392C79.4754 22.4379 79.4634 22.4361 78.749 23.2606ZM16.2454 26.1295C15.7839 29.2768 15.87 32.3782 16.5472 37.0274C17.1825 41.3853 18.6213 47.5747 19.2649 48.7153C19.7629 49.5977 19.7604 48.7317 19.2604 47.1842C18.3659 44.4171 17.0865 35.2866 16.8278 29.8284C16.5997 25.0112 16.5008 24.3844 16.2454 26.1295ZM61.8634 25.568C61.2189 26.8186 62.3915 28.11 64.1722 28.11C65.7227 28.11 66.6122 27.2185 66.2484 26.029C65.7831 24.5073 62.584 24.1709 61.8634 25.568ZM67.6768 26.9896C67.6768 29.1131 67.7646 29.3284 68.7306 29.5801C69.3101 29.7313 69.962 29.7408 70.1793 29.6016C70.3966 29.462 70.5742 29.5414 70.5742 29.7773C70.5742 30.0136 70.9931 30.1549 71.5055 30.0918C73.2324 29.8783 73.8855 29.3404 73.8855 28.1306C73.8855 26.6738 72.9331 25.7587 70.7812 25.1478C67.8221 24.3079 67.6768 24.3943 67.6768 26.9896ZM56.915 28.3248C56.915 28.6792 57.1013 28.9692 57.3289 28.9692C57.5566 28.9692 57.7428 28.6792 57.7428 28.3248C57.7428 27.9704 57.5566 27.6804 57.3289 27.6804C57.1013 27.6804 56.915 27.9704 56.915 28.3248ZM57.687 31.766C57.5616 32.0001 57.5777 32.6724 57.7222 33.261C57.867 33.8491 58.0876 34.1391 58.2126 33.9054C58.3381 33.6713 58.3219 32.9989 58.1775 32.4104C58.0326 31.8222 57.812 31.5322 57.687 31.766ZM81.4527 32.1896C79.1261 32.7794 76.0971 34.2474 76.2655 34.7036C76.3222 34.8579 76.3905 35.8051 76.417 36.8096C76.4435 37.814 76.5503 38.2973 76.6542 37.8836C76.7585 37.4699 77.0379 37.1318 77.2755 37.1318C77.5131 37.1318 77.6099 37.5184 77.4907 37.991C77.3719 38.4636 77.4431 38.8502 77.6497 38.8502C77.8558 38.8502 78.0247 38.6449 78.0247 38.3935C78.0247 38.1426 78.3504 37.9927 78.749 38.0606C79.1476 38.1289 79.7271 38.0194 80.0371 37.8179C80.3885 37.5893 80.7255 37.6606 80.932 38.0082C81.1708 38.4086 81.5057 38.153 82.1262 37.0965C82.8778 35.8167 83.2073 35.7132 83.0405 36.8096C82.9449 37.4407 83.6883 37.1167 84.5206 36.1652C85.4859 35.0624 86.0066 33.224 85.6374 32.2252C85.3464 31.4382 84.4461 31.4304 81.4527 32.1896ZM62.2959 33.6949C62.2959 35.0172 63.5248 36.7022 64.4897 36.7022C65.9582 36.7022 66.5431 34.2981 65.3709 33.081C65.0128 32.7098 64.1747 32.4061 63.5083 32.4061C62.4371 32.4061 62.2959 32.5564 62.2959 33.6949ZM67.2687 34.1829C67.2716 34.9777 67.3883 36.0706 67.5282 36.6119C67.7687 37.5442 67.8225 37.5579 68.5572 36.8676C69.2907 36.1789 69.3325 36.1862 69.3325 37.0055C69.3325 37.7315 69.5667 37.8522 70.7812 37.7521C71.8246 37.6662 72.2299 37.8071 72.2299 38.2565C72.2299 38.7394 72.4099 38.7802 73.0279 38.4374C73.4666 38.1933 74.0946 38.1014 74.4236 38.2324C75.292 38.5783 75.6322 36.3022 74.8909 35.1079C74.2854 34.1322 72.6711 33.5394 69.229 33.0294L67.2629 32.7382L67.2687 34.1829ZM55.0396 37.5829C54.6464 38.2436 55.1849 38.6698 55.7163 38.1182C56.0135 37.8097 56.0206 37.5695 55.7379 37.3883C55.5061 37.2396 55.1919 37.3273 55.0396 37.5829ZM53.6037 39.0904C53.6037 39.4585 53.7929 39.6385 54.0243 39.4903C54.2556 39.3417 54.338 39.0405 54.2068 38.8206C53.8521 38.2247 53.6037 38.3355 53.6037 39.0904ZM56.7081 38.8502C56.5673 39.0865 56.6497 39.2798 56.8906 39.2798C57.1315 39.2798 57.3289 39.0865 57.3289 38.8502C57.3289 38.6139 57.247 38.4206 57.1464 38.4206C57.0458 38.4206 56.8488 38.6139 56.7081 38.8502ZM49.0506 39.9496C49.0506 40.3178 49.2398 40.4978 49.4712 40.3496C49.7026 40.2009 49.7849 39.8997 49.6537 39.6798C49.299 39.0839 49.0506 39.1948 49.0506 39.9496ZM55.1327 39.5543C54.802 39.8976 55.1758 40.5686 55.6977 40.5686C55.9121 40.5686 56.0872 40.2787 56.0872 39.9242C56.0872 39.2601 55.5988 39.0706 55.1327 39.5543ZM51.948 40.139C51.948 40.3753 52.1343 40.5686 52.362 40.5686C52.5896 40.5686 52.7759 40.3753 52.7759 40.139C52.7759 39.9028 52.5896 39.7094 52.362 39.7094C52.1343 39.7094 51.948 39.9028 51.948 40.139ZM63.1883 40.5184C62.728 40.8208 62.7454 41.1121 63.2872 42.1995C64.1196 43.8706 65.5435 44.4055 66.3001 43.3315C67.0307 42.2944 66.9967 42.0109 66.0211 40.9983C65.1449 40.0888 64.108 39.9131 63.1883 40.5184ZM47.395 41.2131C47.395 41.5675 47.5812 41.8575 47.8089 41.8575C48.0365 41.8575 48.2228 41.5675 48.2228 41.2131C48.2228 40.8586 48.0365 40.5686 47.8089 40.5686C47.5812 40.5686 47.395 40.8586 47.395 41.2131ZM50.7063 41.2131C50.7063 41.5675 50.8926 41.8575 51.1202 41.8575C51.3479 41.8575 51.5341 41.5675 51.5341 41.2131C51.5341 40.8586 51.3479 40.5686 51.1202 40.5686C50.8926 40.5686 50.7063 40.8586 50.7063 41.2131ZM67.6913 41.7501C67.7116 43.3555 68.6868 45.1719 69.1296 44.4283C69.3859 43.9982 69.575 44.0403 69.9811 44.6169C70.8002 45.7794 72.727 45.3506 73.0912 43.9248C73.436 42.5754 72.7775 41.8124 70.616 41.0593C68.3142 40.2568 67.6747 40.408 67.6913 41.7501ZM80.6398 41.4304C80.1431 41.6384 78.6062 41.9408 77.225 42.1032C74.9811 42.3666 74.7133 42.501 74.7133 43.3641C74.7133 44.5284 75.7171 45.4976 76.4419 45.0327C76.7295 44.8484 77.6223 44.6598 78.4262 44.6143C79.2296 44.5683 79.9804 44.4798 80.0942 44.4175C80.2081 44.3552 80.4875 44.2672 80.7151 44.222C81.5661 44.0523 83.4056 43.1583 83.4056 42.9139C83.4056 42.7743 83.2127 42.2862 82.9771 41.8291C82.5127 40.9287 82.0347 40.847 80.6398 41.4304ZM52.5466 41.8949C52.3938 42.1518 52.4758 42.5771 52.7291 42.84C53.0673 43.191 53.1898 43.0668 53.1898 42.373C53.1898 41.3355 52.975 41.1757 52.5466 41.8949ZM46.1532 42.5272C46.1532 42.8954 46.3424 43.0754 46.5738 42.9272C46.8052 42.7786 46.8875 42.4774 46.7563 42.2574C46.4016 41.6616 46.1532 41.7724 46.1532 42.5272ZM42.8419 42.9568C42.8419 43.325 43.0311 43.505 43.2625 43.3568C43.4938 43.2082 43.5762 42.907 43.445 42.6871C43.0903 42.0912 42.8419 42.202 42.8419 42.9568ZM26.6992 47.3603C26.6992 47.7878 26.9584 48.5052 27.2754 48.9551C27.7647 49.6497 27.9513 49.6867 28.5172 49.1995C29.4721 48.3768 29.3396 47.6546 28.1285 47.082C26.756 46.4328 26.6992 46.4436 26.6992 47.3603Z\"\n        fill=\"black\"\n        fillOpacity=\"0.2\"\n      />\n      <path\n        d=\"M18.421 9.36485C18.421 9.1204 18.5451 8.79175 18.697 8.63451C18.8485 8.47685 19.0691 8.44806 19.1867 8.57007C19.3042 8.69208 19.1801 9.02073 18.9106 9.30041C18.6138 9.60844 18.421 9.63379 18.421 9.36485Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M18.421 9.36485C18.421 9.1204 18.5451 8.79175 18.697 8.63451C18.8485 8.47685 19.0691 8.44806 19.1867 8.57007C19.3042 8.69208 19.1801 9.02073 18.9106 9.30041C18.6138 9.60844 18.421 9.63379 18.421 9.36485Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M16.9855 15.5804C17.0915 14.2418 17.2947 12.8318 17.4367 12.4473C17.9917 10.9462 17.9723 12.2041 17.3965 15.0396L16.7926 18.0142L16.9855 15.5804Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M16.9855 15.5804C17.0915 14.2418 17.2947 12.8318 17.4367 12.4473C17.9917 10.9462 17.9723 12.2041 17.3965 15.0396L16.7926 18.0142L16.9855 15.5804Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M16.5472 37.0274C15.87 32.3782 15.7839 29.2768 16.2454 26.1295C16.5008 24.3844 16.5997 25.0112 16.8278 29.8284C17.0865 35.2866 18.3659 44.4171 19.2604 47.1842C19.7604 48.7317 19.7629 49.5977 19.2649 48.7153C18.6213 47.5747 17.1825 41.3853 16.5472 37.0274Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M16.5472 37.0274C15.87 32.3782 15.7839 29.2768 16.2454 26.1295C16.5008 24.3844 16.5997 25.0112 16.8278 29.8284C17.0865 35.2866 18.3659 44.4171 19.2604 47.1842C19.7604 48.7317 19.7629 49.5977 19.2649 48.7153C18.6213 47.5747 17.1825 41.3853 16.5472 37.0274Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M19.6047 13.9445C20.0708 12.1633 20.777 10.4818 21.1917 10.1665C21.6027 9.8546 22.498 9.65569 23.181 9.72529C24.6077 9.8705 24.5891 9.67761 23.7973 16.0809C22.9256 23.1282 23.8254 38.983 25.4836 45.7957C26.6276 50.4961 26.6401 50.4497 24.2667 50.4497C22.253 50.4497 22.2464 50.4449 21.4049 48.409C18.512 41.4064 17.4983 22.0014 19.6047 13.9445Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M19.6047 13.9445C20.0708 12.1633 20.777 10.4818 21.1917 10.1665C21.6027 9.8546 22.498 9.65569 23.181 9.72529C24.6077 9.8705 24.5891 9.67761 23.7973 16.0809C22.9256 23.1282 23.8254 38.983 25.4836 45.7957C26.6276 50.4961 26.6401 50.4497 24.2667 50.4497C22.253 50.4497 22.2464 50.4449 21.4049 48.409C18.512 41.4064 17.4983 22.0014 19.6047 13.9445Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M25.311 15.7527C25.1189 15.4301 25.6711 11.7054 26.08 10.5678C26.407 9.65742 27.2448 10.2224 27.6074 11.598C27.8094 12.3652 27.7556 13.3276 27.4695 14.0566C26.9844 15.2935 25.6578 16.3357 25.311 15.7527Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M25.311 15.7527C25.1189 15.4301 25.6711 11.7054 26.08 10.5678C26.407 9.65742 27.2448 10.2224 27.6074 11.598C27.8094 12.3652 27.7556 13.3276 27.4695 14.0566C26.9844 15.2935 25.6578 16.3357 25.311 15.7527Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M27.2754 48.9551C26.9584 48.5052 26.6992 47.7878 26.6992 47.3603C26.6992 46.4436 26.756 46.4328 28.1285 47.082C29.3396 47.6546 29.4721 48.3768 28.5172 49.1995C27.9513 49.6867 27.7647 49.6497 27.2754 48.9551Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M27.2754 48.9551C26.9584 48.5052 26.6992 47.7878 26.6992 47.3603C26.6992 46.4436 26.756 46.4328 28.1285 47.082C29.3396 47.6546 29.4721 48.3768 28.5172 49.1995C27.9513 49.6867 27.7647 49.6497 27.2754 48.9551Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M64.1722 28.11C62.3915 28.11 61.2189 26.8186 61.8634 25.568C62.584 24.1709 65.7831 24.5073 66.2484 26.029C66.6122 27.2185 65.7227 28.11 64.1722 28.11Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M64.1722 28.11C62.3915 28.11 61.2189 26.8186 61.8634 25.568C62.584 24.1709 65.7831 24.5073 66.2484 26.029C66.6122 27.2185 65.7227 28.11 64.1722 28.11Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M68.7306 29.5801C67.7646 29.3284 67.6768 29.1131 67.6768 26.9896C67.6768 24.3943 67.8221 24.3079 70.7812 25.1478C72.9331 25.7587 73.8855 26.6738 73.8855 28.1306C73.8855 29.3404 73.2324 29.8783 71.5055 30.0918C70.9931 30.1549 70.5742 30.0136 70.5742 29.7773C70.5742 29.5414 70.3966 29.462 70.1793 29.6016C69.962 29.7408 69.3101 29.7313 68.7306 29.5801Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M68.7306 29.5801C67.7646 29.3284 67.6768 29.1131 67.6768 26.9896C67.6768 24.3943 67.8221 24.3079 70.7812 25.1478C72.9331 25.7587 73.8855 26.6738 73.8855 28.1306C73.8855 29.3404 73.2324 29.8783 71.5055 30.0918C70.9931 30.1549 70.5742 30.0136 70.5742 29.7773C70.5742 29.5414 70.3966 29.462 70.1793 29.6016C69.962 29.7408 69.3101 29.7313 68.7306 29.5801Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M74.6542 26.0161C74.5697 25.6788 75.6277 24.6194 77.1199 23.5458C78.5574 22.5118 80.0475 21.6667 80.4312 21.6676C81.432 21.6697 83.6883 23.1862 84.2168 24.2117C84.7342 25.2148 84.3526 27.3779 83.7292 26.978C83.5004 26.831 83.1655 26.9586 82.9854 27.2611C82.8054 27.564 82.0467 27.881 81.2996 27.9656C80.5529 28.0507 79.6033 28.4378 79.1902 28.8261C78.4841 29.4895 78.4378 29.4697 78.4224 28.4988C78.4084 27.5923 78.3243 27.6499 77.7387 28.9692C77.2403 30.0913 77.0267 30.2821 76.8963 29.721C76.7121 28.9262 75.9551 28.6672 75.9551 29.3988C75.9551 29.6351 75.7933 29.8284 75.5958 29.8284C75.398 29.8284 75.1384 29.1037 75.0192 28.2174C74.8996 27.3315 74.7353 26.3409 74.6542 26.0161Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M74.6542 26.0161C74.5697 25.6788 75.6277 24.6194 77.1199 23.5458C78.5574 22.5118 80.0475 21.6667 80.4312 21.6676C81.432 21.6697 83.6883 23.1862 84.2168 24.2117C84.7342 25.2148 84.3526 27.3779 83.7292 26.978C83.5004 26.831 83.1655 26.9586 82.9854 27.2611C82.8054 27.564 82.0467 27.881 81.2996 27.9656C80.5529 28.0507 79.6033 28.4378 79.1902 28.8261C78.4841 29.4895 78.4378 29.4697 78.4224 28.4988C78.4084 27.5923 78.3243 27.6499 77.7387 28.9692C77.2403 30.0913 77.0267 30.2821 76.8963 29.721C76.7121 28.9262 75.9551 28.6672 75.9551 29.3988C75.9551 29.6351 75.7933 29.8284 75.5958 29.8284C75.398 29.8284 75.1384 29.1037 75.0192 28.2174C74.8996 27.3315 74.7353 26.3409 74.6542 26.0161Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M73.3627 22.089C72.7928 22.1006 71.2733 18.3377 71.5481 17.5944C71.972 16.4474 72.7688 17.0239 73.8454 19.2566C74.6711 20.9695 74.7415 21.384 74.2593 21.7006C73.9398 21.9107 73.5366 22.0851 73.3627 22.089Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M73.3627 22.089C72.7928 22.1006 71.2733 18.3377 71.5481 17.5944C71.972 16.4474 72.7688 17.0239 73.8454 19.2566C74.6711 20.9695 74.7415 21.384 74.2593 21.7006C73.9398 21.9107 73.5366 22.0851 73.3627 22.089Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M75.0875 16.6996C74.6989 16.4504 74.7705 16.2837 75.3615 16.0607C76.3417 15.6917 76.6778 15.9323 76.0669 16.5664C75.8177 16.825 75.3764 16.8852 75.0875 16.6996Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M75.0875 16.6996C74.6989 16.4504 74.7705 16.2837 75.3615 16.0607C76.3417 15.6917 76.6778 15.9323 76.0669 16.5664C75.8177 16.825 75.3764 16.8852 75.0875 16.6996Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M78.0056 16.9771C77.492 17.9734 76.9547 17.7852 77.3396 16.7438C77.4746 16.3791 77.7834 16.0809 78.0263 16.0809C78.3322 16.0809 78.326 16.3554 78.0056 16.9771Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M78.0056 16.9771C77.492 17.9734 76.9547 17.7852 77.3396 16.7438C77.4746 16.3791 77.7834 16.0809 78.0263 16.0809C78.3322 16.0809 78.326 16.3554 78.0056 16.9771Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M79.0711 15.6513C78.3459 15.6513 77.8885 14.9386 78.2374 14.3526C78.4038 14.0734 79.0541 14.2147 80.021 14.7401C80.8579 15.1946 82.1849 15.8184 82.9693 16.1256C84.9954 16.9195 87.0265 18.906 87.3436 20.4045C87.4926 21.1086 87.4876 22.4641 87.3324 23.4165L87.0505 25.1487L84.8389 22.9774C83.271 21.4386 82.2888 20.8049 81.4643 20.8002C80.8244 20.7963 80.0218 20.606 79.6803 20.377C79.1758 20.0385 79.2292 19.9594 79.9663 19.9539C80.4651 19.9504 80.9883 19.7541 81.129 19.5178C81.2813 19.2622 80.7884 19.0882 79.9117 19.0882C79.1017 19.0882 78.4386 18.8863 78.4386 18.6393C78.4386 18.3587 78.9821 18.296 79.8873 18.4721C80.6841 18.6272 81.336 18.6221 81.336 18.461C81.336 17.9815 80.1919 16.9401 79.6654 16.9401C79.3972 16.9401 79.285 16.6502 79.4163 16.2957C79.5586 15.9108 79.4196 15.6513 79.0711 15.6513Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M79.0711 15.6513C78.3459 15.6513 77.8885 14.9386 78.2374 14.3526C78.4038 14.0734 79.0541 14.2147 80.021 14.7401C80.8579 15.1946 82.1849 15.8184 82.9693 16.1256C84.9954 16.9195 87.0265 18.906 87.3436 20.4045C87.4926 21.1086 87.4876 22.4641 87.3324 23.4165L87.0505 25.1487L84.8389 22.9774C83.271 21.4386 82.2888 20.8049 81.4643 20.8002C80.8244 20.7963 80.0218 20.606 79.6803 20.377C79.1758 20.0385 79.2292 19.9594 79.9663 19.9539C80.4651 19.9504 80.9883 19.7541 81.129 19.5178C81.2813 19.2622 80.7884 19.0882 79.9117 19.0882C79.1017 19.0882 78.4386 18.8863 78.4386 18.6393C78.4386 18.3587 78.9821 18.296 79.8873 18.4721C80.6841 18.6272 81.336 18.6221 81.336 18.461C81.336 17.9815 80.1919 16.9401 79.6654 16.9401C79.3972 16.9401 79.285 16.6502 79.4163 16.2957C79.5586 15.9108 79.4196 15.6513 79.0711 15.6513Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M64.4897 36.7022C63.5248 36.7022 62.2959 35.0172 62.2959 33.6949C62.2959 32.5564 62.4371 32.4061 63.5083 32.4061C64.1747 32.4061 65.0128 32.7098 65.3709 33.081C66.5431 34.2981 65.9582 36.7022 64.4897 36.7022Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M64.4897 36.7022C63.5248 36.7022 62.2959 35.0172 62.2959 33.6949C62.2959 32.5564 62.4371 32.4061 63.5083 32.4061C64.1747 32.4061 65.0128 32.7098 65.3709 33.081C66.5431 34.2981 65.9582 36.7022 64.4897 36.7022Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M63.2872 42.1995C62.7454 41.1121 62.728 40.8208 63.1883 40.5184C64.108 39.9131 65.1449 40.0888 66.0211 40.9983C66.9967 42.0109 67.0307 42.2944 66.3001 43.3315C65.5435 44.4055 64.1196 43.8706 63.2872 42.1995Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M63.2872 42.1995C62.7454 41.1121 62.728 40.8208 63.1883 40.5184C64.108 39.9131 65.1449 40.0888 66.0211 40.9983C66.9967 42.0109 67.0307 42.2944 66.3001 43.3315C65.5435 44.4055 64.1196 43.8706 63.2872 42.1995Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M67.5282 36.6119C67.3883 36.0706 67.2716 34.9777 67.2687 34.1829L67.2629 32.7382L69.229 33.0294C72.6711 33.5394 74.2854 34.1322 74.8909 35.1079C75.6322 36.3022 75.292 38.5783 74.4236 38.2324C74.0946 38.1014 73.4666 38.1933 73.0279 38.4374C72.4099 38.7802 72.2299 38.7394 72.2299 38.2565C72.2299 37.8071 71.8246 37.6662 70.7812 37.7521C69.5667 37.8522 69.3325 37.7315 69.3325 37.0055C69.3325 36.1862 69.2907 36.1789 68.5572 36.8676C67.8225 37.5579 67.7687 37.5442 67.5282 36.6119Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M67.5282 36.6119C67.3883 36.0706 67.2716 34.9777 67.2687 34.1829L67.2629 32.7382L69.229 33.0294C72.6711 33.5394 74.2854 34.1322 74.8909 35.1079C75.6322 36.3022 75.292 38.5783 74.4236 38.2324C74.0946 38.1014 73.4666 38.1933 73.0279 38.4374C72.4099 38.7802 72.2299 38.7394 72.2299 38.2565C72.2299 37.8071 71.8246 37.6662 70.7812 37.7521C69.5667 37.8522 69.3325 37.7315 69.3325 37.0055C69.3325 36.1862 69.2907 36.1789 68.5572 36.8676C67.8225 37.5579 67.7687 37.5442 67.5282 36.6119Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M69.1296 44.4283C68.6868 45.1719 67.7116 43.3555 67.6913 41.7501C67.6747 40.408 68.3142 40.2568 70.616 41.0593C72.7775 41.8124 73.436 42.5754 73.0912 43.9248C72.727 45.3506 70.8002 45.7794 69.9811 44.6169C69.575 44.0403 69.3859 43.9982 69.1296 44.4283Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M69.1296 44.4283C68.6868 45.1719 67.7116 43.3555 67.6913 41.7501C67.6747 40.408 68.3142 40.2568 70.616 41.0593C72.7775 41.8124 73.436 42.5754 73.0912 43.9248C72.727 45.3506 70.8002 45.7794 69.9811 44.6169C69.575 44.0403 69.3859 43.9982 69.1296 44.4283Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M77.225 42.1032C78.6062 41.9408 80.1431 41.6384 80.6398 41.4304C82.0347 40.847 82.5127 40.9287 82.9771 41.8291C83.2127 42.2862 83.4056 42.7743 83.4056 42.9139C83.4056 43.1583 81.5661 44.0523 80.7151 44.222C80.4875 44.2672 80.2081 44.3552 80.0942 44.4175C79.9804 44.4798 79.2296 44.5683 78.4262 44.6143C77.6223 44.6598 76.7295 44.8484 76.4419 45.0327C75.7171 45.4976 74.7133 44.5284 74.7133 43.3641C74.7133 42.501 74.9811 42.3666 77.225 42.1032Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M77.225 42.1032C78.6062 41.9408 80.1431 41.6384 80.6398 41.4304C82.0347 40.847 82.5127 40.9287 82.9771 41.8291C83.2127 42.2862 83.4056 42.7743 83.4056 42.9139C83.4056 43.1583 81.5661 44.0523 80.7151 44.222C80.4875 44.2672 80.2081 44.3552 80.0942 44.4175C79.9804 44.4798 79.2296 44.5683 78.4262 44.6143C77.6223 44.6598 76.7295 44.8484 76.4419 45.0327C75.7171 45.4976 74.7133 44.5284 74.7133 43.3641C74.7133 42.501 74.9811 42.3666 77.225 42.1032Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M76.2655 34.7036C76.0971 34.2474 79.1261 32.7794 81.4527 32.1896C84.4461 31.4304 85.3464 31.4382 85.6374 32.2252C86.0066 33.224 85.4859 35.0624 84.5206 36.1652C83.6883 37.1167 82.9449 37.4407 83.0405 36.8096C83.2073 35.7132 82.8778 35.8167 82.1262 37.0965C81.5057 38.153 81.1708 38.4086 80.932 38.0082C80.7255 37.6606 80.3885 37.5893 80.0371 37.8179C79.7271 38.0194 79.1476 38.1289 78.749 38.0606C78.3504 37.9927 78.0247 38.1426 78.0247 38.3935C78.0247 38.6449 77.8558 38.8502 77.6497 38.8502C77.4431 38.8502 77.3719 38.4636 77.4907 37.991C77.6099 37.5184 77.5131 37.1318 77.2755 37.1318C77.0379 37.1318 76.7585 37.4699 76.6542 37.8836C76.5503 38.2973 76.4435 37.814 76.417 36.8096C76.3905 35.8051 76.3222 34.8579 76.2655 34.7036Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M76.2655 34.7036C76.0971 34.2474 79.1261 32.7794 81.4527 32.1896C84.4461 31.4304 85.3464 31.4382 85.6374 32.2252C86.0066 33.224 85.4859 35.0624 84.5206 36.1652C83.6883 37.1167 82.9449 37.4407 83.0405 36.8096C83.2073 35.7132 82.8778 35.8167 82.1262 37.0965C81.5057 38.153 81.1708 38.4086 80.932 38.0082C80.7255 37.6606 80.3885 37.5893 80.0371 37.8179C79.7271 38.0194 79.1476 38.1289 78.749 38.0606C78.3504 37.9927 78.0247 38.1426 78.0247 38.3935C78.0247 38.6449 77.8558 38.8502 77.6497 38.8502C77.4431 38.8502 77.3719 38.4636 77.4907 37.991C77.6099 37.5184 77.5131 37.1318 77.2755 37.1318C77.0379 37.1318 76.7585 37.4699 76.6542 37.8836C76.5503 38.2973 76.4435 37.814 76.417 36.8096C76.3905 35.8051 76.3222 34.8579 76.2655 34.7036Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M64.9864 2.32613C67.9458 2.26599 72.6024 2.08512 75.3342 1.92402C78.0661 1.76248 80.5806 1.72855 80.9221 1.84755C81.8211 2.16202 98.328 2.90911 102.289 2.81503C104.138 2.77078 106.56 2.94563 107.67 3.2034C109.83 3.70432 111.966 5.43521 111.966 6.68452C111.966 7.84532 111.233 8.04724 110.709 7.03078L110.239 6.11915L109.293 7.04195C108.485 7.83029 108.31 7.86723 108.099 7.29714C107.735 6.31291 106.999 6.48561 106.999 7.55533C106.999 8.45107 106.972 8.45623 106.179 7.71085C105.564 7.13389 105.221 7.05957 104.809 7.41399C104.394 7.771 104.089 7.68035 103.564 7.04367C102.79 6.10669 101.23 5.81585 101.917 6.73693C102.137 7.0325 102.435 7.66059 102.58 8.13316C102.81 8.88626 102.76 8.87295 102.179 8.02576C101.815 7.49433 101.248 7.05914 100.919 7.05914C100.489 7.05914 100.401 7.33194 100.607 8.02576C100.89 8.98336 100.882 8.9825 99.7068 7.91836C99.0544 7.32764 98.4 6.67464 98.2527 6.46714C98.1057 6.25963 97.7688 6.22827 97.5047 6.39797C97.1463 6.62781 97.1608 6.88085 97.5619 7.39466C98.0163 7.97635 98.0031 8.02447 97.4787 7.70484C97.1372 7.49691 96.6123 6.97321 96.3123 6.54103C95.4964 5.36734 94.8226 6.07748 95.5937 7.29843C96.645 8.96445 96.3317 9.04135 94.7944 7.49519C93.2853 5.97695 92.5415 5.94129 93.306 7.42387C94.0705 8.90646 93.8039 8.98851 92.4831 7.67648C91.3271 6.52814 91.1768 6.48217 90.8072 7.16654C90.3097 8.08762 89.6143 8.15034 89.6143 7.27394C89.6143 6.91951 89.3349 6.62953 88.9934 6.62953C88.6519 6.62953 88.3725 6.33954 88.3725 5.98511C88.3725 5.63069 88.1863 5.3407 87.9586 5.3407C87.731 5.3407 87.5447 5.52243 87.5447 5.74496C87.5447 5.9675 87.731 6.26866 87.9586 6.41472C88.1863 6.56079 88.3725 6.96849 88.3725 7.3212C88.3725 7.79205 87.9851 7.65544 86.9127 6.8061C85.3501 5.56925 84.5653 5.7063 85.3874 7.07288C86.2289 8.47169 85.9511 8.5705 84.6937 7.32034L83.4987 6.13161L82.8083 7.1326L82.1175 8.13316L82.3766 6.84433L82.6353 5.5555L81.8116 6.52771C81.3583 7.06257 80.9097 7.73921 80.8149 8.03134C80.6783 8.45279 80.514 8.45236 80.0202 8.02963C79.6774 7.7362 79.2747 7.62322 79.1249 7.77873C78.975 7.93425 78.8525 7.73921 78.8525 7.34569C78.8525 6.63339 77.8376 6.33653 77.506 6.95174C77.4108 7.12873 77.3868 7.03851 77.4535 6.75068C77.6923 5.7179 76.6542 5.6672 75.9075 6.67507L75.1455 7.70355L75.1364 6.73693C75.1256 5.58386 74.5064 5.47474 73.9186 6.52213C73.5631 7.15623 73.4948 7.07503 73.484 6.0066C73.4749 5.0606 73.3524 4.86297 73.0014 5.22728C72.6508 5.59116 72.383 5.56066 71.9455 5.10699C71.544 4.69027 70.7481 4.55967 69.4148 4.69199C65.3974 5.0911 61.7727 4.67223 58.1568 3.39156L57.122 3.02511L58.3637 2.72996C59.0467 2.568 62.0269 2.38585 64.9864 2.32613Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M64.9864 2.32613C67.9458 2.26599 72.6024 2.08512 75.3342 1.92402C78.0661 1.76248 80.5806 1.72855 80.9221 1.84755C81.8211 2.16202 98.328 2.90911 102.289 2.81503C104.138 2.77078 106.56 2.94563 107.67 3.2034C109.83 3.70432 111.966 5.43521 111.966 6.68452C111.966 7.84532 111.233 8.04724 110.709 7.03078L110.239 6.11915L109.293 7.04195C108.485 7.83029 108.31 7.86723 108.099 7.29714C107.735 6.31291 106.999 6.48561 106.999 7.55533C106.999 8.45107 106.972 8.45623 106.179 7.71085C105.564 7.13389 105.221 7.05957 104.809 7.41399C104.394 7.771 104.089 7.68035 103.564 7.04367C102.79 6.10669 101.23 5.81585 101.917 6.73693C102.137 7.0325 102.435 7.66059 102.58 8.13316C102.81 8.88626 102.76 8.87295 102.179 8.02576C101.815 7.49433 101.248 7.05914 100.919 7.05914C100.489 7.05914 100.401 7.33194 100.607 8.02576C100.89 8.98336 100.882 8.9825 99.7068 7.91836C99.0544 7.32764 98.4 6.67464 98.2527 6.46714C98.1057 6.25963 97.7688 6.22827 97.5047 6.39797C97.1463 6.62781 97.1608 6.88085 97.5619 7.39466C98.0163 7.97635 98.0031 8.02447 97.4787 7.70484C97.1372 7.49691 96.6123 6.97321 96.3123 6.54103C95.4964 5.36734 94.8226 6.07748 95.5937 7.29843C96.645 8.96445 96.3317 9.04135 94.7944 7.49519C93.2853 5.97695 92.5415 5.94129 93.306 7.42387C94.0705 8.90646 93.8039 8.98851 92.4831 7.67648C91.3271 6.52814 91.1768 6.48217 90.8072 7.16654C90.3097 8.08762 89.6143 8.15034 89.6143 7.27394C89.6143 6.91951 89.3349 6.62953 88.9934 6.62953C88.6519 6.62953 88.3725 6.33954 88.3725 5.98511C88.3725 5.63069 88.1863 5.3407 87.9586 5.3407C87.731 5.3407 87.5447 5.52243 87.5447 5.74496C87.5447 5.9675 87.731 6.26866 87.9586 6.41472C88.1863 6.56079 88.3725 6.96849 88.3725 7.3212C88.3725 7.79205 87.9851 7.65544 86.9127 6.8061C85.3501 5.56925 84.5653 5.7063 85.3874 7.07288C86.2289 8.47169 85.9511 8.5705 84.6937 7.32034L83.4987 6.13161L82.8083 7.1326L82.1175 8.13316L82.3766 6.84433L82.6353 5.5555L81.8116 6.52771C81.3583 7.06257 80.9097 7.73921 80.8149 8.03134C80.6783 8.45279 80.514 8.45236 80.0202 8.02963C79.6774 7.7362 79.2747 7.62322 79.1249 7.77873C78.975 7.93425 78.8525 7.73921 78.8525 7.34569C78.8525 6.63339 77.8376 6.33653 77.506 6.95174C77.4108 7.12873 77.3868 7.03851 77.4535 6.75068C77.6923 5.7179 76.6542 5.6672 75.9075 6.67507L75.1455 7.70355L75.1364 6.73693C75.1256 5.58386 74.5064 5.47474 73.9186 6.52213C73.5631 7.15623 73.4948 7.07503 73.484 6.0066C73.4749 5.0606 73.3524 4.86297 73.0014 5.22728C72.6508 5.59116 72.383 5.56066 71.9455 5.10699C71.544 4.69027 70.7481 4.55967 69.4148 4.69199C65.3974 5.0911 61.7727 4.67223 58.1568 3.39156L57.122 3.02511L58.3637 2.72996C59.0467 2.568 62.0269 2.38585 64.9864 2.32613Z\"\n        fill=\"black\"\n        fillOpacity=\"0.2\"\n      />\n      <path\n        d=\"M64.9864 2.32613C67.9458 2.26599 72.6024 2.08512 75.3342 1.92402C78.0661 1.76248 80.5806 1.72855 80.9221 1.84755C81.8211 2.16202 98.328 2.90911 102.289 2.81503C104.138 2.77078 106.56 2.94563 107.67 3.2034C109.83 3.70432 111.966 5.43521 111.966 6.68452C111.966 7.84532 111.233 8.04724 110.709 7.03078L110.239 6.11915L109.293 7.04195C108.485 7.83029 108.31 7.86723 108.099 7.29714C107.735 6.31291 106.999 6.48561 106.999 7.55533C106.999 8.45107 106.972 8.45623 106.179 7.71085C105.564 7.13389 105.221 7.05957 104.809 7.41399C104.394 7.771 104.089 7.68035 103.564 7.04367C102.79 6.10669 101.23 5.81585 101.917 6.73693C102.137 7.0325 102.435 7.66059 102.58 8.13316C102.81 8.88626 102.76 8.87295 102.179 8.02576C101.815 7.49433 101.248 7.05914 100.919 7.05914C100.489 7.05914 100.401 7.33194 100.607 8.02576C100.89 8.98336 100.882 8.9825 99.7068 7.91836C99.0544 7.32764 98.4 6.67464 98.2527 6.46714C98.1057 6.25963 97.7688 6.22827 97.5047 6.39797C97.1463 6.62781 97.1608 6.88085 97.5619 7.39466C98.0163 7.97635 98.0031 8.02447 97.4787 7.70484C97.1372 7.49691 96.6123 6.97321 96.3123 6.54103C95.4964 5.36734 94.8226 6.07748 95.5937 7.29843C96.645 8.96445 96.3317 9.04135 94.7944 7.49519C93.2853 5.97695 92.5415 5.94129 93.306 7.42387C94.0705 8.90646 93.8039 8.98851 92.4831 7.67648C91.3271 6.52814 91.1768 6.48217 90.8072 7.16654C90.3097 8.08762 89.6143 8.15034 89.6143 7.27394C89.6143 6.91951 89.3349 6.62953 88.9934 6.62953C88.6519 6.62953 88.3725 6.33954 88.3725 5.98511C88.3725 5.63069 88.1863 5.3407 87.9586 5.3407C87.731 5.3407 87.5447 5.52243 87.5447 5.74496C87.5447 5.9675 87.731 6.26866 87.9586 6.41472C88.1863 6.56079 88.3725 6.96849 88.3725 7.3212C88.3725 7.79205 87.9851 7.65544 86.9127 6.8061C85.3501 5.56925 84.5653 5.7063 85.3874 7.07288C86.2289 8.47169 85.9511 8.5705 84.6937 7.32034L83.4987 6.13161L82.8083 7.1326L82.1175 8.13316L82.3766 6.84433L82.6353 5.5555L81.8116 6.52771C81.3583 7.06257 80.9097 7.73921 80.8149 8.03134C80.6783 8.45279 80.514 8.45236 80.0202 8.02963C79.6774 7.7362 79.2747 7.62322 79.1249 7.77873C78.975 7.93425 78.8525 7.73921 78.8525 7.34569C78.8525 6.63339 77.8376 6.33653 77.506 6.95174C77.4108 7.12873 77.3868 7.03851 77.4535 6.75068C77.6923 5.7179 76.6542 5.6672 75.9075 6.67507L75.1455 7.70355L75.1364 6.73693C75.1256 5.58386 74.5064 5.47474 73.9186 6.52213C73.5631 7.15623 73.4948 7.07503 73.484 6.0066C73.4749 5.0606 73.3524 4.86297 73.0014 5.22728C72.6508 5.59116 72.383 5.56066 71.9455 5.10699C71.544 4.69027 70.7481 4.55967 69.4148 4.69199C65.3974 5.0911 61.7727 4.67223 58.1568 3.39156L57.122 3.02511L58.3637 2.72996C59.0467 2.568 62.0269 2.38585 64.9864 2.32613Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M64.9864 2.32613C67.9458 2.26599 72.6024 2.08512 75.3342 1.92402C78.0661 1.76248 80.5806 1.72855 80.9221 1.84755C81.8211 2.16202 98.328 2.90911 102.289 2.81503C104.138 2.77078 106.56 2.94563 107.67 3.2034C109.83 3.70432 111.966 5.43521 111.966 6.68452C111.966 7.84532 111.233 8.04724 110.709 7.03078L110.239 6.11915L109.293 7.04195C108.485 7.83029 108.31 7.86723 108.099 7.29714C107.735 6.31291 106.999 6.48561 106.999 7.55533C106.999 8.45107 106.972 8.45623 106.179 7.71085C105.564 7.13389 105.221 7.05957 104.809 7.41399C104.394 7.771 104.089 7.68035 103.564 7.04367C102.79 6.10669 101.23 5.81585 101.917 6.73693C102.137 7.0325 102.435 7.66059 102.58 8.13316C102.81 8.88626 102.76 8.87295 102.179 8.02576C101.815 7.49433 101.248 7.05914 100.919 7.05914C100.489 7.05914 100.401 7.33194 100.607 8.02576C100.89 8.98336 100.882 8.9825 99.7068 7.91836C99.0544 7.32764 98.4 6.67464 98.2527 6.46714C98.1057 6.25963 97.7688 6.22827 97.5047 6.39797C97.1463 6.62781 97.1608 6.88085 97.5619 7.39466C98.0163 7.97635 98.0031 8.02447 97.4787 7.70484C97.1372 7.49691 96.6123 6.97321 96.3123 6.54103C95.4964 5.36734 94.8226 6.07748 95.5937 7.29843C96.645 8.96445 96.3317 9.04135 94.7944 7.49519C93.2853 5.97695 92.5415 5.94129 93.306 7.42387C94.0705 8.90646 93.8039 8.98851 92.4831 7.67648C91.3271 6.52814 91.1768 6.48217 90.8072 7.16654C90.3097 8.08762 89.6143 8.15034 89.6143 7.27394C89.6143 6.91951 89.3349 6.62953 88.9934 6.62953C88.6519 6.62953 88.3725 6.33954 88.3725 5.98511C88.3725 5.63069 88.1863 5.3407 87.9586 5.3407C87.731 5.3407 87.5447 5.52243 87.5447 5.74496C87.5447 5.9675 87.731 6.26866 87.9586 6.41472C88.1863 6.56079 88.3725 6.96849 88.3725 7.3212C88.3725 7.79205 87.9851 7.65544 86.9127 6.8061C85.3501 5.56925 84.5653 5.7063 85.3874 7.07288C86.2289 8.47169 85.9511 8.5705 84.6937 7.32034L83.4987 6.13161L82.8083 7.1326L82.1175 8.13316L82.3766 6.84433L82.6353 5.5555L81.8116 6.52771C81.3583 7.06257 80.9097 7.73921 80.8149 8.03134C80.6783 8.45279 80.514 8.45236 80.0202 8.02963C79.6774 7.7362 79.2747 7.62322 79.1249 7.77873C78.975 7.93425 78.8525 7.73921 78.8525 7.34569C78.8525 6.63339 77.8376 6.33653 77.506 6.95174C77.4108 7.12873 77.3868 7.03851 77.4535 6.75068C77.6923 5.7179 76.6542 5.6672 75.9075 6.67507L75.1455 7.70355L75.1364 6.73693C75.1256 5.58386 74.5064 5.47474 73.9186 6.52213C73.5631 7.15623 73.4948 7.07503 73.484 6.0066C73.4749 5.0606 73.3524 4.86297 73.0014 5.22728C72.6508 5.59116 72.383 5.56066 71.9455 5.10699C71.544 4.69027 70.7481 4.55967 69.4148 4.69199C65.3974 5.0911 61.7727 4.67223 58.1568 3.39156L57.122 3.02511L58.3637 2.72996C59.0467 2.568 62.0269 2.38585 64.9864 2.32613Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M49.6413 5.31922C50.9907 5.08981 52.1856 4.80755 52.2974 4.69199C52.9091 4.0566 57.3302 5.02408 62.7098 6.97064C66.1014 8.1976 69.349 10.902 70.8085 13.7146C71.5606 15.1641 71.5622 15.2758 70.8586 16.6317C70.1789 17.942 70.174 18.1577 70.789 19.6853C71.5808 21.653 71.4045 21.9687 70.0328 21.036C69.3056 20.5416 69.0626 20.0613 69.2 19.3906C69.3747 18.5374 69.3378 18.5142 68.83 19.1535C68.3167 19.7992 68.1453 19.7322 66.9363 18.4133C66.2053 17.6159 65.6072 16.6622 65.6072 16.294C65.6072 15.9258 65.3278 15.513 64.9864 15.3772C64.6449 15.241 64.3655 14.6585 64.3655 14.0828C64.3655 13.3984 64.1585 13.0797 63.7678 13.1622C63.4387 13.2318 62.8862 12.9018 62.5393 12.4293C61.935 11.6065 61.906 11.634 61.851 13.0737L61.7938 14.5773L61.3443 13.3959C60.8476 12.092 60.2263 11.8231 60.2263 12.9113C60.2263 13.4822 60.1142 13.5119 59.6055 13.0737C59.0968 12.6355 58.9846 12.6651 58.9846 13.2361C58.9846 14.1404 58.5922 14.1206 57.9051 13.1811C57.3894 12.4761 57.3538 12.4825 57.3331 13.2885C57.3124 14.079 57.2457 14.0618 56.5011 13.0737C55.7573 12.0869 55.6902 12.0692 55.6733 12.8589C55.6563 13.6485 55.5893 13.6309 54.8455 12.6441L54.0358 11.57L54.0023 12.8589C53.9725 14.0149 53.9183 14.0665 53.4758 13.3585C53.2047 12.9246 52.7374 12.248 52.4373 11.8549C51.9596 11.2294 51.922 11.2873 52.1347 12.3218C52.4298 13.7559 52.1219 13.8212 51.1186 12.5367C50.2237 11.3909 49.6115 11.7535 50.2733 13.0367C50.775 14.0098 50.3425 14.2426 49.5544 13.4247C48.5287 12.3601 48.5842 13.5295 49.6202 14.8067C50.9249 16.4165 51.0366 17.1537 49.8785 16.5105C49.3172 16.1986 49.0506 16.1939 49.0506 16.4955C49.0506 16.7399 48.7712 16.9401 48.4298 16.9401C47.5825 16.9401 47.65 17.3534 48.6839 18.4962L49.5593 19.4632L48.6839 19.2257C47.9132 19.0165 47.8089 19.1715 47.8089 20.5282C47.8089 21.6744 47.6603 22.0091 47.2273 21.8368C46.8354 21.6809 46.5564 22.0276 46.3718 22.8997C46.176 23.8242 45.9181 24.1228 45.4686 23.9441C45.0299 23.7692 44.8651 23.9385 44.9235 24.5056C45.176 26.9608 45.0423 27.0587 42.635 26.1905C41.8609 25.9112 41.8543 25.9323 42.5315 26.5114C43.6271 27.4484 43.4053 27.7822 41.9106 27.4462L40.5654 27.1434L41.3539 28.0563C42.0385 28.8489 42.0538 28.9692 41.4702 28.9692C41.0298 28.9692 40.8841 29.2016 41.0476 29.6437C41.2579 30.2121 41.0435 30.2748 39.6895 30.0424L38.0819 29.7661L39.1101 30.6266L40.1386 31.4876L38.2822 31.6246C36.6717 31.7436 36.4304 31.8871 36.4573 32.7111C36.4978 33.9492 35.3865 34.4128 35.1005 33.2773C34.9279 32.5921 34.7342 32.5109 34.1042 32.861C32.1753 33.9325 34.324 34.9837 38.4424 34.9837C44.2658 34.9837 51.6078 31.8592 55.6547 27.6585C56.7817 26.4891 57.8848 25.5323 58.1067 25.5323C58.3285 25.5323 58.6042 27.2241 58.7197 29.2914C58.8352 31.3591 58.9527 33.3993 58.9813 33.8255C59.0094 34.2517 59.2925 34.7036 59.61 34.8304C60.0686 35.0129 60.0873 35.2269 59.699 35.8717C59.2288 36.6532 59.1924 36.6476 58.7139 35.7261C58.2805 34.8922 58.182 34.8617 57.9469 35.4894C57.5636 36.5136 57.8571 38.1066 58.4672 38.3154C58.752 38.4124 58.9846 38.1749 58.9846 37.7865C58.9846 37.3986 59.1709 37.2005 59.3985 37.3466C59.6262 37.4926 59.8124 38.0726 59.8124 38.6354C59.8124 39.758 60.4316 40.4076 60.8431 39.7163C61.1688 39.169 61.882 39.1445 61.882 39.6806C61.882 39.901 61.5095 40.2039 61.0542 40.3538C60.0931 40.6705 59.9296 41.8575 60.8472 41.8575C61.1887 41.8575 61.4681 42.065 61.4681 42.3185C61.4681 43.3873 59.9817 42.3709 59.557 41.012C59.3029 40.1983 58.8836 39.4598 58.6257 39.3705C58.0127 39.1582 58.04 39.5406 58.8 41.8051C59.5873 44.152 59.2636 44.6422 58.3049 42.5552C57.9113 41.6989 57.4378 40.9983 57.2524 40.9983C56.8062 40.9983 56.8269 41.2951 57.3521 42.4228C57.7871 43.3555 57.7851 43.3555 56.9755 42.3945C56.5276 41.8626 56.0516 41.4279 55.9175 41.4279C55.783 41.4279 55.658 41.8626 55.6393 42.3945C55.6108 43.2176 55.5185 43.1536 55.0176 41.9649C54.1646 39.9406 53.8707 40.2477 54.1952 42.8241C54.4551 44.8858 54.4266 45.0057 53.8632 44.2203C53.2552 43.3727 53.2419 43.3753 52.8711 44.4055C52.4998 45.4374 52.4923 45.4335 52.232 44.0833C52.0871 43.3315 51.7543 42.7167 51.4927 42.7167C51.1827 42.7167 51.1049 43.1738 51.2692 44.027C51.4195 44.8063 51.3632 45.2355 51.1301 45.086C50.9145 44.9477 50.6169 44.1628 50.4683 43.3414C50.3201 42.5199 50.0461 41.7505 49.8603 41.6311C49.27 41.2522 48.9952 42.236 49.4463 43.1115C49.7092 43.6206 49.7282 44.0511 49.4956 44.2006C49.2837 44.3363 48.991 44.0584 48.8458 43.5824C48.489 42.4164 47.8106 42.4821 47.8027 43.6833C47.7973 44.4837 47.7207 44.5391 47.3573 44.0055C47.0266 43.5205 46.866 43.4939 46.7083 43.8981C46.3933 44.7032 45.8287 44.5455 45.5303 43.5695C45.2066 42.5113 44.4976 42.8641 44.4976 44.0833C44.4976 44.7762 44.3763 44.8656 43.9421 44.4914C43.6366 44.2285 43.262 44.1421 43.1101 44.3002C42.9578 44.4579 42.5617 44.2147 42.2297 43.7594C41.6569 42.9732 41.6258 42.9951 41.6134 44.195C41.6006 45.4103 41.5758 45.4267 40.9532 44.6246C40.4404 43.9634 40.2574 43.9153 40.0699 44.3926C39.8948 44.839 39.6796 44.7273 39.2396 43.963C38.913 43.3959 38.7458 43.2696 38.8683 43.6833C38.9904 44.097 38.9846 44.7221 38.8547 45.0735C38.6639 45.5891 38.471 45.5276 37.8468 44.7513C37.1034 43.8264 37.0728 43.8225 37.0272 44.6499C36.9912 45.2991 36.836 45.168 36.3915 44.1129C35.6203 42.2832 35.23 42.3343 35.5711 44.2203C35.9105 46.0977 35.622 46.1334 34.6986 44.3277C34.0988 43.1553 33.9572 43.0647 33.8153 43.7615C33.6572 44.5365 33.5918 44.5223 32.8289 43.5467L32.0118 42.5019L32.2457 44.0055C32.463 45.4039 32.4365 45.4507 31.8657 44.6753C31.5284 44.2165 31.2523 43.685 31.2523 43.4939C31.2523 42.6497 30.4212 43.2468 30.3905 44.1129C30.362 44.93 30.2647 44.8609 29.761 43.6636C29.1633 42.2441 28.2142 42.0968 28.5929 43.4823C28.7038 43.8882 28.5784 43.7954 28.3143 43.2765C28.0498 42.7571 27.4426 42.2738 26.9641 42.2024C26.2799 42.0998 25.984 41.5692 25.5755 39.7094C24.8958 36.6171 24.4289 26.8362 24.8097 23.6726C25.0796 21.4313 25.3246 20.9548 27.2907 18.848C28.4903 17.5626 29.6861 16.5105 29.9481 16.5105C30.2101 16.5105 30.4245 16.3172 30.4245 16.0809C30.4245 15.8446 30.7097 15.6513 31.0582 15.6513C31.4071 15.6513 31.7995 15.3613 31.9303 15.0069C32.0615 14.6525 32.5015 14.3625 32.908 14.3625C33.3144 14.3625 33.7557 14.0695 33.8877 13.7116C34.0202 13.3538 34.5524 12.8653 35.0703 12.6264C36.0285 12.1852 36.6377 11.7414 40.9023 8.38105C43.3059 6.4869 43.8117 6.3099 49.6413 5.31922Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M49.6413 5.31922C50.9907 5.08981 52.1856 4.80755 52.2974 4.69199C52.9091 4.0566 57.3302 5.02408 62.7098 6.97064C66.1014 8.1976 69.349 10.902 70.8085 13.7146C71.5606 15.1641 71.5622 15.2758 70.8586 16.6317C70.1789 17.942 70.174 18.1577 70.789 19.6853C71.5808 21.653 71.4045 21.9687 70.0328 21.036C69.3056 20.5416 69.0626 20.0613 69.2 19.3906C69.3747 18.5374 69.3378 18.5142 68.83 19.1535C68.3167 19.7992 68.1453 19.7322 66.9363 18.4133C66.2053 17.6159 65.6072 16.6622 65.6072 16.294C65.6072 15.9258 65.3278 15.513 64.9864 15.3772C64.6449 15.241 64.3655 14.6585 64.3655 14.0828C64.3655 13.3984 64.1585 13.0797 63.7678 13.1622C63.4387 13.2318 62.8862 12.9018 62.5393 12.4293C61.935 11.6065 61.906 11.634 61.851 13.0737L61.7938 14.5773L61.3443 13.3959C60.8476 12.092 60.2263 11.8231 60.2263 12.9113C60.2263 13.4822 60.1142 13.5119 59.6055 13.0737C59.0968 12.6355 58.9846 12.6651 58.9846 13.2361C58.9846 14.1404 58.5922 14.1206 57.9051 13.1811C57.3894 12.4761 57.3538 12.4825 57.3331 13.2885C57.3124 14.079 57.2457 14.0618 56.5011 13.0737C55.7573 12.0869 55.6902 12.0692 55.6733 12.8589C55.6563 13.6485 55.5893 13.6309 54.8455 12.6441L54.0358 11.57L54.0023 12.8589C53.9725 14.0149 53.9183 14.0665 53.4758 13.3585C53.2047 12.9246 52.7374 12.248 52.4373 11.8549C51.9596 11.2294 51.922 11.2873 52.1347 12.3218C52.4298 13.7559 52.1219 13.8212 51.1186 12.5367C50.2237 11.3909 49.6115 11.7535 50.2733 13.0367C50.775 14.0098 50.3425 14.2426 49.5544 13.4247C48.5287 12.3601 48.5842 13.5295 49.6202 14.8067C50.9249 16.4165 51.0366 17.1537 49.8785 16.5105C49.3172 16.1986 49.0506 16.1939 49.0506 16.4955C49.0506 16.7399 48.7712 16.9401 48.4298 16.9401C47.5825 16.9401 47.65 17.3534 48.6839 18.4962L49.5593 19.4632L48.6839 19.2257C47.9132 19.0165 47.8089 19.1715 47.8089 20.5282C47.8089 21.6744 47.6603 22.0091 47.2273 21.8368C46.8354 21.6809 46.5564 22.0276 46.3718 22.8997C46.176 23.8242 45.9181 24.1228 45.4686 23.9441C45.0299 23.7692 44.8651 23.9385 44.9235 24.5056C45.176 26.9608 45.0423 27.0587 42.635 26.1905C41.8609 25.9112 41.8543 25.9323 42.5315 26.5114C43.6271 27.4484 43.4053 27.7822 41.9106 27.4462L40.5654 27.1434L41.3539 28.0563C42.0385 28.8489 42.0538 28.9692 41.4702 28.9692C41.0298 28.9692 40.8841 29.2016 41.0476 29.6437C41.2579 30.2121 41.0435 30.2748 39.6895 30.0424L38.0819 29.7661L39.1101 30.6266L40.1386 31.4876L38.2822 31.6246C36.6717 31.7436 36.4304 31.8871 36.4573 32.7111C36.4978 33.9492 35.3865 34.4128 35.1005 33.2773C34.9279 32.5921 34.7342 32.5109 34.1042 32.861C32.1753 33.9325 34.324 34.9837 38.4424 34.9837C44.2658 34.9837 51.6078 31.8592 55.6547 27.6585C56.7817 26.4891 57.8848 25.5323 58.1067 25.5323C58.3285 25.5323 58.6042 27.2241 58.7197 29.2914C58.8352 31.3591 58.9527 33.3993 58.9813 33.8255C59.0094 34.2517 59.2925 34.7036 59.61 34.8304C60.0686 35.0129 60.0873 35.2269 59.699 35.8717C59.2288 36.6532 59.1924 36.6476 58.7139 35.7261C58.2805 34.8922 58.182 34.8617 57.9469 35.4894C57.5636 36.5136 57.8571 38.1066 58.4672 38.3154C58.752 38.4124 58.9846 38.1749 58.9846 37.7865C58.9846 37.3986 59.1709 37.2005 59.3985 37.3466C59.6262 37.4926 59.8124 38.0726 59.8124 38.6354C59.8124 39.758 60.4316 40.4076 60.8431 39.7163C61.1688 39.169 61.882 39.1445 61.882 39.6806C61.882 39.901 61.5095 40.2039 61.0542 40.3538C60.0931 40.6705 59.9296 41.8575 60.8472 41.8575C61.1887 41.8575 61.4681 42.065 61.4681 42.3185C61.4681 43.3873 59.9817 42.3709 59.557 41.012C59.3029 40.1983 58.8836 39.4598 58.6257 39.3705C58.0127 39.1582 58.04 39.5406 58.8 41.8051C59.5873 44.152 59.2636 44.6422 58.3049 42.5552C57.9113 41.6989 57.4378 40.9983 57.2524 40.9983C56.8062 40.9983 56.8269 41.2951 57.3521 42.4228C57.7871 43.3555 57.7851 43.3555 56.9755 42.3945C56.5276 41.8626 56.0516 41.4279 55.9175 41.4279C55.783 41.4279 55.658 41.8626 55.6393 42.3945C55.6108 43.2176 55.5185 43.1536 55.0176 41.9649C54.1646 39.9406 53.8707 40.2477 54.1952 42.8241C54.4551 44.8858 54.4266 45.0057 53.8632 44.2203C53.2552 43.3727 53.2419 43.3753 52.8711 44.4055C52.4998 45.4374 52.4923 45.4335 52.232 44.0833C52.0871 43.3315 51.7543 42.7167 51.4927 42.7167C51.1827 42.7167 51.1049 43.1738 51.2692 44.027C51.4195 44.8063 51.3632 45.2355 51.1301 45.086C50.9145 44.9477 50.6169 44.1628 50.4683 43.3414C50.3201 42.5199 50.0461 41.7505 49.8603 41.6311C49.27 41.2522 48.9952 42.236 49.4463 43.1115C49.7092 43.6206 49.7282 44.0511 49.4956 44.2006C49.2837 44.3363 48.991 44.0584 48.8458 43.5824C48.489 42.4164 47.8106 42.4821 47.8027 43.6833C47.7973 44.4837 47.7207 44.5391 47.3573 44.0055C47.0266 43.5205 46.866 43.4939 46.7083 43.8981C46.3933 44.7032 45.8287 44.5455 45.5303 43.5695C45.2066 42.5113 44.4976 42.8641 44.4976 44.0833C44.4976 44.7762 44.3763 44.8656 43.9421 44.4914C43.6366 44.2285 43.262 44.1421 43.1101 44.3002C42.9578 44.4579 42.5617 44.2147 42.2297 43.7594C41.6569 42.9732 41.6258 42.9951 41.6134 44.195C41.6006 45.4103 41.5758 45.4267 40.9532 44.6246C40.4404 43.9634 40.2574 43.9153 40.0699 44.3926C39.8948 44.839 39.6796 44.7273 39.2396 43.963C38.913 43.3959 38.7458 43.2696 38.8683 43.6833C38.9904 44.097 38.9846 44.7221 38.8547 45.0735C38.6639 45.5891 38.471 45.5276 37.8468 44.7513C37.1034 43.8264 37.0728 43.8225 37.0272 44.6499C36.9912 45.2991 36.836 45.168 36.3915 44.1129C35.6203 42.2832 35.23 42.3343 35.5711 44.2203C35.9105 46.0977 35.622 46.1334 34.6986 44.3277C34.0988 43.1553 33.9572 43.0647 33.8153 43.7615C33.6572 44.5365 33.5918 44.5223 32.8289 43.5467L32.0118 42.5019L32.2457 44.0055C32.463 45.4039 32.4365 45.4507 31.8657 44.6753C31.5284 44.2165 31.2523 43.685 31.2523 43.4939C31.2523 42.6497 30.4212 43.2468 30.3905 44.1129C30.362 44.93 30.2647 44.8609 29.761 43.6636C29.1633 42.2441 28.2142 42.0968 28.5929 43.4823C28.7038 43.8882 28.5784 43.7954 28.3143 43.2765C28.0498 42.7571 27.4426 42.2738 26.9641 42.2024C26.2799 42.0998 25.984 41.5692 25.5755 39.7094C24.8958 36.6171 24.4289 26.8362 24.8097 23.6726C25.0796 21.4313 25.3246 20.9548 27.2907 18.848C28.4903 17.5626 29.6861 16.5105 29.9481 16.5105C30.2101 16.5105 30.4245 16.3172 30.4245 16.0809C30.4245 15.8446 30.7097 15.6513 31.0582 15.6513C31.4071 15.6513 31.7995 15.3613 31.9303 15.0069C32.0615 14.6525 32.5015 14.3625 32.908 14.3625C33.3144 14.3625 33.7557 14.0695 33.8877 13.7116C34.0202 13.3538 34.5524 12.8653 35.0703 12.6264C36.0285 12.1852 36.6377 11.7414 40.9023 8.38105C43.3059 6.4869 43.8117 6.3099 49.6413 5.31922Z\"\n        fill=\"white\"\n      />\n    </svg>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"overlay\":\"_GQ_slOrJreIGbGArno3\",\"overlay-visible\":\"vqgSgJYVgtu9hySzkInu\",\"overlay-content\":\"AeRa78M8b9lZkUGNk7Ys\",\"icon\":\"RxEWnkYiJAZ9ICylfeRG\",\"positive-icon\":\"AA5_OLPcvwXQEtWan_xg\",\"negative-icon\":\"juXp3uMYIhCGCtEFdZ4U\",\"info\":\"R4mODuRQNoh_8ad1G2DS\",\"title\":\"P5zM8FBydHP7AcrxdGyD\",\"text\":\"zytWCSQWPwS0qsxfdyKw\",\"link\":\"XQo_Fy2y6_B7ECiF5sVG\",\"buttons\":\"Qi0EmXqugqbsEFcxHnJ5\",\"button\":\"ZBjEr2nsoratuKqC1gPq\"};","import { setLocalStorageData } from '@app/storage/local/shared';\nimport { Button } from '@popup/shared/components/Button';\nimport { useNegativeFeedbackUrl } from '@popup/shared/components/Feedback/hooks/useNegativeFeedbackUrl';\nimport { useFeedbackOverlay } from '@popup/shared/contexts/FeedbackOverlayContext';\nimport { clsx } from 'clsx';\nimport { useState } from 'react';\nimport { Header } from '../shared/Header';\nimport { NegativeIcon } from './components/NegativeIcon';\nimport { PositiveIcon } from './components/PositiveIcon';\nimport { VrubelIcon } from './components/VrubelIcon';\n\nimport styles from './Feedback.module.css';\n\nasync function setFeedbackProvided(): Promise<void> {\n  await setLocalStorageData({ feedbackProvided: true });\n}\n\nexport function Feedback(): JSX.Element {\n  const { isFeedbackOverlayShown, closeFeedbackOverlay } = useFeedbackOverlay();\n  const { negativeFeedbackUrl } = useNegativeFeedbackUrl();\n\n  const [isPositive, setIsPositive] = useState(false);\n  const [isNegative, setIsNegative] = useState(false);\n\n  function handleClickPositiveFeedback(): void {\n    setIsPositive(true);\n    void setFeedbackProvided();\n  }\n\n  function handleClickNegativeFeedback(): void {\n    setIsNegative(true);\n    void setFeedbackProvided();\n  }\n\n  function handleClickOnBack(): void {\n    setIsPositive(false);\n    setIsNegative(false);\n  }\n\n  function renderFeedbackContent(): JSX.Element {\n    if (isPositive) {\n      return (\n        <>\n          <Header />\n          <PositiveIcon className={styles['positive-icon']} />\n          <div className={styles.info}>\n            <h3 className={styles.title}>Рады слышать!</h3>\n            <span className={styles.text}>Поделитесь вашим опытом.</span>\n            <br />\n            <br />\n            <span className={styles.text}>\n              Ваши отзывы помогают новым пользователям узнавать о расширении, а\n              нам — делать расширение ещё лучше\n            </span>\n          </div>\n          <div className={styles.buttons}>\n            <a\n              rel=\"noreferrer\"\n              href={process.env.POPUP_HTML_PUBLIC_FEEDBACK_URL}\n              target=\"_blank\"\n              className={styles.link}\n            >\n              <Button\n                variant=\"primary\"\n                onClick={closeFeedbackOverlay}\n                className={styles.button}\n              >\n                Оставить отзыв\n              </Button>\n            </a>\n            <Button\n              variant=\"primary-n\"\n              className={styles.button}\n              onClick={handleClickOnBack}\n            >\n              Назад\n            </Button>\n          </div>\n        </>\n      );\n    }\n\n    if (isNegative) {\n      return (\n        <>\n          <Header />\n          <NegativeIcon className={styles['negative-icon']} />\n          <div className={styles.info}>\n            <h3 className={styles.title}>Нам очень жаль</h3>\n            <span className={styles.text}>\n              Расскажите о том, что пошло не так.\n            </span>\n            <br />\n            <br />\n            <span className={styles.text}>\n              Ваши отзывы помогают нам узнавать о проблемах и делать расширение\n              ещё удобнее\n            </span>\n          </div>\n          <div className={styles.buttons}>\n            <a\n              rel=\"noreferrer\"\n              href={negativeFeedbackUrl}\n              target=\"_blank\"\n              className={styles.link}\n            >\n              <Button\n                onClick={closeFeedbackOverlay}\n                variant=\"primary\"\n                className={styles.button}\n              >\n                Продолжить\n              </Button>\n            </a>\n            <Button\n              variant=\"primary-n\"\n              className={styles.button}\n              onClick={handleClickOnBack}\n            >\n              Назад\n            </Button>\n          </div>\n        </>\n      );\n    }\n\n    return (\n      <>\n        <Header />\n        <VrubelIcon className={styles.icon} />\n        <div className={styles.info}>\n          <h3 className={styles.title}>Как всё прошло?</h3>\n        </div>\n        <div className={styles.buttons}>\n          <Button\n            onClick={handleClickNegativeFeedback}\n            variant=\"secondary\"\n            className={styles.button}\n          >\n            Были проблемы\n          </Button>\n          <Button\n            onClick={handleClickPositiveFeedback}\n            variant=\"primary\"\n            className={styles.button}\n          >\n            Все отлично\n          </Button>\n          <Button\n            variant=\"link\"\n            className={styles.button}\n            onClick={closeFeedbackOverlay}\n          >\n            Назад\n          </Button>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <div\n      className={clsx(styles.overlay, {\n        [styles['overlay-visible']]: isFeedbackOverlayShown,\n      })}\n    >\n      <div className={styles['overlay-content']}>{renderFeedbackContent()}</div>\n    </div>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"UMxtXEFMjj6VL4xaGO8X\",\"content\":\"fpMQH6Q7IU76j_y6LEF1\",\"input-container\":\"uvDf7kiYZS1fExoVrdVT\",\"input\":\"jLwS2iKDz1jcEt6D1UmZ\",\"input-with-value\":\"YabICJ3q3CVM9e5Yhc5V\",\"input-error\":\"Q1BSdZtBOorkGWEaRI9K\",\"shake\":\"pIzFb5KW6FymqH5c7Os6\",\"error\":\"f3TvQjxPuDWeW_BQJnFQ\",\"submit\":\"J3HTxFoN_3kj8q9K7ahv\",\"loader\":\"ZWgNU_C1EKHIcslBWwB_\",\"buttons\":\"SIX1R4mrNjKU3cvYmsUg\",\"button\":\"WgVBabn4MB6lNjVd915r\"};","import { Button } from '@popup/shared/components/Button';\nimport clsx from 'clsx';\nimport { useEffect } from 'react';\nimport { useEnterIdForm } from '../hooks/useEnterIdForm';\n\nimport styles from './EnterIdForm.module.css';\n\ntype EnterIdFormProps = {\n  onIdSettled?: () => void;\n};\n\nexport function EnterIdForm({ onIdSettled }: EnterIdFormProps): JSX.Element {\n  const {\n    enteredId,\n    handleChange,\n    handleSubmit,\n    inputRef,\n    isError,\n    isLoading,\n    clearError,\n    isIdSettled,\n  } = useEnterIdForm();\n\n  useEffect(() => {\n    if (isIdSettled && onIdSettled) {\n      onIdSettled();\n    }\n  }, [isIdSettled, onIdSettled]);\n\n  return (\n    <form onSubmit={handleSubmit} className={styles.form}>\n      <div className={styles.content}>\n        <div className={styles['input-container']}>\n          <input\n            ref={inputRef}\n            className={clsx(styles.input, {\n              [styles['input-error']]: isError,\n              [styles['input-with-value']]: enteredId.length > 0,\n            })}\n            onChange={handleChange}\n            value={enteredId}\n            placeholder=\"Ваш ID\"\n            onFocus={clearError}\n          />\n          {isError && (\n            <span className={styles.error}>\n              Кажется, вы ввели неверный ID. Попробуйте еще раз.\n            </span>\n          )}\n        </div>\n      </div>\n      <div className={styles.buttons}>\n        <Button\n          className={styles.submit}\n          type=\"submit\"\n          loaderVariant=\"circle\"\n          loaderClassName={styles.loader}\n          loading={isLoading}\n        >\n          {isLoading ? 'Проверяем ваш ID...' : 'Продолжить'}\n        </Button>\n      </div>\n    </form>\n  );\n}\n","import { setupTariffFree } from '@api/premium/setupTariffFree';\nimport { Actions } from '@app/actions/shared';\nimport { Message } from '@app/messages/shared';\nimport {\n  CookieKey,\n  removeCookieData,\n  setCookieData,\n} from '@app/storage/cookies/shared';\nimport {\n  getSubscriptionInfo,\n  setLocalStoragePremiumData,\n} from '@app/storage/local/premium';\nimport {\n  LocalStorageKey,\n  getLocalStorageData,\n} from '@app/storage/local/shared';\nimport { BaseRoutePath } from '@popup/shared/routes/types/RoutePath';\nimport { wait } from '@popup/shared/utils/wait';\nimport {\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n  type ChangeEvent,\n  type FormEvent,\n  type RefObject,\n} from 'react';\nimport { useNavigate } from 'react-router-dom';\n\ntype EnterIdFormHookValues = {\n  enteredId: string;\n  isError: boolean;\n  isLoading: boolean;\n  inputRef: RefObject<HTMLInputElement>;\n  handleChange: (e: ChangeEvent<HTMLInputElement>) => void;\n  handleSubmit: (e: FormEvent<HTMLFormElement>) => Promise<void>;\n  clearError: () => void;\n  isIdSettled: boolean;\n};\n\nexport function useEnterIdForm(): EnterIdFormHookValues {\n  const [enteredId, setEnteredId] = useState('');\n  const [isError, setIsError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isIdSettled, setIsIdSettled] = useState(false);\n\n  const navigate = useNavigate();\n\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>): void => {\n    setEnteredId(e.target.value);\n  }, []);\n\n  const handleSubmit = useCallback(\n    async (e: FormEvent<HTMLFormElement>): Promise<void> => {\n      e.preventDefault();\n      if (enteredId.trim() === '') {\n        setIsError(true);\n        return;\n      }\n\n      try {\n        setIsError(false);\n        setIsLoading(true);\n        const userId = enteredId.trim();\n\n        await setLocalStoragePremiumData({\n          userId,\n        });\n\n        await setCookieData({\n          userId,\n        });\n\n        const { currentState } = await getLocalStorageData(\n          LocalStorageKey.CurrentState,\n        );\n\n        const [subscriptionInfo] = await Promise.all([\n          getSubscriptionInfo(),\n          wait(1500),\n        ]);\n\n        if (!subscriptionInfo) {\n          return;\n        }\n\n        await setLocalStoragePremiumData({\n          userId,\n        });\n\n        if (currentState === 'connected') {\n          await wait(500);\n        }\n        setIsIdSettled(true);\n      } catch (error) {\n        console.warn(error);\n        await removeCookieData(CookieKey.UserId);\n        setIsError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    [enteredId],\n  );\n\n  const clearError = useCallback(() => {\n    setIsError(false);\n  }, []);\n\n  useLayoutEffect(() => {\n    inputRef.current?.focus();\n  }, []);\n\n  useEffect(() => {\n    const listener = async (message: Message) => {\n      if (message.action === Actions.OpenPopupChangeDevice) {\n        navigate(BaseRoutePath.ChangeDevice, { state: { userId: enteredId } });\n      }\n    };\n\n    chrome.runtime.onMessage.addListener(listener);\n\n    return () => {\n      chrome.runtime.onMessage.removeListener(listener);\n    };\n  }, [enteredId, navigate]);\n\n  return {\n    enteredId,\n    isError,\n    isLoading,\n    isIdSettled,\n    inputRef,\n    handleChange,\n    handleSubmit,\n    clearError,\n  };\n}\n","import { EnterIdForm } from '@popup/shared/components/EnterIdForm';\nimport { forwardRef, useCallback } from 'react';\nimport { StepProps } from '../../types';\nimport { Button } from '@popup/shared/components/Button';\nimport styles from './EnterIdStep.module.css';\n\nexport const EnterIdStep = forwardRef<HTMLDivElement, StepProps>(\n  ({ onStepChange }, ref) => {\n    const updateOnboardingScreenStatus = useCallback(async () => {\n      onStepChange(3);\n    }, [onStepChange]);\n\n    return (\n      <div ref={ref} className={styles.wrapper}>\n        <h1 className={styles.title}>Введите ID,</h1>\n        <p className={styles.description}>Если вы уже оплачивали ВРубель</p>\n        <EnterIdForm onIdSettled={updateOnboardingScreenStatus} />\n        <Button\n          className={styles.button}\n          variant=\"secondary\"\n          onClick={() => onStepChange(0)}\n        >\n          Вернуться назад\n        </Button>\n      </div>\n    );\n  },\n);\n\nEnterIdStep.displayName = 'EnterIdStep';\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"YLwgN4CwEErPcl_sFfc_\",\"title\":\"tlvP5OtTdIfVNHVZbwNb\",\"description\":\"SOsDuHRLcsuIf5jVNZs4\",\"button\":\"a5oL4zhQDEM6S59CicQg\"};","export function VrubelIcon({ className }: { className?: string }): JSX.Element {\n  return (\n    <svg\n      width=\"109\"\n      height=\"64\"\n      viewBox=\"0 0 109 64\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className={className}\n    >\n      <path\n        d=\"M100.41 30.6286C102.761 31.36 104.781 32.9752 106.468 35.4743C108.156 37.9124 109 40.7162 109 43.8857C109 50.6514 106.83 55.7105 102.49 59.0629C98.1501 62.3543 91.821 64 83.5027 64H46.2513C45.5882 64 45.0156 63.7562 44.5334 63.2686C44.0512 62.7809 43.8101 62.2019 43.8101 61.5314V2.46857C43.8101 1.7981 44.0512 1.21905 44.5334 0.73143C45.0156 0.24381 45.5882 0 46.2513 0H82.5985C91.1579 0 97.4569 1.58476 101.495 4.75429C105.594 7.86286 107.644 12.5867 107.644 18.9257V19.2C107.644 22.1257 106.86 24.6248 105.293 26.6971C103.726 28.7695 102.098 30.08 100.41 30.6286Z\"\n        fill=\"#5F2E99\"\n      />\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M50.7246 11.3667C45.7932 11.6095 44.3294 11.8155 41.7933 12.6224C40.125 13.1534 37.6202 13.8763 36.2272 14.2287C33.5333 14.9104 26.8844 18.6246 25.2154 20.3805C24.0904 21.5636 23.7904 21.5348 23.5407 20.2203C23.3233 19.0766 22.3119 18.106 21.3379 18.106C21.014 18.106 20.411 17.6249 19.9978 17.0371C18.8179 15.3585 17.4583 15.1483 9.4383 15.4025C5.54559 15.5258 2.04114 15.7187 1.65052 15.8311C1.02195 16.0115 0.914103 16.3887 0.713233 19.1089C0.588531 20.7996 0.373169 23.5389 0.234986 25.1963C-0.526368 34.3257 0.681216 52.4644 2.1537 54.0133C2.58679 54.4689 8.32037 54.9152 14.1999 54.9506C17.4428 54.9705 18.3737 54.8656 18.7067 54.4437C18.9813 54.0956 19.7322 53.9119 20.8798 53.9119C22.2772 53.9119 22.7824 53.7453 23.3664 53.0916C23.7695 52.6403 24.0992 52.0911 24.0992 51.8717C24.0992 51.0489 24.8308 51.0645 27.1294 51.9369C31.3079 53.5223 35.5393 54.0115 43.3099 53.808C48.9016 53.6613 50.7654 53.4798 53.0838 52.8548C54.893 52.3669 56.8323 52.1018 58.3476 52.1351C61.5548 52.2053 64.6993 51.5711 66.6436 50.4618C68.8795 49.1862 69.3938 48.239 69.1306 45.8829C69.0123 44.8257 69.0531 43.9855 69.2229 43.9855C69.3901 43.9855 69.9981 43.5225 70.5737 42.9571C71.8622 41.6911 71.9529 40.1436 70.8912 37.5472L70.1616 35.7636L71.1892 34.9177C72.4972 33.8407 73.4159 31.5017 73.1123 30.0208C72.5262 27.162 70.931 25.2094 67.8316 23.5573C66.9129 23.0678 66.2254 22.5991 66.3042 22.5165C66.6227 22.1815 77.8937 21.4958 83.4166 21.4753C86.9801 21.4622 89.6484 21.297 90.1573 21.058C91.3699 20.489 92.4086 19.167 92.6719 17.8575C92.9674 16.3869 91.8495 13.6331 90.767 13.164C89.2665 12.5139 84.5632 11.7471 81.0574 11.5811C73.2771 11.2132 56.2873 11.093 50.7246 11.3667ZM61.3411 12.8049C59.1167 12.9379 55.3251 13.0871 52.9153 13.1368C50.5055 13.186 48.0789 13.3363 47.5228 13.47L46.5117 13.7135L47.3543 14.0159C50.2986 15.0728 53.25 15.4184 56.5212 15.0891C57.6068 14.9799 58.2549 15.0876 58.5818 15.4315C58.9381 15.8059 59.1561 15.8311 59.4416 15.5308C59.7274 15.2302 59.8272 15.3932 59.8346 16.1739C59.8433 17.0556 59.8989 17.1226 60.1885 16.5993C60.667 15.735 61.1712 15.825 61.18 16.7766L61.1874 17.5742L61.8079 16.7255C62.4159 15.8938 63.2612 15.9356 63.0667 16.7879C63.0124 17.0254 63.032 17.0999 63.1095 16.9538C63.3795 16.4461 64.2059 16.6911 64.2059 17.2789C64.2059 17.6036 64.3056 17.7646 64.4276 17.6362C64.5496 17.5079 64.8776 17.6012 65.1566 17.8433C65.5587 18.1921 65.6925 18.1925 65.8037 17.8447C65.8809 17.6036 66.2463 17.0453 66.6153 16.6039L67.286 15.8016L67.0754 16.8652L66.8644 17.9287L67.4269 17.1031L67.989 16.277L68.9621 17.258C69.986 18.2896 70.2121 18.2081 69.5269 17.0538C68.8576 15.9261 69.4966 15.813 70.7689 16.8336C71.6421 17.5345 71.9576 17.6472 71.9576 17.2587C71.9576 16.9676 71.8059 16.6312 71.6206 16.5107C71.4352 16.3901 71.2835 16.1416 71.2835 15.958C71.2835 15.7743 71.4352 15.6244 71.6206 15.6244C71.8059 15.6244 71.9576 15.8637 71.9576 16.1562C71.9576 16.4486 72.1851 16.6879 72.4631 16.6879C72.7412 16.6879 72.9687 16.9272 72.9687 17.2197C72.9687 17.9429 73.5349 17.8911 73.94 17.1311C74.241 16.5663 74.3633 16.6043 75.3046 17.5519C76.3801 18.6346 76.5972 18.5668 75.9747 17.3434C75.3522 16.12 75.9578 16.1494 77.1866 17.4023C78.4384 18.6782 78.6935 18.6147 77.8374 17.2399C77.2095 16.2324 77.7582 15.6464 78.4225 16.6149C78.6669 16.9715 79.0942 17.4037 79.3723 17.5753C79.7993 17.839 79.8101 17.7993 79.44 17.3193C79.1134 16.8953 79.1016 16.6865 79.3935 16.4968C79.6085 16.3568 79.8829 16.3827 80.0025 16.5539C80.1225 16.7251 80.6554 17.264 81.1865 17.7515C82.1433 18.6296 82.1501 18.6303 81.9192 17.8401C81.7521 17.2676 81.8235 17.0424 82.1733 17.0424C82.4413 17.0424 82.9034 17.4016 83.1999 17.8401C83.6728 18.5392 83.7132 18.5502 83.5258 17.9287C83.4082 17.5388 83.1652 17.0205 82.9859 16.7766C82.4271 16.0165 83.6974 16.2565 84.327 17.0297C84.7547 17.5551 85.0034 17.6299 85.3411 17.3353C85.6761 17.0428 85.9562 17.1041 86.4563 17.5802C87.1024 18.1953 87.124 18.1911 87.124 17.4519C87.124 16.5692 87.7239 16.4266 88.0201 17.2388C88.1917 17.7093 88.3339 17.6788 88.9918 17.0283L89.7626 16.2668L90.1455 17.019C90.5722 17.8578 91.1684 17.6912 91.1684 16.7333C91.1684 15.7024 89.4293 14.274 87.6707 13.8607C86.7664 13.648 84.7948 13.5037 83.2893 13.5402C80.0639 13.6178 66.6231 13.0013 65.891 12.7418C65.613 12.6436 63.5655 12.6716 61.3411 12.8049ZM42.5833 15.0891C42.4923 15.1844 41.5193 15.4173 40.4206 15.6067C35.6738 16.4242 35.262 16.5702 33.3048 18.1333C29.8324 20.9063 29.3363 21.2725 28.5561 21.6366C28.1344 21.8337 27.701 22.2368 27.5932 22.5321C27.4856 22.8274 27.1264 23.0692 26.7954 23.0692C26.4644 23.0692 26.1062 23.3085 25.9993 23.6009C25.8928 23.8934 25.5733 24.1327 25.2892 24.1327C25.0054 24.1327 24.7732 24.2923 24.7732 24.4872C24.7732 24.6822 24.5986 24.8417 24.3853 24.8417C24.172 24.8417 23.1983 25.71 22.2216 26.7707C20.6207 28.5092 20.4211 28.9024 20.2014 30.7519C19.8913 33.3625 20.2715 41.4337 20.8249 43.9855C21.1575 45.5202 21.3985 45.958 21.9556 46.0428C22.3452 46.1016 22.8397 46.5004 23.055 46.929C23.2701 47.3573 23.3722 47.4339 23.2819 47.0989C22.9735 45.9556 23.7463 46.0771 24.233 47.2485C24.6431 48.2365 24.7223 48.2936 24.7456 47.6193C24.7705 46.9046 25.4473 46.4118 25.4473 47.1084C25.4473 47.2662 25.6721 47.7047 25.9468 48.0833C26.4115 48.7232 26.4331 48.6846 26.2562 47.5307L26.0657 46.2899L26.731 47.152C27.3522 47.9571 27.4054 47.9688 27.5342 47.3293C27.6498 46.7543 27.765 46.8291 28.2534 47.7965C29.0053 49.2866 29.2402 49.2571 28.9639 47.7079C28.6861 46.1516 29.004 46.1094 29.6319 47.6193C29.9938 48.49 30.1202 48.5981 30.1495 48.0624C30.1866 47.3796 30.2116 47.3828 30.8169 48.1461C31.3251 48.7867 31.4822 48.8374 31.6375 48.412C31.7434 48.122 31.7481 47.6062 31.6486 47.2648C31.5489 46.9234 31.6851 47.0276 31.951 47.4956C32.3092 48.1262 32.4845 48.2184 32.6271 47.8501C32.7797 47.4562 32.9287 47.4959 33.3463 48.0415C33.8532 48.7034 33.8734 48.6899 33.8838 47.687C33.894 46.6968 33.9192 46.6788 34.3857 47.3275C34.656 47.7033 34.9785 47.904 35.1025 47.7739C35.2262 47.6434 35.5313 47.7146 35.78 47.9316C36.1335 48.2404 36.2323 48.1667 36.2323 47.5948C36.2323 46.5887 36.8096 46.2977 37.0732 47.1708C37.3162 47.9763 37.7759 48.1064 38.0324 47.442C38.1608 47.1084 38.2915 47.1304 38.5608 47.5307C38.8567 47.971 38.9191 47.9252 38.9235 47.2648C38.9299 46.2735 39.4823 46.2193 39.7728 47.1815C39.8911 47.5743 40.1294 47.8036 40.3019 47.6916C40.4913 47.5682 40.4758 47.213 40.2618 46.7929C39.8945 46.0704 40.1182 45.2586 40.5989 45.5713C40.7502 45.6698 40.9733 46.3047 41.094 46.9826C41.2149 47.6604 41.4573 48.3081 41.6329 48.4223C41.8226 48.5456 41.8685 48.1915 41.7461 47.5484C41.6123 46.8443 41.6757 46.4671 41.9281 46.4671C42.1411 46.4671 42.4121 46.9744 42.53 47.5948C42.742 48.7091 42.7481 48.7122 43.0504 47.8607C43.3524 47.0106 43.3632 47.0085 43.8583 47.7079C44.317 48.356 44.3402 48.2571 44.1286 46.5557C43.8644 44.4297 44.1036 44.1762 44.7983 45.8467C45.2061 46.8277 45.2812 46.8805 45.3045 46.2012C45.3197 45.7623 45.4214 45.4036 45.531 45.4036C45.6402 45.4036 46.0278 45.7623 46.3924 46.2012C47.0517 46.9943 47.0533 46.9943 46.6991 46.2246C46.2714 45.294 46.2546 45.0491 46.6179 45.0491C46.7689 45.0491 47.1544 45.6273 47.475 46.3338C48.2555 48.056 48.5191 47.6515 47.8781 45.7148C47.2593 43.8462 47.237 43.5307 47.7362 43.7058C47.9461 43.7795 48.2876 44.389 48.4945 45.0604C48.8403 46.1817 50.0506 47.0205 50.0506 46.1385C50.0506 45.9293 49.8231 45.7581 49.545 45.7581C48.7978 45.7581 48.9309 44.7786 49.7135 44.5173C50.0843 44.3936 50.3876 44.1436 50.3876 43.9618C50.3876 43.5193 49.8069 43.5395 49.5416 43.9912C49.2066 44.5616 48.7024 44.0256 48.7024 43.0992C48.7024 42.6348 48.5508 42.1562 48.3654 42.0357C48.18 41.9151 48.0284 42.0786 48.0284 42.3987C48.0284 42.7192 47.839 42.9152 47.6071 42.8351C47.1103 42.6628 46.8713 41.3483 47.1834 40.5031C47.3749 39.9852 47.4551 40.0103 47.8079 40.6985C48.1976 41.4589 48.2272 41.4635 48.6101 40.8186C48.9262 40.2865 48.9111 40.11 48.5376 39.9593C48.2791 39.8547 48.0486 39.4818 48.0257 39.1301C48.0024 38.7784 47.9067 37.0948 47.8127 35.3885C47.7186 33.6826 47.4942 32.2865 47.3135 32.2865C47.1329 32.2865 46.2347 33.0761 45.317 34.041C42.0218 37.5075 36.0435 40.0859 31.3018 40.0859C27.9484 40.0859 26.1989 39.2184 27.7694 38.3342C28.2824 38.0453 28.4401 38.1123 28.5807 38.6777C28.8135 39.6147 29.7185 39.2322 29.6854 38.2105C29.6635 37.5305 29.86 37.4121 31.1714 37.3139L32.683 37.2008L31.8455 36.4904L31.0083 35.7803L32.3173 36.0082C33.4198 36.2 33.5943 36.1483 33.4231 35.6793C33.29 35.3145 33.4086 35.1227 33.7672 35.1227C34.2424 35.1227 34.23 35.0234 33.6725 34.3693L33.0305 33.616L34.1258 33.8659C35.3428 34.1431 35.5235 33.8677 34.6314 33.0945C34.08 32.6166 34.0854 32.5992 34.7156 32.8297C36.6758 33.5461 36.7847 33.4653 36.5791 31.4393C36.5316 30.9713 36.6657 30.8316 37.0229 30.9759C37.389 31.1234 37.5989 30.877 37.7584 30.1141C37.9087 29.3944 38.1358 29.1083 38.455 29.237C38.8075 29.3792 38.9285 29.103 38.9285 28.1572C38.9285 27.0376 39.0135 26.9096 39.641 27.0823L40.3538 27.2783L39.641 26.4803C38.7991 25.5373 38.7442 25.1963 39.4341 25.1963C39.7121 25.1963 39.9396 25.0311 39.9396 24.8293C39.9396 24.5805 40.1567 24.5844 40.6137 24.8417C41.5567 25.3725 41.4657 24.7641 40.4034 23.4357C39.5598 22.3818 39.5146 21.4168 40.3498 22.2953C40.9915 22.9703 41.3437 22.7781 40.9352 21.9751C40.3963 20.9162 40.8948 20.617 41.6234 21.5625C42.4404 22.6225 42.6911 22.5686 42.4508 21.3852C42.2776 20.5316 42.3083 20.4837 42.6972 20.9999C42.9416 21.3243 43.3221 21.8826 43.5428 22.2407C43.9031 22.8249 43.9473 22.7824 43.9715 21.8284L43.9988 20.7648L44.6581 21.6511C45.2637 22.4654 45.3183 22.48 45.3321 21.8284C45.3459 21.1768 45.4005 21.1913 46.0062 22.0056C46.6125 22.821 46.6668 22.8352 46.6836 22.1829C46.7005 21.5178 46.7295 21.5125 47.1494 22.0943C47.7089 22.8696 48.0284 22.8859 48.0284 22.1396C48.0284 21.6685 48.1197 21.644 48.5339 22.0056C48.9481 22.3672 49.0395 22.3428 49.0395 21.8716C49.0395 20.9736 49.5454 21.1956 49.9498 22.2715L50.3158 23.2464L50.3623 22.0056C50.4071 20.8177 50.4307 20.795 50.9228 21.4739C51.2052 21.8638 51.6552 22.1361 51.9231 22.0787C52.2413 22.0106 52.4098 22.2736 52.4098 22.8384C52.4098 23.3134 52.6373 23.7942 52.9153 23.9065C53.1934 24.0186 53.4209 24.3593 53.4209 24.6631C53.4209 24.9669 53.9079 25.7539 54.5031 26.4119C55.4875 27.5002 55.6271 27.5556 56.045 27.0227C56.4585 26.4952 56.4885 26.5143 56.3463 27.2184C56.2344 27.7718 56.4322 28.1682 57.0244 28.5762C58.1413 29.3458 58.2849 29.0853 57.6402 27.4616C57.1393 26.201 57.1434 26.023 57.6968 24.9417C58.2697 23.8229 58.2684 23.7307 57.656 22.5346C56.4676 20.2136 53.8233 17.9819 51.0617 16.9694C46.6813 15.3631 43.0814 14.5647 42.5833 15.0891ZM81.0574 16.5316C81.0574 16.8354 81.2091 16.9857 81.3945 16.8652C81.5798 16.7446 81.7315 16.4961 81.7315 16.3125C81.7315 16.1289 81.5798 15.9789 81.3945 15.9789C81.2091 15.9789 81.0574 16.2278 81.0574 16.5316ZM65.217 16.7088C65.217 16.9152 65.3686 16.9857 65.554 16.8652C65.7394 16.7446 65.891 16.5759 65.891 16.4897C65.891 16.4036 65.7394 16.3334 65.554 16.3334C65.3686 16.3334 65.217 16.5025 65.217 16.7088ZM15.2241 18.3424C15.1004 18.4722 14.9993 18.7434 14.9993 18.9451C14.9993 19.167 15.1564 19.1461 15.398 18.8919C15.6174 18.6611 15.7185 18.3899 15.6228 18.2893C15.5271 18.1886 15.3475 18.2123 15.2241 18.3424ZM17.2554 19.6066C16.9177 19.8669 16.3427 21.2544 15.9632 22.7242C14.2481 29.3728 15.0735 45.3858 17.429 51.1644C18.1142 52.8445 18.1195 52.8484 19.7592 52.8484C21.6917 52.8484 21.6816 52.8867 20.7501 49.0079C19.3999 43.386 18.6672 30.3027 19.377 24.4872C20.0218 19.2032 20.0369 19.3624 18.8752 19.2425C18.3191 19.1851 17.5901 19.3493 17.2554 19.6066ZM21.2357 19.9378C20.9028 20.8765 20.4532 23.9501 20.6095 24.2164C20.892 24.6975 21.9722 23.8374 22.3672 22.8168C22.6 22.2152 22.6439 21.421 22.4794 20.7879C22.1841 19.6527 21.502 19.1865 21.2357 19.9378ZM14.1979 21.4888C14.0823 21.806 13.9168 22.9696 13.8305 24.0742L13.6734 26.0825L14.1652 23.6279C14.634 21.2881 14.6498 20.2501 14.1979 21.4888ZM63.705 23.061C63.4209 23.5446 63.7934 24.1327 64.3838 24.1327C64.6676 24.1327 64.7808 24.3468 64.6649 24.6645C64.5581 24.957 64.6494 25.1963 64.8678 25.1963C65.2965 25.1963 66.2281 26.0556 66.2281 26.4512C66.2281 26.5842 65.6972 26.5884 65.0484 26.4605C64.3114 26.3151 63.8688 26.3669 63.8688 26.5984C63.8688 26.8022 64.4088 26.9688 65.0683 26.9688C65.7822 26.9688 66.1836 27.1124 66.0595 27.3233C65.9449 27.5183 65.5189 27.6803 65.1128 27.6832C64.5126 27.6878 64.4691 27.753 64.8799 28.0324C65.158 28.2213 65.8115 28.3784 66.3325 28.3816C67.0039 28.3855 67.8037 28.9084 69.0804 30.1782L70.8811 31.97L71.1106 30.5406C71.237 29.7546 71.2411 28.6361 71.1197 28.0551C70.8616 26.8185 69.2077 25.1792 67.558 24.5241C66.9193 24.2706 65.8388 23.7559 65.1573 23.3808C64.37 22.9472 63.8405 22.8306 63.705 23.061ZM38.9285 24.3309C38.9285 24.6347 39.0826 24.7833 39.271 24.6609C39.4594 24.5383 39.5264 24.2898 39.4196 24.1083C39.1307 23.6165 38.9285 23.708 38.9285 24.3309ZM61.3633 24.4706C60.8821 24.6546 60.8238 24.7921 61.1402 24.9977C61.3755 25.1509 61.7348 25.1013 61.9377 24.8878C62.4351 24.3646 62.1614 24.166 61.3633 24.4706ZM62.974 25.0342C62.6606 25.8936 63.098 26.0489 63.5163 25.2268C63.7772 24.7138 63.7822 24.4872 63.5332 24.4872C63.3353 24.4872 63.0839 24.7333 62.974 25.0342ZM58.2583 25.7362C58.0345 26.3495 59.2717 29.4547 59.7358 29.4451C59.8774 29.4419 60.2056 29.298 60.4658 29.1246C60.8585 28.8634 60.8012 28.5212 60.1288 27.1078C59.2522 25.2654 58.6034 24.7896 58.2583 25.7362ZM37.7489 28.0324C37.8635 28.2274 38.0239 28.3869 38.1058 28.3869C38.1877 28.3869 38.2545 28.2274 38.2545 28.0324C38.2545 27.8374 38.0937 27.6779 37.8975 27.6779C37.7014 27.6779 37.6343 27.8374 37.7489 28.0324ZM62.7951 30.6473C61.5801 31.5332 60.7186 32.4074 60.7874 32.6857C60.8534 32.9537 60.9872 33.7713 61.0846 34.5023C61.1817 35.2336 61.393 35.8317 61.5541 35.8317C61.7149 35.8317 61.8467 35.6722 61.8467 35.4772C61.8467 34.8734 62.4631 35.0872 62.6131 35.7431C62.7192 36.2061 62.8931 36.0487 63.2989 35.1227C63.7758 34.0339 63.8442 33.9864 63.8557 34.7345C63.8682 35.5357 63.9059 35.552 64.4809 35.0046C64.8172 34.6841 65.5904 34.3647 66.1984 34.2945C66.8067 34.2247 67.4245 33.963 67.5711 33.7131C67.7177 33.4635 67.9904 33.3582 68.1768 33.4795C68.6843 33.8095 68.9951 32.0246 68.5738 31.1968C68.1434 30.3505 66.3062 29.0991 65.4913 29.0973C65.1789 29.0966 63.9656 29.794 62.7951 30.6473ZM64.1216 30.4119C63.7971 30.7912 63.5318 31.4836 63.5318 31.9501V32.7985L64.2352 32.0586C64.6447 31.6279 64.8914 30.9851 64.825 30.5204C64.7131 29.733 64.7033 29.7316 64.1216 30.4119ZM13.2279 32.7793C12.8521 35.3765 12.9222 37.9357 13.4736 41.7723C13.9909 45.3685 15.1624 50.476 15.6865 51.4172C16.092 52.1454 16.0899 51.4307 15.6828 50.1537C14.9545 47.8703 13.9127 40.3358 13.7021 35.8317C13.5164 31.8565 13.4358 31.3393 13.2279 32.7793ZM50.3724 32.316C49.8477 33.348 50.8025 34.4136 52.2524 34.4136C53.5149 34.4136 54.2392 33.678 53.9429 32.6964C53.5641 31.4407 50.9592 31.1631 50.3724 32.316ZM55.106 33.4891C55.106 35.2414 55.1775 35.419 55.9641 35.6268C56.436 35.7516 56.9668 35.7594 57.1437 35.6445C57.3207 35.5293 57.4652 35.5949 57.4652 35.7895C57.4652 35.9845 57.8063 36.1011 58.2236 36.049C59.6297 35.8728 60.1615 35.429 60.1615 34.4306C60.1615 33.2285 59.386 32.4734 57.6338 31.9693C55.2243 31.2762 55.106 31.3474 55.106 33.4891ZM46.3432 34.5909C46.3432 34.8834 46.4949 35.1227 46.6802 35.1227C46.8656 35.1227 47.0173 34.8834 47.0173 34.5909C47.0173 34.2984 46.8656 34.0591 46.6802 34.0591C46.4949 34.0591 46.3432 34.2984 46.3432 34.5909ZM46.9718 37.4305C46.8697 37.6238 46.8828 38.1786 47.0004 38.6643C47.1184 39.1496 47.298 39.3889 47.3998 39.196C47.5019 39.0028 47.4888 38.448 47.3712 37.9623C47.2532 37.477 47.0736 37.2377 46.9718 37.4305ZM66.3231 37.7801C64.4286 38.2668 61.9622 39.4782 62.0994 39.8547C62.1456 39.982 62.2012 40.7637 62.2228 41.5925C62.2444 42.4214 62.3313 42.8202 62.4159 42.4788C62.5008 42.1374 62.7283 41.8584 62.9218 41.8584C63.1152 41.8584 63.1941 42.1775 63.097 42.5675C63.0003 42.9574 63.0583 43.2765 63.2265 43.2765C63.3943 43.2765 63.5318 43.107 63.5318 42.8996C63.5318 42.6926 63.7971 42.5689 64.1216 42.6249C64.4462 42.6813 64.918 42.5909 65.1705 42.4246C65.4566 42.236 65.7309 42.2948 65.8991 42.5816C66.0936 42.912 66.3662 42.7011 66.8715 41.8294C67.4835 40.7733 67.7518 40.6878 67.616 41.5925C67.5381 42.1133 68.1434 41.846 68.8212 41.0608C69.6071 40.1507 70.0311 38.6338 69.7305 37.8095C69.4936 37.1601 68.7605 37.1537 66.3231 37.7801ZM50.7246 39.0223C50.7246 40.1135 51.7253 41.5039 52.5109 41.5039C53.7067 41.5039 54.1829 39.5201 53.2284 38.5157C52.9369 38.2094 52.2544 37.9588 51.7118 37.9588C50.8396 37.9588 50.7246 38.0829 50.7246 39.0223ZM54.7737 39.425C54.7761 40.0809 54.8711 40.9828 54.985 41.4295C55.1809 42.1988 55.2247 42.2101 55.8229 41.6404C56.4201 41.0721 56.4542 41.0781 56.4542 41.7542C56.4542 42.3533 56.6449 42.4529 57.6338 42.3703C58.4834 42.2994 58.8134 42.4157 58.8134 42.7865C58.8134 43.185 58.96 43.2187 59.4632 42.9358C59.8204 42.7344 60.3317 42.6586 60.5996 42.7667C61.3067 43.0521 61.5838 41.1739 60.9801 40.1883C60.4871 39.3832 59.1726 38.894 56.3699 38.4732L54.769 38.2328L54.7737 39.425ZM44.8161 42.2307C44.4959 42.7759 44.9344 43.1276 45.3672 42.6724C45.6092 42.4179 45.6149 42.2197 45.3847 42.0701C45.196 41.9474 44.9402 42.0197 44.8161 42.2307ZM43.647 43.4747C43.647 43.7785 43.801 43.927 43.9894 43.8047C44.1778 43.6821 44.2449 43.4335 44.138 43.252C43.8492 42.7603 43.647 42.8518 43.647 43.4747ZM46.1747 43.2765C46.0601 43.4715 46.1272 43.631 46.3233 43.631C46.5195 43.631 46.6802 43.4715 46.6802 43.2765C46.6802 43.0815 46.6135 42.922 46.5316 42.922C46.4497 42.922 46.2893 43.0815 46.1747 43.2765ZM39.9396 44.1837C39.9396 44.4875 40.0936 44.6361 40.282 44.5137C40.4704 44.3911 40.5375 44.1426 40.4307 43.9611C40.1418 43.4693 39.9396 43.5608 39.9396 44.1837ZM44.892 43.8575C44.6227 44.1408 44.927 44.6945 45.352 44.6945C45.5266 44.6945 45.6692 44.4552 45.6692 44.1628C45.6692 43.6147 45.2715 43.4584 44.892 43.8575ZM42.2988 44.34C42.2988 44.535 42.4505 44.6945 42.6359 44.6945C42.8212 44.6945 42.9729 44.535 42.9729 44.34C42.9729 44.145 42.8212 43.9855 42.6359 43.9855C42.4505 43.9855 42.2988 44.145 42.2988 44.34ZM51.4513 44.6531C51.0765 44.9026 51.0906 45.143 51.5318 46.0403C52.2096 47.4193 53.369 47.8607 53.9851 46.9744C54.5799 46.1186 54.5523 45.8847 53.7579 45.0491C53.0444 44.2986 52.2001 44.1535 51.4513 44.6531ZM38.5915 45.2263C38.5915 45.5188 38.7432 45.7581 38.9285 45.7581C39.1139 45.7581 39.2656 45.5188 39.2656 45.2263C39.2656 44.9338 39.1139 44.6945 38.9285 44.6945C38.7432 44.6945 38.5915 44.9338 38.5915 45.2263ZM41.2877 45.2263C41.2877 45.5188 41.4394 45.7581 41.6248 45.7581C41.8101 45.7581 41.9618 45.5188 41.9618 45.2263C41.9618 44.9338 41.8101 44.6945 41.6248 44.6945C41.4394 44.6945 41.2877 44.9338 41.2877 45.2263ZM55.1178 45.6695C55.1343 46.9943 55.9284 48.4932 56.289 47.8795C56.4976 47.5246 56.6516 47.5594 56.9823 48.0351C57.6493 48.9944 59.2181 48.6406 59.5147 47.464C59.7955 46.3505 59.2593 45.7209 57.4993 45.0994C55.6251 44.4372 55.1043 44.562 55.1178 45.6695ZM65.6612 45.4057C65.2567 45.5773 64.0053 45.8269 62.8807 45.9609C61.0536 46.1782 60.8356 46.2892 60.8356 47.0014C60.8356 47.9621 61.6529 48.7619 62.243 48.3783C62.4772 48.2262 63.2042 48.0706 63.8587 48.033C64.5129 47.9951 65.1243 47.922 65.217 47.8706C65.3096 47.8192 65.5371 47.7466 65.7225 47.7093C66.4155 47.5693 67.9132 46.8316 67.9132 46.6298C67.9132 46.5146 67.7562 46.1119 67.5644 45.7347C67.1862 44.9916 66.797 44.9243 65.6612 45.4057ZM42.7862 45.7889C42.6618 46.0009 42.7285 46.3519 42.9348 46.5689C43.2102 46.8585 43.3099 46.756 43.3099 46.1835C43.3099 45.3274 43.135 45.1955 42.7862 45.7889ZM37.5804 46.3108C37.5804 46.6146 37.7344 46.7631 37.9228 46.6408C38.1112 46.5182 38.1783 46.2696 38.0715 46.0881C37.7826 45.5964 37.5804 45.6879 37.5804 46.3108ZM34.8842 46.6653C34.8842 46.9691 35.0382 47.1176 35.2266 46.9953C35.415 46.8727 35.482 46.6242 35.3752 46.4427C35.0864 45.9509 34.8842 46.0424 34.8842 46.6653ZM21.7399 50.2991C21.7399 50.6518 21.9509 51.2438 22.2091 51.615C22.6075 52.1883 22.7595 52.2188 23.2202 51.8167C23.9977 51.1378 23.8899 50.5419 22.9037 50.0693C21.7861 49.5337 21.7399 49.5425 21.7399 50.2991Z\"\n        fill=\"#5F2E99\"\n      />\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M50.7246 11.3667C45.7932 11.6095 44.3294 11.8155 41.7933 12.6224C40.125 13.1534 37.6202 13.8763 36.2272 14.2287C33.5333 14.9104 26.8844 18.6246 25.2154 20.3805C24.0904 21.5636 23.7904 21.5348 23.5407 20.2203C23.3233 19.0766 22.3119 18.106 21.3379 18.106C21.014 18.106 20.411 17.6249 19.9978 17.0371C18.8179 15.3585 17.4583 15.1483 9.4383 15.4025C5.54559 15.5258 2.04114 15.7187 1.65052 15.8311C1.02195 16.0115 0.914103 16.3887 0.713233 19.1089C0.588531 20.7996 0.373169 23.5389 0.234986 25.1963C-0.526368 34.3257 0.681216 52.4644 2.1537 54.0133C2.58679 54.4689 8.32037 54.9152 14.1999 54.9506C17.4428 54.9705 18.3737 54.8656 18.7067 54.4437C18.9813 54.0956 19.7322 53.9119 20.8798 53.9119C22.2772 53.9119 22.7824 53.7453 23.3664 53.0916C23.7695 52.6403 24.0992 52.0911 24.0992 51.8717C24.0992 51.0489 24.8308 51.0645 27.1294 51.9369C31.3079 53.5223 35.5393 54.0115 43.3099 53.808C48.9016 53.6613 50.7654 53.4798 53.0838 52.8548C54.893 52.3669 56.8323 52.1018 58.3476 52.1351C61.5548 52.2053 64.6993 51.5711 66.6436 50.4618C68.8795 49.1862 69.3938 48.239 69.1306 45.8829C69.0123 44.8257 69.0531 43.9855 69.2229 43.9855C69.3901 43.9855 69.9981 43.5225 70.5737 42.9571C71.8622 41.6911 71.9529 40.1436 70.8912 37.5472L70.1616 35.7636L71.1892 34.9177C72.4972 33.8407 73.4159 31.5017 73.1123 30.0208C72.5262 27.162 70.931 25.2094 67.8316 23.5573C66.9129 23.0678 66.2254 22.5991 66.3042 22.5165C66.6227 22.1815 77.8937 21.4958 83.4166 21.4753C86.9801 21.4622 89.6484 21.297 90.1573 21.058C91.3699 20.489 92.4086 19.167 92.6719 17.8575C92.9674 16.3869 91.8495 13.6331 90.767 13.164C89.2665 12.5139 84.5632 11.7471 81.0574 11.5811C73.2771 11.2132 56.2873 11.093 50.7246 11.3667ZM61.3411 12.8049C59.1167 12.9379 55.3251 13.0871 52.9153 13.1368C50.5055 13.186 48.0789 13.3363 47.5228 13.47L46.5117 13.7135L47.3543 14.0159C50.2986 15.0728 53.25 15.4184 56.5212 15.0891C57.6068 14.9799 58.2549 15.0876 58.5818 15.4315C58.9381 15.8059 59.1561 15.8311 59.4416 15.5308C59.7274 15.2302 59.8272 15.3932 59.8346 16.1739C59.8433 17.0556 59.8989 17.1226 60.1885 16.5993C60.667 15.735 61.1712 15.825 61.18 16.7766L61.1874 17.5742L61.8079 16.7255C62.4159 15.8938 63.2612 15.9356 63.0667 16.7879C63.0124 17.0254 63.032 17.0999 63.1095 16.9538C63.3795 16.4461 64.2059 16.6911 64.2059 17.2789C64.2059 17.6036 64.3056 17.7646 64.4276 17.6362C64.5496 17.5079 64.8776 17.6012 65.1566 17.8433C65.5587 18.1921 65.6925 18.1925 65.8037 17.8447C65.8809 17.6036 66.2463 17.0453 66.6153 16.6039L67.286 15.8016L67.0754 16.8652L66.8644 17.9287L67.4269 17.1031L67.989 16.277L68.9621 17.258C69.986 18.2896 70.2121 18.2081 69.5269 17.0538C68.8576 15.9261 69.4966 15.813 70.7689 16.8336C71.6421 17.5345 71.9576 17.6472 71.9576 17.2587C71.9576 16.9676 71.8059 16.6312 71.6206 16.5107C71.4352 16.3901 71.2835 16.1416 71.2835 15.958C71.2835 15.7743 71.4352 15.6244 71.6206 15.6244C71.8059 15.6244 71.9576 15.8637 71.9576 16.1562C71.9576 16.4486 72.1851 16.6879 72.4631 16.6879C72.7412 16.6879 72.9687 16.9272 72.9687 17.2197C72.9687 17.9429 73.5349 17.8911 73.94 17.1311C74.241 16.5663 74.3633 16.6043 75.3046 17.5519C76.3801 18.6346 76.5972 18.5668 75.9747 17.3434C75.3522 16.12 75.9578 16.1494 77.1866 17.4023C78.4384 18.6782 78.6935 18.6147 77.8374 17.2399C77.2095 16.2324 77.7582 15.6464 78.4225 16.6149C78.6669 16.9715 79.0942 17.4037 79.3723 17.5753C79.7993 17.839 79.8101 17.7993 79.44 17.3193C79.1134 16.8953 79.1016 16.6865 79.3935 16.4968C79.6085 16.3568 79.8829 16.3827 80.0025 16.5539C80.1225 16.7251 80.6554 17.264 81.1865 17.7515C82.1433 18.6296 82.1501 18.6303 81.9192 17.8401C81.7521 17.2676 81.8235 17.0424 82.1733 17.0424C82.4413 17.0424 82.9034 17.4016 83.1999 17.8401C83.6728 18.5392 83.7132 18.5502 83.5258 17.9287C83.4082 17.5388 83.1652 17.0205 82.9859 16.7766C82.4271 16.0165 83.6974 16.2565 84.327 17.0297C84.7547 17.5551 85.0034 17.6299 85.3411 17.3353C85.6761 17.0428 85.9562 17.1041 86.4563 17.5802C87.1024 18.1953 87.124 18.1911 87.124 17.4519C87.124 16.5692 87.7239 16.4266 88.0201 17.2388C88.1917 17.7093 88.3339 17.6788 88.9918 17.0283L89.7626 16.2668L90.1455 17.019C90.5722 17.8578 91.1684 17.6912 91.1684 16.7333C91.1684 15.7024 89.4293 14.274 87.6707 13.8607C86.7664 13.648 84.7948 13.5037 83.2893 13.5402C80.0639 13.6178 66.6231 13.0013 65.891 12.7418C65.613 12.6436 63.5655 12.6716 61.3411 12.8049ZM42.5833 15.0891C42.4923 15.1844 41.5193 15.4173 40.4206 15.6067C35.6738 16.4242 35.262 16.5702 33.3048 18.1333C29.8324 20.9063 29.3363 21.2725 28.5561 21.6366C28.1344 21.8337 27.701 22.2368 27.5932 22.5321C27.4856 22.8274 27.1264 23.0692 26.7954 23.0692C26.4644 23.0692 26.1062 23.3085 25.9993 23.6009C25.8928 23.8934 25.5733 24.1327 25.2892 24.1327C25.0054 24.1327 24.7732 24.2923 24.7732 24.4872C24.7732 24.6822 24.5986 24.8417 24.3853 24.8417C24.172 24.8417 23.1983 25.71 22.2216 26.7707C20.6207 28.5092 20.4211 28.9024 20.2014 30.7519C19.8913 33.3625 20.2715 41.4337 20.8249 43.9855C21.1575 45.5202 21.3985 45.958 21.9556 46.0428C22.3452 46.1016 22.8397 46.5004 23.055 46.929C23.2701 47.3573 23.3722 47.4339 23.2819 47.0989C22.9735 45.9556 23.7463 46.0771 24.233 47.2485C24.6431 48.2365 24.7223 48.2936 24.7456 47.6193C24.7705 46.9046 25.4473 46.4118 25.4473 47.1084C25.4473 47.2662 25.6721 47.7047 25.9468 48.0833C26.4115 48.7232 26.4331 48.6846 26.2562 47.5307L26.0657 46.2899L26.731 47.152C27.3522 47.9571 27.4054 47.9688 27.5342 47.3293C27.6498 46.7543 27.765 46.8291 28.2534 47.7965C29.0053 49.2866 29.2402 49.2571 28.9639 47.7079C28.6861 46.1516 29.004 46.1094 29.6319 47.6193C29.9938 48.49 30.1202 48.5981 30.1495 48.0624C30.1866 47.3796 30.2116 47.3828 30.8169 48.1461C31.3251 48.7867 31.4822 48.8374 31.6375 48.412C31.7434 48.122 31.7481 47.6062 31.6486 47.2648C31.5489 46.9234 31.6851 47.0276 31.951 47.4956C32.3092 48.1262 32.4845 48.2184 32.6271 47.8501C32.7797 47.4562 32.9287 47.4959 33.3463 48.0415C33.8532 48.7034 33.8734 48.6899 33.8838 47.687C33.894 46.6968 33.9192 46.6788 34.3857 47.3275C34.656 47.7033 34.9785 47.904 35.1025 47.7739C35.2262 47.6434 35.5313 47.7146 35.78 47.9316C36.1335 48.2404 36.2323 48.1667 36.2323 47.5948C36.2323 46.5887 36.8096 46.2977 37.0732 47.1708C37.3162 47.9763 37.7759 48.1064 38.0324 47.442C38.1608 47.1084 38.2915 47.1304 38.5608 47.5307C38.8567 47.971 38.9191 47.9252 38.9235 47.2648C38.9299 46.2735 39.4823 46.2193 39.7728 47.1815C39.8911 47.5743 40.1294 47.8036 40.3019 47.6916C40.4913 47.5682 40.4758 47.213 40.2618 46.7929C39.8945 46.0704 40.1182 45.2586 40.5989 45.5713C40.7502 45.6698 40.9733 46.3047 41.094 46.9826C41.2149 47.6604 41.4573 48.3081 41.6329 48.4223C41.8226 48.5456 41.8685 48.1915 41.7461 47.5484C41.6123 46.8443 41.6757 46.4671 41.9281 46.4671C42.1411 46.4671 42.4121 46.9744 42.53 47.5948C42.742 48.7091 42.7481 48.7122 43.0504 47.8607C43.3524 47.0106 43.3632 47.0085 43.8583 47.7079C44.317 48.356 44.3402 48.2571 44.1286 46.5557C43.8644 44.4297 44.1036 44.1762 44.7983 45.8467C45.2061 46.8277 45.2812 46.8805 45.3045 46.2012C45.3197 45.7623 45.4214 45.4036 45.531 45.4036C45.6402 45.4036 46.0278 45.7623 46.3924 46.2012C47.0517 46.9943 47.0533 46.9943 46.6991 46.2246C46.2714 45.294 46.2546 45.0491 46.6179 45.0491C46.7689 45.0491 47.1544 45.6273 47.475 46.3338C48.2555 48.056 48.5191 47.6515 47.8781 45.7148C47.2593 43.8462 47.237 43.5307 47.7362 43.7058C47.9461 43.7795 48.2876 44.389 48.4945 45.0604C48.8403 46.1817 50.0506 47.0205 50.0506 46.1385C50.0506 45.9293 49.8231 45.7581 49.545 45.7581C48.7978 45.7581 48.9309 44.7786 49.7135 44.5173C50.0843 44.3936 50.3876 44.1436 50.3876 43.9618C50.3876 43.5193 49.8069 43.5395 49.5416 43.9912C49.2066 44.5616 48.7024 44.0256 48.7024 43.0992C48.7024 42.6348 48.5508 42.1562 48.3654 42.0357C48.18 41.9151 48.0284 42.0786 48.0284 42.3987C48.0284 42.7192 47.839 42.9152 47.6071 42.8351C47.1103 42.6628 46.8713 41.3483 47.1834 40.5031C47.3749 39.9852 47.4551 40.0103 47.8079 40.6985C48.1976 41.4589 48.2272 41.4635 48.6101 40.8186C48.9262 40.2865 48.9111 40.11 48.5376 39.9593C48.2791 39.8547 48.0486 39.4818 48.0257 39.1301C48.0024 38.7784 47.9067 37.0948 47.8127 35.3885C47.7186 33.6826 47.4942 32.2865 47.3135 32.2865C47.1329 32.2865 46.2347 33.0761 45.317 34.041C42.0218 37.5075 36.0435 40.0859 31.3018 40.0859C27.9484 40.0859 26.1989 39.2184 27.7694 38.3342C28.2824 38.0453 28.4401 38.1123 28.5807 38.6777C28.8135 39.6147 29.7185 39.2322 29.6854 38.2105C29.6635 37.5305 29.86 37.4121 31.1714 37.3139L32.683 37.2008L31.8455 36.4904L31.0083 35.7803L32.3173 36.0082C33.4198 36.2 33.5943 36.1483 33.4231 35.6793C33.29 35.3145 33.4086 35.1227 33.7672 35.1227C34.2424 35.1227 34.23 35.0234 33.6725 34.3693L33.0305 33.616L34.1258 33.8659C35.3428 34.1431 35.5235 33.8677 34.6314 33.0945C34.08 32.6166 34.0854 32.5992 34.7156 32.8297C36.6758 33.5461 36.7847 33.4653 36.5791 31.4393C36.5316 30.9713 36.6657 30.8316 37.0229 30.9759C37.389 31.1234 37.5989 30.877 37.7584 30.1141C37.9087 29.3944 38.1358 29.1083 38.455 29.237C38.8075 29.3792 38.9285 29.103 38.9285 28.1572C38.9285 27.0376 39.0135 26.9096 39.641 27.0823L40.3538 27.2783L39.641 26.4803C38.7991 25.5373 38.7442 25.1963 39.4341 25.1963C39.7121 25.1963 39.9396 25.0311 39.9396 24.8293C39.9396 24.5805 40.1567 24.5844 40.6137 24.8417C41.5567 25.3725 41.4657 24.7641 40.4034 23.4357C39.5598 22.3818 39.5146 21.4168 40.3498 22.2953C40.9915 22.9703 41.3437 22.7781 40.9352 21.9751C40.3963 20.9162 40.8948 20.617 41.6234 21.5625C42.4404 22.6225 42.6911 22.5686 42.4508 21.3852C42.2776 20.5316 42.3083 20.4837 42.6972 20.9999C42.9416 21.3243 43.3221 21.8826 43.5428 22.2407C43.9031 22.8249 43.9473 22.7824 43.9715 21.8284L43.9988 20.7648L44.6581 21.6511C45.2637 22.4654 45.3183 22.48 45.3321 21.8284C45.3459 21.1768 45.4005 21.1913 46.0062 22.0056C46.6125 22.821 46.6668 22.8352 46.6836 22.1829C46.7005 21.5178 46.7295 21.5125 47.1494 22.0943C47.7089 22.8696 48.0284 22.8859 48.0284 22.1396C48.0284 21.6685 48.1197 21.644 48.5339 22.0056C48.9481 22.3672 49.0395 22.3428 49.0395 21.8716C49.0395 20.9736 49.5454 21.1956 49.9498 22.2715L50.3158 23.2464L50.3623 22.0056C50.4071 20.8177 50.4307 20.795 50.9228 21.4739C51.2052 21.8638 51.6552 22.1361 51.9231 22.0787C52.2413 22.0106 52.4098 22.2736 52.4098 22.8384C52.4098 23.3134 52.6373 23.7942 52.9153 23.9065C53.1934 24.0186 53.4209 24.3593 53.4209 24.6631C53.4209 24.9669 53.9079 25.7539 54.5031 26.4119C55.4875 27.5002 55.6271 27.5556 56.045 27.0227C56.4585 26.4952 56.4885 26.5143 56.3463 27.2184C56.2344 27.7718 56.4322 28.1682 57.0244 28.5762C58.1413 29.3458 58.2849 29.0853 57.6402 27.4616C57.1393 26.201 57.1434 26.023 57.6968 24.9417C58.2697 23.8229 58.2684 23.7307 57.656 22.5346C56.4676 20.2136 53.8233 17.9819 51.0617 16.9694C46.6813 15.3631 43.0814 14.5647 42.5833 15.0891ZM81.0574 16.5316C81.0574 16.8354 81.2091 16.9857 81.3945 16.8652C81.5798 16.7446 81.7315 16.4961 81.7315 16.3125C81.7315 16.1289 81.5798 15.9789 81.3945 15.9789C81.2091 15.9789 81.0574 16.2278 81.0574 16.5316ZM65.217 16.7088C65.217 16.9152 65.3686 16.9857 65.554 16.8652C65.7394 16.7446 65.891 16.5759 65.891 16.4897C65.891 16.4036 65.7394 16.3334 65.554 16.3334C65.3686 16.3334 65.217 16.5025 65.217 16.7088ZM15.2241 18.3424C15.1004 18.4722 14.9993 18.7434 14.9993 18.9451C14.9993 19.167 15.1564 19.1461 15.398 18.8919C15.6174 18.6611 15.7185 18.3899 15.6228 18.2893C15.5271 18.1886 15.3475 18.2123 15.2241 18.3424ZM17.2554 19.6066C16.9177 19.8669 16.3427 21.2544 15.9632 22.7242C14.2481 29.3728 15.0735 45.3858 17.429 51.1644C18.1142 52.8445 18.1195 52.8484 19.7592 52.8484C21.6917 52.8484 21.6816 52.8867 20.7501 49.0079C19.3999 43.386 18.6672 30.3027 19.377 24.4872C20.0218 19.2032 20.0369 19.3624 18.8752 19.2425C18.3191 19.1851 17.5901 19.3493 17.2554 19.6066ZM21.2357 19.9378C20.9028 20.8765 20.4532 23.9501 20.6095 24.2164C20.892 24.6975 21.9722 23.8374 22.3672 22.8168C22.6 22.2152 22.6439 21.421 22.4794 20.7879C22.1841 19.6527 21.502 19.1865 21.2357 19.9378ZM14.1979 21.4888C14.0823 21.806 13.9168 22.9696 13.8305 24.0742L13.6734 26.0825L14.1652 23.6279C14.634 21.2881 14.6498 20.2501 14.1979 21.4888ZM63.705 23.061C63.4209 23.5446 63.7934 24.1327 64.3838 24.1327C64.6676 24.1327 64.7808 24.3468 64.6649 24.6645C64.5581 24.957 64.6494 25.1963 64.8678 25.1963C65.2965 25.1963 66.2281 26.0556 66.2281 26.4512C66.2281 26.5842 65.6972 26.5884 65.0484 26.4605C64.3114 26.3151 63.8688 26.3669 63.8688 26.5984C63.8688 26.8022 64.4088 26.9688 65.0683 26.9688C65.7822 26.9688 66.1836 27.1124 66.0595 27.3233C65.9449 27.5183 65.5189 27.6803 65.1128 27.6832C64.5126 27.6878 64.4691 27.753 64.8799 28.0324C65.158 28.2213 65.8115 28.3784 66.3325 28.3816C67.0039 28.3855 67.8037 28.9084 69.0804 30.1782L70.8811 31.97L71.1106 30.5406C71.237 29.7546 71.2411 28.6361 71.1197 28.0551C70.8616 26.8185 69.2077 25.1792 67.558 24.5241C66.9193 24.2706 65.8388 23.7559 65.1573 23.3808C64.37 22.9472 63.8405 22.8306 63.705 23.061ZM38.9285 24.3309C38.9285 24.6347 39.0826 24.7833 39.271 24.6609C39.4594 24.5383 39.5264 24.2898 39.4196 24.1083C39.1307 23.6165 38.9285 23.708 38.9285 24.3309ZM61.3633 24.4706C60.8821 24.6546 60.8238 24.7921 61.1402 24.9977C61.3755 25.1509 61.7348 25.1013 61.9377 24.8878C62.4351 24.3646 62.1614 24.166 61.3633 24.4706ZM62.974 25.0342C62.6606 25.8936 63.098 26.0489 63.5163 25.2268C63.7772 24.7138 63.7822 24.4872 63.5332 24.4872C63.3353 24.4872 63.0839 24.7333 62.974 25.0342ZM58.2583 25.7362C58.0345 26.3495 59.2717 29.4547 59.7358 29.4451C59.8774 29.4419 60.2056 29.298 60.4658 29.1246C60.8585 28.8634 60.8012 28.5212 60.1288 27.1078C59.2522 25.2654 58.6034 24.7896 58.2583 25.7362ZM37.7489 28.0324C37.8635 28.2274 38.0239 28.3869 38.1058 28.3869C38.1877 28.3869 38.2545 28.2274 38.2545 28.0324C38.2545 27.8374 38.0937 27.6779 37.8975 27.6779C37.7014 27.6779 37.6343 27.8374 37.7489 28.0324ZM62.7951 30.6473C61.5801 31.5332 60.7186 32.4074 60.7874 32.6857C60.8534 32.9537 60.9872 33.7713 61.0846 34.5023C61.1817 35.2336 61.393 35.8317 61.5541 35.8317C61.7149 35.8317 61.8467 35.6722 61.8467 35.4772C61.8467 34.8734 62.4631 35.0872 62.6131 35.7431C62.7192 36.2061 62.8931 36.0487 63.2989 35.1227C63.7758 34.0339 63.8442 33.9864 63.8557 34.7345C63.8682 35.5357 63.9059 35.552 64.4809 35.0046C64.8172 34.6841 65.5904 34.3647 66.1984 34.2945C66.8067 34.2247 67.4245 33.963 67.5711 33.7131C67.7177 33.4635 67.9904 33.3582 68.1768 33.4795C68.6843 33.8095 68.9951 32.0246 68.5738 31.1968C68.1434 30.3505 66.3062 29.0991 65.4913 29.0973C65.1789 29.0966 63.9656 29.794 62.7951 30.6473ZM64.1216 30.4119C63.7971 30.7912 63.5318 31.4836 63.5318 31.9501V32.7985L64.2352 32.0586C64.6447 31.6279 64.8914 30.9851 64.825 30.5204C64.7131 29.733 64.7033 29.7316 64.1216 30.4119ZM13.2279 32.7793C12.8521 35.3765 12.9222 37.9357 13.4736 41.7723C13.9909 45.3685 15.1624 50.476 15.6865 51.4172C16.092 52.1454 16.0899 51.4307 15.6828 50.1537C14.9545 47.8703 13.9127 40.3358 13.7021 35.8317C13.5164 31.8565 13.4358 31.3393 13.2279 32.7793ZM50.3724 32.316C49.8477 33.348 50.8025 34.4136 52.2524 34.4136C53.5149 34.4136 54.2392 33.678 53.9429 32.6964C53.5641 31.4407 50.9592 31.1631 50.3724 32.316ZM55.106 33.4891C55.106 35.2414 55.1775 35.419 55.9641 35.6268C56.436 35.7516 56.9668 35.7594 57.1437 35.6445C57.3207 35.5293 57.4652 35.5949 57.4652 35.7895C57.4652 35.9845 57.8063 36.1011 58.2236 36.049C59.6297 35.8728 60.1615 35.429 60.1615 34.4306C60.1615 33.2285 59.386 32.4734 57.6338 31.9693C55.2243 31.2762 55.106 31.3474 55.106 33.4891ZM46.3432 34.5909C46.3432 34.8834 46.4949 35.1227 46.6802 35.1227C46.8656 35.1227 47.0173 34.8834 47.0173 34.5909C47.0173 34.2984 46.8656 34.0591 46.6802 34.0591C46.4949 34.0591 46.3432 34.2984 46.3432 34.5909ZM46.9718 37.4305C46.8697 37.6238 46.8828 38.1786 47.0004 38.6643C47.1184 39.1496 47.298 39.3889 47.3998 39.196C47.5019 39.0028 47.4888 38.448 47.3712 37.9623C47.2532 37.477 47.0736 37.2377 46.9718 37.4305ZM66.3231 37.7801C64.4286 38.2668 61.9622 39.4782 62.0994 39.8547C62.1456 39.982 62.2012 40.7637 62.2228 41.5925C62.2444 42.4214 62.3313 42.8202 62.4159 42.4788C62.5008 42.1374 62.7283 41.8584 62.9218 41.8584C63.1152 41.8584 63.1941 42.1775 63.097 42.5675C63.0003 42.9574 63.0583 43.2765 63.2265 43.2765C63.3943 43.2765 63.5318 43.107 63.5318 42.8996C63.5318 42.6926 63.7971 42.5689 64.1216 42.6249C64.4462 42.6813 64.918 42.5909 65.1705 42.4246C65.4566 42.236 65.7309 42.2948 65.8991 42.5816C66.0936 42.912 66.3662 42.7011 66.8715 41.8294C67.4835 40.7733 67.7518 40.6878 67.616 41.5925C67.5381 42.1133 68.1434 41.846 68.8212 41.0608C69.6071 40.1507 70.0311 38.6338 69.7305 37.8095C69.4936 37.1601 68.7605 37.1537 66.3231 37.7801ZM50.7246 39.0223C50.7246 40.1135 51.7253 41.5039 52.5109 41.5039C53.7067 41.5039 54.1829 39.5201 53.2284 38.5157C52.9369 38.2094 52.2544 37.9588 51.7118 37.9588C50.8396 37.9588 50.7246 38.0829 50.7246 39.0223ZM54.7737 39.425C54.7761 40.0809 54.8711 40.9828 54.985 41.4295C55.1809 42.1988 55.2247 42.2101 55.8229 41.6404C56.4201 41.0721 56.4542 41.0781 56.4542 41.7542C56.4542 42.3533 56.6449 42.4529 57.6338 42.3703C58.4834 42.2994 58.8134 42.4157 58.8134 42.7865C58.8134 43.185 58.96 43.2187 59.4632 42.9358C59.8204 42.7344 60.3317 42.6586 60.5996 42.7667C61.3067 43.0521 61.5838 41.1739 60.9801 40.1883C60.4871 39.3832 59.1726 38.894 56.3699 38.4732L54.769 38.2328L54.7737 39.425ZM44.8161 42.2307C44.4959 42.7759 44.9344 43.1276 45.3672 42.6724C45.6092 42.4179 45.6149 42.2197 45.3847 42.0701C45.196 41.9474 44.9402 42.0197 44.8161 42.2307ZM43.647 43.4747C43.647 43.7785 43.801 43.927 43.9894 43.8047C44.1778 43.6821 44.2449 43.4335 44.138 43.252C43.8492 42.7603 43.647 42.8518 43.647 43.4747ZM46.1747 43.2765C46.0601 43.4715 46.1272 43.631 46.3233 43.631C46.5195 43.631 46.6802 43.4715 46.6802 43.2765C46.6802 43.0815 46.6135 42.922 46.5316 42.922C46.4497 42.922 46.2893 43.0815 46.1747 43.2765ZM39.9396 44.1837C39.9396 44.4875 40.0936 44.6361 40.282 44.5137C40.4704 44.3911 40.5375 44.1426 40.4307 43.9611C40.1418 43.4693 39.9396 43.5608 39.9396 44.1837ZM44.892 43.8575C44.6227 44.1408 44.927 44.6945 45.352 44.6945C45.5266 44.6945 45.6692 44.4552 45.6692 44.1628C45.6692 43.6147 45.2715 43.4584 44.892 43.8575ZM42.2988 44.34C42.2988 44.535 42.4505 44.6945 42.6359 44.6945C42.8212 44.6945 42.9729 44.535 42.9729 44.34C42.9729 44.145 42.8212 43.9855 42.6359 43.9855C42.4505 43.9855 42.2988 44.145 42.2988 44.34ZM51.4513 44.6531C51.0765 44.9026 51.0906 45.143 51.5318 46.0403C52.2096 47.4193 53.369 47.8607 53.9851 46.9744C54.5799 46.1186 54.5523 45.8847 53.7579 45.0491C53.0444 44.2986 52.2001 44.1535 51.4513 44.6531ZM38.5915 45.2263C38.5915 45.5188 38.7432 45.7581 38.9285 45.7581C39.1139 45.7581 39.2656 45.5188 39.2656 45.2263C39.2656 44.9338 39.1139 44.6945 38.9285 44.6945C38.7432 44.6945 38.5915 44.9338 38.5915 45.2263ZM41.2877 45.2263C41.2877 45.5188 41.4394 45.7581 41.6248 45.7581C41.8101 45.7581 41.9618 45.5188 41.9618 45.2263C41.9618 44.9338 41.8101 44.6945 41.6248 44.6945C41.4394 44.6945 41.2877 44.9338 41.2877 45.2263ZM55.1178 45.6695C55.1343 46.9943 55.9284 48.4932 56.289 47.8795C56.4976 47.5246 56.6516 47.5594 56.9823 48.0351C57.6493 48.9944 59.2181 48.6406 59.5147 47.464C59.7955 46.3505 59.2593 45.7209 57.4993 45.0994C55.6251 44.4372 55.1043 44.562 55.1178 45.6695ZM65.6612 45.4057C65.2567 45.5773 64.0053 45.8269 62.8807 45.9609C61.0536 46.1782 60.8356 46.2892 60.8356 47.0014C60.8356 47.9621 61.6529 48.7619 62.243 48.3783C62.4772 48.2262 63.2042 48.0706 63.8587 48.033C64.5129 47.9951 65.1243 47.922 65.217 47.8706C65.3096 47.8192 65.5371 47.7466 65.7225 47.7093C66.4155 47.5693 67.9132 46.8316 67.9132 46.6298C67.9132 46.5146 67.7562 46.1119 67.5644 45.7347C67.1862 44.9916 66.797 44.9243 65.6612 45.4057ZM42.7862 45.7889C42.6618 46.0009 42.7285 46.3519 42.9348 46.5689C43.2102 46.8585 43.3099 46.756 43.3099 46.1835C43.3099 45.3274 43.135 45.1955 42.7862 45.7889ZM37.5804 46.3108C37.5804 46.6146 37.7344 46.7631 37.9228 46.6408C38.1112 46.5182 38.1783 46.2696 38.0715 46.0881C37.7826 45.5964 37.5804 45.6879 37.5804 46.3108ZM34.8842 46.6653C34.8842 46.9691 35.0382 47.1176 35.2266 46.9953C35.415 46.8727 35.482 46.6242 35.3752 46.4427C35.0864 45.9509 34.8842 46.0424 34.8842 46.6653ZM21.7399 50.2991C21.7399 50.6518 21.9509 51.2438 22.2091 51.615C22.6075 52.1883 22.7595 52.2188 23.2202 51.8167C23.9977 51.1378 23.8899 50.5419 22.9037 50.0693C21.7861 49.5337 21.7399 49.5425 21.7399 50.2991Z\"\n        fill=\"black\"\n        fillOpacity=\"0.2\"\n      />\n      <path\n        d=\"M14.9993 18.9451C14.9993 18.7434 15.1004 18.4722 15.2241 18.3424C15.3475 18.2123 15.5271 18.1886 15.6228 18.2893C15.7185 18.3899 15.6174 18.6611 15.398 18.8919C15.1564 19.1461 14.9993 19.167 14.9993 18.9451Z\"\n        fill=\"#5F2E99\"\n      />\n      <path\n        d=\"M14.9993 18.9451C14.9993 18.7434 15.1004 18.4722 15.2241 18.3424C15.3475 18.2123 15.5271 18.1886 15.6228 18.2893C15.7185 18.3899 15.6174 18.6611 15.398 18.8919C15.1564 19.1461 14.9993 19.167 14.9993 18.9451Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M13.8305 24.0742C13.9168 22.9696 14.0823 21.806 14.1979 21.4888C14.6498 20.2501 14.634 21.2881 14.1652 23.6279L13.6734 26.0825L13.8305 24.0742Z\"\n        fill=\"#5F2E99\"\n      />\n      <path\n        d=\"M13.8305 24.0742C13.9168 22.9696 14.0823 21.806 14.1979 21.4888C14.6498 20.2501 14.634 21.2881 14.1652 23.6279L13.6734 26.0825L13.8305 24.0742Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M13.4736 41.7723C12.9222 37.9357 12.8521 35.3765 13.2279 32.7793C13.4358 31.3393 13.5164 31.8565 13.7021 35.8317C13.9127 40.3358 14.9545 47.8703 15.6828 50.1537C16.0899 51.4307 16.092 52.1454 15.6865 51.4172C15.1624 50.476 13.9909 45.3685 13.4736 41.7723Z\"\n        fill=\"#5F2E99\"\n      />\n      <path\n        d=\"M13.4736 41.7723C12.9222 37.9357 12.8521 35.3765 13.2279 32.7793C13.4358 31.3393 13.5164 31.8565 13.7021 35.8317C13.9127 40.3358 14.9545 47.8703 15.6828 50.1537C16.0899 51.4307 16.092 52.1454 15.6865 51.4172C15.1624 50.476 13.9909 45.3685 13.4736 41.7723Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M15.9632 22.7242C16.3427 21.2544 16.9177 19.8669 17.2554 19.6066C17.5901 19.3493 18.3191 19.1851 18.8752 19.2425C20.0369 19.3624 20.0218 19.2032 19.377 24.4872C18.6672 30.3027 19.3999 43.386 20.7501 49.0079C21.6816 52.8867 21.6917 52.8484 19.7592 52.8484C18.1195 52.8484 18.1142 52.8445 17.429 51.1644C15.0735 45.3858 14.2481 29.3728 15.9632 22.7242Z\"\n        fill=\"#5F2E99\"\n      />\n      <path\n        d=\"M15.9632 22.7242C16.3427 21.2544 16.9177 19.8669 17.2554 19.6066C17.5901 19.3493 18.3191 19.1851 18.8752 19.2425C20.0369 19.3624 20.0218 19.2032 19.377 24.4872C18.6672 30.3027 19.3999 43.386 20.7501 49.0079C21.6816 52.8867 21.6917 52.8484 19.7592 52.8484C18.1195 52.8484 18.1142 52.8445 17.429 51.1644C15.0735 45.3858 14.2481 29.3728 15.9632 22.7242Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M20.6095 24.2164C20.4532 23.9501 20.9028 20.8765 21.2357 19.9378C21.502 19.1865 22.1841 19.6527 22.4794 20.7879C22.6439 21.421 22.6 22.2152 22.3672 22.8168C21.9722 23.8374 20.892 24.6975 20.6095 24.2164Z\"\n        fill=\"#5F2E99\"\n      />\n      <path\n        d=\"M20.6095 24.2164C20.4532 23.9501 20.9028 20.8765 21.2357 19.9378C21.502 19.1865 22.1841 19.6527 22.4794 20.7879C22.6439 21.421 22.6 22.2152 22.3672 22.8168C21.9722 23.8374 20.892 24.6975 20.6095 24.2164Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M22.2091 51.615C21.9509 51.2438 21.7399 50.6518 21.7399 50.2991C21.7399 49.5425 21.7861 49.5337 22.9037 50.0693C23.8899 50.5419 23.9977 51.1378 23.2202 51.8167C22.7595 52.2188 22.6075 52.1883 22.2091 51.615Z\"\n        fill=\"#5F2E99\"\n      />\n      <path\n        d=\"M22.2091 51.615C21.9509 51.2438 21.7399 50.6518 21.7399 50.2991C21.7399 49.5425 21.7861 49.5337 22.9037 50.0693C23.8899 50.5419 23.9977 51.1378 23.2202 51.8167C22.7595 52.2188 22.6075 52.1883 22.2091 51.615Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M52.2524 34.4136C50.8025 34.4136 49.8477 33.348 50.3724 32.316C50.9592 31.1631 53.5641 31.4407 53.9429 32.6964C54.2392 33.678 53.5149 34.4136 52.2524 34.4136Z\"\n        fill=\"#5F2E99\"\n      />\n      <path\n        d=\"M52.2524 34.4136C50.8025 34.4136 49.8477 33.348 50.3724 32.316C50.9592 31.1631 53.5641 31.4407 53.9429 32.6964C54.2392 33.678 53.5149 34.4136 52.2524 34.4136Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M55.9641 35.6268C55.1775 35.419 55.106 35.2414 55.106 33.4891C55.106 31.3474 55.2243 31.2762 57.6338 31.9693C59.386 32.4734 60.1615 33.2285 60.1615 34.4306C60.1615 35.429 59.6297 35.8728 58.2236 36.049C57.8063 36.1011 57.4652 35.9845 57.4652 35.7895C57.4652 35.5949 57.3207 35.5293 57.1437 35.6445C56.9668 35.7594 56.436 35.7516 55.9641 35.6268Z\"\n        fill=\"#5F2E99\"\n      />\n      <path\n        d=\"M55.9641 35.6268C55.1775 35.419 55.106 35.2414 55.106 33.4891C55.106 31.3474 55.2243 31.2762 57.6338 31.9693C59.386 32.4734 60.1615 33.2285 60.1615 34.4306C60.1615 35.429 59.6297 35.8728 58.2236 36.049C57.8063 36.1011 57.4652 35.9845 57.4652 35.7895C57.4652 35.5949 57.3207 35.5293 57.1437 35.6445C56.9668 35.7594 56.436 35.7516 55.9641 35.6268Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M60.7874 32.6857C60.7186 32.4074 61.5801 31.5332 62.7951 30.6473C63.9656 29.794 65.1789 29.0966 65.4913 29.0973C66.3062 29.0991 68.1434 30.3505 68.5738 31.1968C68.9951 32.0246 68.6843 33.8095 68.1768 33.4795C67.9904 33.3582 67.7177 33.4635 67.5711 33.7131C67.4245 33.963 66.8067 34.2247 66.1984 34.2945C65.5904 34.3647 64.8172 34.6841 64.4809 35.0046C63.9059 35.552 63.8682 35.5357 63.8557 34.7345C63.8442 33.9864 63.7758 34.0339 63.2989 35.1227C62.8931 36.0487 62.7192 36.2061 62.6131 35.7431C62.4631 35.0872 61.8467 34.8734 61.8467 35.4772C61.8467 35.6722 61.7149 35.8317 61.5541 35.8317C61.393 35.8317 61.1817 35.2336 61.0846 34.5023C60.9872 33.7713 60.8534 32.9537 60.7874 32.6857Z\"\n        fill=\"#5F2E99\"\n      />\n      <path\n        d=\"M60.7874 32.6857C60.7186 32.4074 61.5801 31.5332 62.7951 30.6473C63.9656 29.794 65.1789 29.0966 65.4913 29.0973C66.3062 29.0991 68.1434 30.3505 68.5738 31.1968C68.9951 32.0246 68.6843 33.8095 68.1768 33.4795C67.9904 33.3582 67.7177 33.4635 67.5711 33.7131C67.4245 33.963 66.8067 34.2247 66.1984 34.2945C65.5904 34.3647 64.8172 34.6841 64.4809 35.0046C63.9059 35.552 63.8682 35.5357 63.8557 34.7345C63.8442 33.9864 63.7758 34.0339 63.2989 35.1227C62.8931 36.0487 62.7192 36.2061 62.6131 35.7431C62.4631 35.0872 61.8467 34.8734 61.8467 35.4772C61.8467 35.6722 61.7149 35.8317 61.5541 35.8317C61.393 35.8317 61.1817 35.2336 61.0846 34.5023C60.9872 33.7713 60.8534 32.9537 60.7874 32.6857Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M59.7358 29.4451C59.2717 29.4547 58.0345 26.3495 58.2583 25.7362C58.6034 24.7896 59.2522 25.2654 60.1288 27.1078C60.8012 28.5212 60.8585 28.8634 60.4658 29.1246C60.2056 29.298 59.8774 29.4419 59.7358 29.4451Z\"\n        fill=\"#5F2E99\"\n      />\n      <path\n        d=\"M59.7358 29.4451C59.2717 29.4547 58.0345 26.3495 58.2583 25.7362C58.6034 24.7896 59.2522 25.2654 60.1288 27.1078C60.8012 28.5212 60.8585 28.8634 60.4658 29.1246C60.2056 29.298 59.8774 29.4419 59.7358 29.4451Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M61.1402 24.9977C60.8238 24.7921 60.8821 24.6546 61.3633 24.4706C62.1614 24.166 62.4351 24.3646 61.9377 24.8878C61.7348 25.1013 61.3755 25.1509 61.1402 24.9977Z\"\n        fill=\"#5F2E99\"\n      />\n      <path\n        d=\"M61.1402 24.9977C60.8238 24.7921 60.8821 24.6546 61.3633 24.4706C62.1614 24.166 62.4351 24.3646 61.9377 24.8878C61.7348 25.1013 61.3755 25.1509 61.1402 24.9977Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M63.5163 25.2268C63.098 26.0489 62.6606 25.8936 62.974 25.0342C63.0839 24.7333 63.3353 24.4872 63.5332 24.4872C63.7822 24.4872 63.7772 24.7138 63.5163 25.2268Z\"\n        fill=\"#5F2E99\"\n      />\n      <path\n        d=\"M63.5163 25.2268C63.098 26.0489 62.6606 25.8936 62.974 25.0342C63.0839 24.7333 63.3353 24.4872 63.5332 24.4872C63.7822 24.4872 63.7772 24.7138 63.5163 25.2268Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M64.3838 24.1327C63.7934 24.1327 63.4209 23.5446 63.705 23.061C63.8405 22.8306 64.37 22.9472 65.1573 23.3808C65.8388 23.7559 66.9193 24.2706 67.558 24.5241C69.2077 25.1792 70.8616 26.8185 71.1197 28.0551C71.2411 28.6361 71.237 29.7546 71.1106 30.5406L70.8811 31.97L69.0804 30.1782C67.8037 28.9084 67.0039 28.3855 66.3325 28.3816C65.8115 28.3784 65.158 28.2213 64.8799 28.0324C64.4691 27.753 64.5126 27.6878 65.1128 27.6832C65.5189 27.6803 65.9449 27.5183 66.0595 27.3233C66.1836 27.1124 65.7822 26.9688 65.0683 26.9688C64.4088 26.9688 63.8688 26.8022 63.8688 26.5984C63.8688 26.3669 64.3114 26.3151 65.0484 26.4605C65.6972 26.5884 66.2281 26.5842 66.2281 26.4512C66.2281 26.0556 65.2965 25.1963 64.8678 25.1963C64.6494 25.1963 64.5581 24.957 64.6649 24.6645C64.7808 24.3468 64.6676 24.1327 64.3838 24.1327Z\"\n        fill=\"#5F2E99\"\n      />\n      <path\n        d=\"M64.3838 24.1327C63.7934 24.1327 63.4209 23.5446 63.705 23.061C63.8405 22.8306 64.37 22.9472 65.1573 23.3808C65.8388 23.7559 66.9193 24.2706 67.558 24.5241C69.2077 25.1792 70.8616 26.8185 71.1197 28.0551C71.2411 28.6361 71.237 29.7546 71.1106 30.5406L70.8811 31.97L69.0804 30.1782C67.8037 28.9084 67.0039 28.3855 66.3325 28.3816C65.8115 28.3784 65.158 28.2213 64.8799 28.0324C64.4691 27.753 64.5126 27.6878 65.1128 27.6832C65.5189 27.6803 65.9449 27.5183 66.0595 27.3233C66.1836 27.1124 65.7822 26.9688 65.0683 26.9688C64.4088 26.9688 63.8688 26.8022 63.8688 26.5984C63.8688 26.3669 64.3114 26.3151 65.0484 26.4605C65.6972 26.5884 66.2281 26.5842 66.2281 26.4512C66.2281 26.0556 65.2965 25.1963 64.8678 25.1963C64.6494 25.1963 64.5581 24.957 64.6649 24.6645C64.7808 24.3468 64.6676 24.1327 64.3838 24.1327Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M52.5109 41.5039C51.7253 41.5039 50.7246 40.1135 50.7246 39.0223C50.7246 38.0829 50.8396 37.9588 51.7118 37.9588C52.2544 37.9588 52.9369 38.2094 53.2284 38.5157C54.1829 39.5201 53.7067 41.5039 52.5109 41.5039Z\"\n        fill=\"#5F2E99\"\n      />\n      <path\n        d=\"M52.5109 41.5039C51.7253 41.5039 50.7246 40.1135 50.7246 39.0223C50.7246 38.0829 50.8396 37.9588 51.7118 37.9588C52.2544 37.9588 52.9369 38.2094 53.2284 38.5157C54.1829 39.5201 53.7067 41.5039 52.5109 41.5039Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M51.5318 46.0403C51.0906 45.143 51.0765 44.9026 51.4513 44.6531C52.2001 44.1535 53.0444 44.2986 53.7579 45.0491C54.5523 45.8847 54.5799 46.1186 53.9851 46.9744C53.369 47.8607 52.2096 47.4193 51.5318 46.0403Z\"\n        fill=\"#5F2E99\"\n      />\n      <path\n        d=\"M51.5318 46.0403C51.0906 45.143 51.0765 44.9026 51.4513 44.6531C52.2001 44.1535 53.0444 44.2986 53.7579 45.0491C54.5523 45.8847 54.5799 46.1186 53.9851 46.9744C53.369 47.8607 52.2096 47.4193 51.5318 46.0403Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M54.985 41.4295C54.8711 40.9828 54.7761 40.0809 54.7737 39.425L54.769 38.2328L56.3699 38.4732C59.1726 38.894 60.4871 39.3832 60.9801 40.1883C61.5838 41.1739 61.3067 43.0521 60.5996 42.7667C60.3317 42.6586 59.8204 42.7344 59.4632 42.9358C58.96 43.2187 58.8134 43.185 58.8134 42.7865C58.8134 42.4157 58.4834 42.2994 57.6338 42.3703C56.6449 42.4529 56.4542 42.3533 56.4542 41.7542C56.4542 41.0781 56.4201 41.0721 55.8229 41.6404C55.2247 42.2101 55.1809 42.1988 54.985 41.4295Z\"\n        fill=\"#5F2E99\"\n      />\n      <path\n        d=\"M54.985 41.4295C54.8711 40.9828 54.7761 40.0809 54.7737 39.425L54.769 38.2328L56.3699 38.4732C59.1726 38.894 60.4871 39.3832 60.9801 40.1883C61.5838 41.1739 61.3067 43.0521 60.5996 42.7667C60.3317 42.6586 59.8204 42.7344 59.4632 42.9358C58.96 43.2187 58.8134 43.185 58.8134 42.7865C58.8134 42.4157 58.4834 42.2994 57.6338 42.3703C56.6449 42.4529 56.4542 42.3533 56.4542 41.7542C56.4542 41.0781 56.4201 41.0721 55.8229 41.6404C55.2247 42.2101 55.1809 42.1988 54.985 41.4295Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M56.289 47.8795C55.9284 48.4932 55.1343 46.9943 55.1178 45.6695C55.1043 44.562 55.6251 44.4372 57.4993 45.0994C59.2593 45.7209 59.7955 46.3505 59.5147 47.464C59.2181 48.6406 57.6493 48.9944 56.9823 48.0351C56.6516 47.5594 56.4976 47.5246 56.289 47.8795Z\"\n        fill=\"#5F2E99\"\n      />\n      <path\n        d=\"M56.289 47.8795C55.9284 48.4932 55.1343 46.9943 55.1178 45.6695C55.1043 44.562 55.6251 44.4372 57.4993 45.0994C59.2593 45.7209 59.7955 46.3505 59.5147 47.464C59.2181 48.6406 57.6493 48.9944 56.9823 48.0351C56.6516 47.5594 56.4976 47.5246 56.289 47.8795Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M62.8807 45.9609C64.0053 45.8269 65.2567 45.5773 65.6612 45.4057C66.797 44.9243 67.1862 44.9916 67.5644 45.7347C67.7562 46.1119 67.9132 46.5146 67.9132 46.6298C67.9132 46.8316 66.4155 47.5693 65.7225 47.7093C65.5371 47.7466 65.3096 47.8192 65.217 47.8706C65.1243 47.922 64.5129 47.9951 63.8587 48.033C63.2042 48.0706 62.4772 48.2262 62.243 48.3783C61.6529 48.7619 60.8356 47.9621 60.8356 47.0014C60.8356 46.2892 61.0536 46.1782 62.8807 45.9609Z\"\n        fill=\"#5F2E99\"\n      />\n      <path\n        d=\"M62.8807 45.9609C64.0053 45.8269 65.2567 45.5773 65.6612 45.4057C66.797 44.9243 67.1862 44.9916 67.5644 45.7347C67.7562 46.1119 67.9132 46.5146 67.9132 46.6298C67.9132 46.8316 66.4155 47.5693 65.7225 47.7093C65.5371 47.7466 65.3096 47.8192 65.217 47.8706C65.1243 47.922 64.5129 47.9951 63.8587 48.033C63.2042 48.0706 62.4772 48.2262 62.243 48.3783C61.6529 48.7619 60.8356 47.9621 60.8356 47.0014C60.8356 46.2892 61.0536 46.1782 62.8807 45.9609Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M62.0994 39.8547C61.9622 39.4782 64.4286 38.2668 66.3231 37.7801C68.7605 37.1537 69.4936 37.1601 69.7305 37.8095C70.0311 38.6338 69.6071 40.1507 68.8212 41.0608C68.1434 41.846 67.5381 42.1133 67.616 41.5925C67.7518 40.6878 67.4835 40.7733 66.8715 41.8294C66.3662 42.7011 66.0936 42.912 65.8991 42.5816C65.7309 42.2948 65.4566 42.236 65.1705 42.4246C64.918 42.5909 64.4462 42.6813 64.1216 42.6249C63.7971 42.5689 63.5318 42.6926 63.5318 42.8996C63.5318 43.107 63.3943 43.2765 63.2265 43.2765C63.0583 43.2765 63.0003 42.9574 63.097 42.5675C63.1941 42.1775 63.1152 41.8584 62.9218 41.8584C62.7283 41.8584 62.5008 42.1374 62.4159 42.4788C62.3313 42.8202 62.2444 42.4214 62.2228 41.5925C62.2012 40.7637 62.1456 39.982 62.0994 39.8547Z\"\n        fill=\"#5F2E99\"\n      />\n      <path\n        d=\"M62.0994 39.8547C61.9622 39.4782 64.4286 38.2668 66.3231 37.7801C68.7605 37.1537 69.4936 37.1601 69.7305 37.8095C70.0311 38.6338 69.6071 40.1507 68.8212 41.0608C68.1434 41.846 67.5381 42.1133 67.616 41.5925C67.7518 40.6878 67.4835 40.7733 66.8715 41.8294C66.3662 42.7011 66.0936 42.912 65.8991 42.5816C65.7309 42.2948 65.4566 42.236 65.1705 42.4246C64.918 42.5909 64.4462 42.6813 64.1216 42.6249C63.7971 42.5689 63.5318 42.6926 63.5318 42.8996C63.5318 43.107 63.3943 43.2765 63.2265 43.2765C63.0583 43.2765 63.0003 42.9574 63.097 42.5675C63.1941 42.1775 63.1152 41.8584 62.9218 41.8584C62.7283 41.8584 62.5008 42.1374 62.4159 42.4788C62.3313 42.8202 62.2444 42.4214 62.2228 41.5925C62.2012 40.7637 62.1456 39.982 62.0994 39.8547Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M52.9153 13.1368C55.3251 13.0871 59.1167 12.9379 61.3411 12.8049C63.5655 12.6716 65.613 12.6436 65.891 12.7418C66.6231 13.0013 80.0639 13.6178 83.2893 13.5402C84.7948 13.5037 86.7664 13.648 87.6707 13.8607C89.4293 14.274 91.1684 15.7024 91.1684 16.7333C91.1684 17.6912 90.5722 17.8578 90.1455 17.019L89.7626 16.2668L88.9918 17.0283C88.3339 17.6788 88.1917 17.7093 88.0201 17.2388C87.7239 16.4266 87.124 16.5692 87.124 17.4519C87.124 18.1911 87.1024 18.1953 86.4563 17.5802C85.9562 17.1041 85.6761 17.0428 85.3411 17.3353C85.0034 17.6299 84.7547 17.5551 84.327 17.0297C83.6974 16.2565 82.4271 16.0165 82.9859 16.7766C83.1652 17.0205 83.4082 17.5388 83.5258 17.9287C83.7132 18.5502 83.6728 18.5392 83.1999 17.8401C82.9034 17.4016 82.4413 17.0424 82.1733 17.0424C81.8235 17.0424 81.7521 17.2676 81.9192 17.8401C82.1501 18.6303 82.1433 18.6296 81.1865 17.7515C80.6554 17.264 80.1225 16.7251 80.0025 16.5539C79.8829 16.3827 79.6085 16.3568 79.3935 16.4968C79.1016 16.6865 79.1134 16.8953 79.44 17.3193C79.8101 17.7993 79.7993 17.839 79.3723 17.5753C79.0942 17.4037 78.6669 16.9715 78.4225 16.6149C77.7582 15.6464 77.2095 16.2324 77.8374 17.2399C78.6935 18.6147 78.4384 18.6782 77.1866 17.4023C75.9578 16.1494 75.3522 16.12 75.9747 17.3434C76.5972 18.5668 76.3801 18.6346 75.3046 17.5519C74.3633 16.6043 74.241 16.5663 73.94 17.1311C73.5349 17.8911 72.9687 17.9429 72.9687 17.2197C72.9687 16.9272 72.7412 16.6879 72.4631 16.6879C72.1851 16.6879 71.9576 16.4486 71.9576 16.1562C71.9576 15.8637 71.8059 15.6244 71.6206 15.6244C71.4352 15.6244 71.2835 15.7743 71.2835 15.958C71.2835 16.1416 71.4352 16.3901 71.6206 16.5107C71.8059 16.6312 71.9576 16.9676 71.9576 17.2587C71.9576 17.6472 71.6421 17.5345 70.7689 16.8336C69.4966 15.813 68.8576 15.9261 69.5269 17.0538C70.2121 18.2081 69.986 18.2896 68.9621 17.258L67.989 16.277L67.4269 17.1031L66.8644 17.9287L67.0754 16.8652L67.286 15.8016L66.6153 16.6039C66.2463 17.0453 65.8809 17.6036 65.8037 17.8447C65.6925 18.1925 65.5587 18.1921 65.1566 17.8433C64.8776 17.6012 64.5496 17.5079 64.4276 17.6362C64.3056 17.7646 64.2059 17.6036 64.2059 17.2789C64.2059 16.6911 63.3795 16.4461 63.1095 16.9538C63.032 17.0999 63.0124 17.0254 63.0667 16.7879C63.2612 15.9356 62.4159 15.8938 61.8079 16.7255L61.1874 17.5742L61.18 16.7766C61.1712 15.825 60.667 15.735 60.1885 16.5993C59.8989 17.1226 59.8433 17.0556 59.8346 16.1739C59.8272 15.3932 59.7274 15.2302 59.4416 15.5308C59.1561 15.8311 58.9381 15.8059 58.5818 15.4315C58.2549 15.0876 57.6068 14.9799 56.5212 15.0891C53.25 15.4184 50.2986 15.0728 47.3543 14.0159L46.5117 13.7135L47.5228 13.47C48.0789 13.3363 50.5055 13.186 52.9153 13.1368Z\"\n        fill=\"#5F2E99\"\n      />\n      <path\n        d=\"M52.9153 13.1368C55.3251 13.0871 59.1167 12.9379 61.3411 12.8049C63.5655 12.6716 65.613 12.6436 65.891 12.7418C66.6231 13.0013 80.0639 13.6178 83.2893 13.5402C84.7948 13.5037 86.7664 13.648 87.6707 13.8607C89.4293 14.274 91.1684 15.7024 91.1684 16.7333C91.1684 17.6912 90.5722 17.8578 90.1455 17.019L89.7626 16.2668L88.9918 17.0283C88.3339 17.6788 88.1917 17.7093 88.0201 17.2388C87.7239 16.4266 87.124 16.5692 87.124 17.4519C87.124 18.1911 87.1024 18.1953 86.4563 17.5802C85.9562 17.1041 85.6761 17.0428 85.3411 17.3353C85.0034 17.6299 84.7547 17.5551 84.327 17.0297C83.6974 16.2565 82.4271 16.0165 82.9859 16.7766C83.1652 17.0205 83.4082 17.5388 83.5258 17.9287C83.7132 18.5502 83.6728 18.5392 83.1999 17.8401C82.9034 17.4016 82.4413 17.0424 82.1733 17.0424C81.8235 17.0424 81.7521 17.2676 81.9192 17.8401C82.1501 18.6303 82.1433 18.6296 81.1865 17.7515C80.6554 17.264 80.1225 16.7251 80.0025 16.5539C79.8829 16.3827 79.6085 16.3568 79.3935 16.4968C79.1016 16.6865 79.1134 16.8953 79.44 17.3193C79.8101 17.7993 79.7993 17.839 79.3723 17.5753C79.0942 17.4037 78.6669 16.9715 78.4225 16.6149C77.7582 15.6464 77.2095 16.2324 77.8374 17.2399C78.6935 18.6147 78.4384 18.6782 77.1866 17.4023C75.9578 16.1494 75.3522 16.12 75.9747 17.3434C76.5972 18.5668 76.3801 18.6346 75.3046 17.5519C74.3633 16.6043 74.241 16.5663 73.94 17.1311C73.5349 17.8911 72.9687 17.9429 72.9687 17.2197C72.9687 16.9272 72.7412 16.6879 72.4631 16.6879C72.1851 16.6879 71.9576 16.4486 71.9576 16.1562C71.9576 15.8637 71.8059 15.6244 71.6206 15.6244C71.4352 15.6244 71.2835 15.7743 71.2835 15.958C71.2835 16.1416 71.4352 16.3901 71.6206 16.5107C71.8059 16.6312 71.9576 16.9676 71.9576 17.2587C71.9576 17.6472 71.6421 17.5345 70.7689 16.8336C69.4966 15.813 68.8576 15.9261 69.5269 17.0538C70.2121 18.2081 69.986 18.2896 68.9621 17.258L67.989 16.277L67.4269 17.1031L66.8644 17.9287L67.0754 16.8652L67.286 15.8016L66.6153 16.6039C66.2463 17.0453 65.8809 17.6036 65.8037 17.8447C65.6925 18.1925 65.5587 18.1921 65.1566 17.8433C64.8776 17.6012 64.5496 17.5079 64.4276 17.6362C64.3056 17.7646 64.2059 17.6036 64.2059 17.2789C64.2059 16.6911 63.3795 16.4461 63.1095 16.9538C63.032 17.0999 63.0124 17.0254 63.0667 16.7879C63.2612 15.9356 62.4159 15.8938 61.8079 16.7255L61.1874 17.5742L61.18 16.7766C61.1712 15.825 60.667 15.735 60.1885 16.5993C59.8989 17.1226 59.8433 17.0556 59.8346 16.1739C59.8272 15.3932 59.7274 15.2302 59.4416 15.5308C59.1561 15.8311 58.9381 15.8059 58.5818 15.4315C58.2549 15.0876 57.6068 14.9799 56.5212 15.0891C53.25 15.4184 50.2986 15.0728 47.3543 14.0159L46.5117 13.7135L47.5228 13.47C48.0789 13.3363 50.5055 13.186 52.9153 13.1368Z\"\n        fill=\"black\"\n        fillOpacity=\"0.2\"\n      />\n      <path\n        d=\"M52.9153 13.1368C55.3251 13.0871 59.1167 12.9379 61.3411 12.8049C63.5655 12.6716 65.613 12.6436 65.891 12.7418C66.6231 13.0013 80.0639 13.6178 83.2893 13.5402C84.7948 13.5037 86.7664 13.648 87.6707 13.8607C89.4293 14.274 91.1684 15.7024 91.1684 16.7333C91.1684 17.6912 90.5722 17.8578 90.1455 17.019L89.7626 16.2668L88.9918 17.0283C88.3339 17.6788 88.1917 17.7093 88.0201 17.2388C87.7239 16.4266 87.124 16.5692 87.124 17.4519C87.124 18.1911 87.1024 18.1953 86.4563 17.5802C85.9562 17.1041 85.6761 17.0428 85.3411 17.3353C85.0034 17.6299 84.7547 17.5551 84.327 17.0297C83.6974 16.2565 82.4271 16.0165 82.9859 16.7766C83.1652 17.0205 83.4082 17.5388 83.5258 17.9287C83.7132 18.5502 83.6728 18.5392 83.1999 17.8401C82.9034 17.4016 82.4413 17.0424 82.1733 17.0424C81.8235 17.0424 81.7521 17.2676 81.9192 17.8401C82.1501 18.6303 82.1433 18.6296 81.1865 17.7515C80.6554 17.264 80.1225 16.7251 80.0025 16.5539C79.8829 16.3827 79.6085 16.3568 79.3935 16.4968C79.1016 16.6865 79.1134 16.8953 79.44 17.3193C79.8101 17.7993 79.7993 17.839 79.3723 17.5753C79.0942 17.4037 78.6669 16.9715 78.4225 16.6149C77.7582 15.6464 77.2095 16.2324 77.8374 17.2399C78.6935 18.6147 78.4384 18.6782 77.1866 17.4023C75.9578 16.1494 75.3522 16.12 75.9747 17.3434C76.5972 18.5668 76.3801 18.6346 75.3046 17.5519C74.3633 16.6043 74.241 16.5663 73.94 17.1311C73.5349 17.8911 72.9687 17.9429 72.9687 17.2197C72.9687 16.9272 72.7412 16.6879 72.4631 16.6879C72.1851 16.6879 71.9576 16.4486 71.9576 16.1562C71.9576 15.8637 71.8059 15.6244 71.6206 15.6244C71.4352 15.6244 71.2835 15.7743 71.2835 15.958C71.2835 16.1416 71.4352 16.3901 71.6206 16.5107C71.8059 16.6312 71.9576 16.9676 71.9576 17.2587C71.9576 17.6472 71.6421 17.5345 70.7689 16.8336C69.4966 15.813 68.8576 15.9261 69.5269 17.0538C70.2121 18.2081 69.986 18.2896 68.9621 17.258L67.989 16.277L67.4269 17.1031L66.8644 17.9287L67.0754 16.8652L67.286 15.8016L66.6153 16.6039C66.2463 17.0453 65.8809 17.6036 65.8037 17.8447C65.6925 18.1925 65.5587 18.1921 65.1566 17.8433C64.8776 17.6012 64.5496 17.5079 64.4276 17.6362C64.3056 17.7646 64.2059 17.6036 64.2059 17.2789C64.2059 16.6911 63.3795 16.4461 63.1095 16.9538C63.032 17.0999 63.0124 17.0254 63.0667 16.7879C63.2612 15.9356 62.4159 15.8938 61.8079 16.7255L61.1874 17.5742L61.18 16.7766C61.1712 15.825 60.667 15.735 60.1885 16.5993C59.8989 17.1226 59.8433 17.0556 59.8346 16.1739C59.8272 15.3932 59.7274 15.2302 59.4416 15.5308C59.1561 15.8311 58.9381 15.8059 58.5818 15.4315C58.2549 15.0876 57.6068 14.9799 56.5212 15.0891C53.25 15.4184 50.2986 15.0728 47.3543 14.0159L46.5117 13.7135L47.5228 13.47C48.0789 13.3363 50.5055 13.186 52.9153 13.1368Z\"\n        fill=\"#5F2E99\"\n      />\n      <path\n        d=\"M52.9153 13.1368C55.3251 13.0871 59.1167 12.9379 61.3411 12.8049C63.5655 12.6716 65.613 12.6436 65.891 12.7418C66.6231 13.0013 80.0639 13.6178 83.2893 13.5402C84.7948 13.5037 86.7664 13.648 87.6707 13.8607C89.4293 14.274 91.1684 15.7024 91.1684 16.7333C91.1684 17.6912 90.5722 17.8578 90.1455 17.019L89.7626 16.2668L88.9918 17.0283C88.3339 17.6788 88.1917 17.7093 88.0201 17.2388C87.7239 16.4266 87.124 16.5692 87.124 17.4519C87.124 18.1911 87.1024 18.1953 86.4563 17.5802C85.9562 17.1041 85.6761 17.0428 85.3411 17.3353C85.0034 17.6299 84.7547 17.5551 84.327 17.0297C83.6974 16.2565 82.4271 16.0165 82.9859 16.7766C83.1652 17.0205 83.4082 17.5388 83.5258 17.9287C83.7132 18.5502 83.6728 18.5392 83.1999 17.8401C82.9034 17.4016 82.4413 17.0424 82.1733 17.0424C81.8235 17.0424 81.7521 17.2676 81.9192 17.8401C82.1501 18.6303 82.1433 18.6296 81.1865 17.7515C80.6554 17.264 80.1225 16.7251 80.0025 16.5539C79.8829 16.3827 79.6085 16.3568 79.3935 16.4968C79.1016 16.6865 79.1134 16.8953 79.44 17.3193C79.8101 17.7993 79.7993 17.839 79.3723 17.5753C79.0942 17.4037 78.6669 16.9715 78.4225 16.6149C77.7582 15.6464 77.2095 16.2324 77.8374 17.2399C78.6935 18.6147 78.4384 18.6782 77.1866 17.4023C75.9578 16.1494 75.3522 16.12 75.9747 17.3434C76.5972 18.5668 76.3801 18.6346 75.3046 17.5519C74.3633 16.6043 74.241 16.5663 73.94 17.1311C73.5349 17.8911 72.9687 17.9429 72.9687 17.2197C72.9687 16.9272 72.7412 16.6879 72.4631 16.6879C72.1851 16.6879 71.9576 16.4486 71.9576 16.1562C71.9576 15.8637 71.8059 15.6244 71.6206 15.6244C71.4352 15.6244 71.2835 15.7743 71.2835 15.958C71.2835 16.1416 71.4352 16.3901 71.6206 16.5107C71.8059 16.6312 71.9576 16.9676 71.9576 17.2587C71.9576 17.6472 71.6421 17.5345 70.7689 16.8336C69.4966 15.813 68.8576 15.9261 69.5269 17.0538C70.2121 18.2081 69.986 18.2896 68.9621 17.258L67.989 16.277L67.4269 17.1031L66.8644 17.9287L67.0754 16.8652L67.286 15.8016L66.6153 16.6039C66.2463 17.0453 65.8809 17.6036 65.8037 17.8447C65.6925 18.1925 65.5587 18.1921 65.1566 17.8433C64.8776 17.6012 64.5496 17.5079 64.4276 17.6362C64.3056 17.7646 64.2059 17.6036 64.2059 17.2789C64.2059 16.6911 63.3795 16.4461 63.1095 16.9538C63.032 17.0999 63.0124 17.0254 63.0667 16.7879C63.2612 15.9356 62.4159 15.8938 61.8079 16.7255L61.1874 17.5742L61.18 16.7766C61.1712 15.825 60.667 15.735 60.1885 16.5993C59.8989 17.1226 59.8433 17.0556 59.8346 16.1739C59.8272 15.3932 59.7274 15.2302 59.4416 15.5308C59.1561 15.8311 58.9381 15.8059 58.5818 15.4315C58.2549 15.0876 57.6068 14.9799 56.5212 15.0891C53.25 15.4184 50.2986 15.0728 47.3543 14.0159L46.5117 13.7135L47.5228 13.47C48.0789 13.3363 50.5055 13.186 52.9153 13.1368Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M40.4206 15.6067C41.5193 15.4173 42.4923 15.1844 42.5833 15.0891C43.0814 14.5647 46.6813 15.3631 51.0617 16.9694C53.8233 17.9819 56.4676 20.2136 57.656 22.5346C58.2684 23.7307 58.2697 23.8229 57.6968 24.9417C57.1434 26.023 57.1393 26.201 57.6402 27.4616C58.2849 29.0853 58.1413 29.3458 57.0244 28.5762C56.4322 28.1682 56.2344 27.7718 56.3463 27.2184C56.4885 26.5143 56.4585 26.4952 56.045 27.0227C55.6271 27.5556 55.4875 27.5002 54.5031 26.4119C53.9079 25.7539 53.4209 24.9669 53.4209 24.6631C53.4209 24.3593 53.1934 24.0186 52.9153 23.9065C52.6373 23.7942 52.4098 23.3134 52.4098 22.8384C52.4098 22.2736 52.2413 22.0106 51.9231 22.0787C51.6552 22.1361 51.2052 21.8638 50.9228 21.4739C50.4307 20.795 50.4071 20.8177 50.3623 22.0056L50.3158 23.2464L49.9498 22.2715C49.5454 21.1956 49.0395 20.9736 49.0395 21.8716C49.0395 22.3428 48.9481 22.3672 48.5339 22.0056C48.1197 21.644 48.0284 21.6685 48.0284 22.1396C48.0284 22.8859 47.7089 22.8696 47.1494 22.0943C46.7295 21.5125 46.7005 21.5178 46.6836 22.1829C46.6668 22.8352 46.6125 22.821 46.0062 22.0056C45.4005 21.1913 45.3459 21.1768 45.3321 21.8284C45.3183 22.48 45.2637 22.4654 44.6581 21.6511L43.9988 20.7648L43.9715 21.8284C43.9473 22.7824 43.9031 22.8249 43.5428 22.2407C43.3221 21.8826 42.9416 21.3243 42.6972 20.9999C42.3083 20.4837 42.2776 20.5316 42.4508 21.3852C42.6911 22.5686 42.4404 22.6225 41.6234 21.5625C40.8948 20.617 40.3963 20.9162 40.9352 21.9751C41.3437 22.7781 40.9915 22.9703 40.3498 22.2953C39.5146 21.4168 39.5598 22.3818 40.4034 23.4357C41.4657 24.7641 41.5567 25.3725 40.6137 24.8417C40.1567 24.5844 39.9396 24.5805 39.9396 24.8293C39.9396 25.0311 39.7121 25.1963 39.4341 25.1963C38.7442 25.1963 38.7991 25.5373 39.641 26.4803L40.3538 27.2783L39.641 27.0823C39.0135 26.9096 38.9285 27.0376 38.9285 28.1572C38.9285 29.103 38.8075 29.3792 38.455 29.237C38.1358 29.1083 37.9087 29.3944 37.7584 30.1141C37.5989 30.877 37.389 31.1234 37.0229 30.9759C36.6657 30.8316 36.5316 30.9713 36.5791 31.4393C36.7847 33.4653 36.6758 33.5461 34.7156 32.8297C34.0854 32.5992 34.08 32.6166 34.6314 33.0945C35.5235 33.8677 35.3428 34.1431 34.1258 33.8659L33.0305 33.616L33.6725 34.3693C34.23 35.0234 34.2424 35.1227 33.7672 35.1227C33.4086 35.1227 33.29 35.3145 33.4231 35.6793C33.5943 36.1483 33.4198 36.2 32.3173 36.0082L31.0083 35.7803L31.8455 36.4904L32.683 37.2008L31.1714 37.3139C29.86 37.4121 29.6635 37.5305 29.6854 38.2105C29.7185 39.2322 28.8135 39.6147 28.5807 38.6777C28.4401 38.1123 28.2824 38.0453 27.7694 38.3342C26.1989 39.2184 27.9484 40.0859 31.3018 40.0859C36.0435 40.0859 42.0218 37.5075 45.317 34.041C46.2347 33.0761 47.1329 32.2865 47.3135 32.2865C47.4942 32.2865 47.7186 33.6826 47.8127 35.3885C47.9067 37.0948 48.0024 38.7784 48.0257 39.1301C48.0486 39.4818 48.2791 39.8547 48.5376 39.9593C48.9111 40.11 48.9262 40.2865 48.6101 40.8186C48.2272 41.4635 48.1976 41.4589 47.8079 40.6985C47.4551 40.0103 47.3749 39.9852 47.1834 40.5031C46.8713 41.3483 47.1103 42.6628 47.6071 42.8351C47.839 42.9152 48.0284 42.7192 48.0284 42.3987C48.0284 42.0786 48.18 41.9151 48.3654 42.0357C48.5508 42.1562 48.7024 42.6348 48.7024 43.0992C48.7024 44.0256 49.2066 44.5616 49.5416 43.9912C49.8069 43.5395 50.3876 43.5193 50.3876 43.9618C50.3876 44.1436 50.0843 44.3936 49.7135 44.5173C48.9309 44.7786 48.7978 45.7581 49.545 45.7581C49.8231 45.7581 50.0506 45.9293 50.0506 46.1385C50.0506 47.0205 48.8403 46.1817 48.4945 45.0604C48.2876 44.389 47.9461 43.7795 47.7362 43.7058C47.237 43.5307 47.2593 43.8462 47.8781 45.7148C48.5191 47.6515 48.2555 48.056 47.475 46.3338C47.1544 45.6273 46.7689 45.0491 46.6179 45.0491C46.2546 45.0491 46.2714 45.294 46.6991 46.2246C47.0533 46.9943 47.0517 46.9943 46.3924 46.2012C46.0278 45.7623 45.6402 45.4036 45.531 45.4036C45.4214 45.4036 45.3197 45.7623 45.3045 46.2012C45.2812 46.8805 45.2061 46.8277 44.7983 45.8467C44.1036 44.1762 43.8644 44.4297 44.1286 46.5557C44.3402 48.2571 44.317 48.356 43.8583 47.7079C43.3632 47.0085 43.3524 47.0106 43.0504 47.8607C42.7481 48.7122 42.742 48.7091 42.53 47.5948C42.4121 46.9744 42.1411 46.4671 41.9281 46.4671C41.6757 46.4671 41.6123 46.8443 41.7461 47.5484C41.8685 48.1915 41.8226 48.5456 41.6329 48.4223C41.4573 48.3081 41.2149 47.6604 41.094 46.9826C40.9733 46.3047 40.7502 45.6698 40.5989 45.5713C40.1182 45.2586 39.8945 46.0704 40.2618 46.7929C40.4758 47.213 40.4913 47.5682 40.3019 47.6916C40.1294 47.8036 39.8911 47.5743 39.7728 47.1815C39.4823 46.2193 38.9299 46.2735 38.9235 47.2648C38.9191 47.9252 38.8567 47.971 38.5608 47.5307C38.2915 47.1304 38.1608 47.1084 38.0324 47.442C37.7759 48.1064 37.3162 47.9763 37.0732 47.1708C36.8096 46.2977 36.2323 46.5887 36.2323 47.5948C36.2323 48.1667 36.1335 48.2404 35.78 47.9316C35.5313 47.7146 35.2262 47.6434 35.1025 47.7739C34.9785 47.904 34.656 47.7033 34.3857 47.3275C33.9192 46.6788 33.894 46.6968 33.8838 47.687C33.8734 48.6899 33.8532 48.7034 33.3463 48.0415C32.9287 47.4959 32.7797 47.4562 32.6271 47.8501C32.4845 48.2184 32.3092 48.1262 31.951 47.4956C31.6851 47.0276 31.5489 46.9234 31.6486 47.2648C31.7481 47.6062 31.7434 48.122 31.6375 48.412C31.4822 48.8374 31.3251 48.7867 30.8169 48.1461C30.2116 47.3828 30.1866 47.3796 30.1495 48.0624C30.1202 48.5981 29.9938 48.49 29.6319 47.6193C29.004 46.1094 28.6861 46.1516 28.9639 47.7079C29.2402 49.2571 29.0053 49.2866 28.2534 47.7965C27.765 46.8291 27.6498 46.7543 27.5342 47.3293C27.4054 47.9688 27.3522 47.9571 26.731 47.152L26.0657 46.2899L26.2562 47.5307C26.4331 48.6846 26.4115 48.7232 25.9468 48.0833C25.6721 47.7047 25.4473 47.2662 25.4473 47.1084C25.4473 46.4118 24.7705 46.9046 24.7456 47.6193C24.7223 48.2936 24.6431 48.2365 24.233 47.2485C23.7463 46.0771 22.9735 45.9556 23.2819 47.0989C23.3722 47.4339 23.2701 47.3573 23.055 46.929C22.8397 46.5004 22.3452 46.1016 21.9556 46.0428C21.3985 45.958 21.1575 45.5202 20.8249 43.9855C20.2715 41.4337 19.8913 33.3625 20.2014 30.7519C20.4211 28.9024 20.6207 28.5092 22.2216 26.7707C23.1983 25.71 24.172 24.8417 24.3853 24.8417C24.5986 24.8417 24.7732 24.6822 24.7732 24.4872C24.7732 24.2923 25.0054 24.1327 25.2892 24.1327C25.5733 24.1327 25.8928 23.8934 25.9993 23.6009C26.1062 23.3085 26.4644 23.0692 26.7954 23.0692C27.1264 23.0692 27.4856 22.8274 27.5932 22.5321C27.701 22.2368 28.1344 21.8337 28.5561 21.6366C29.3363 21.2725 29.8324 20.9063 33.3048 18.1333C35.262 16.5702 35.6738 16.4242 40.4206 15.6067Z\"\n        fill=\"#5F2E99\"\n      />\n      <path\n        d=\"M40.4206 15.6067C41.5193 15.4173 42.4923 15.1844 42.5833 15.0891C43.0814 14.5647 46.6813 15.3631 51.0617 16.9694C53.8233 17.9819 56.4676 20.2136 57.656 22.5346C58.2684 23.7307 58.2697 23.8229 57.6968 24.9417C57.1434 26.023 57.1393 26.201 57.6402 27.4616C58.2849 29.0853 58.1413 29.3458 57.0244 28.5762C56.4322 28.1682 56.2344 27.7718 56.3463 27.2184C56.4885 26.5143 56.4585 26.4952 56.045 27.0227C55.6271 27.5556 55.4875 27.5002 54.5031 26.4119C53.9079 25.7539 53.4209 24.9669 53.4209 24.6631C53.4209 24.3593 53.1934 24.0186 52.9153 23.9065C52.6373 23.7942 52.4098 23.3134 52.4098 22.8384C52.4098 22.2736 52.2413 22.0106 51.9231 22.0787C51.6552 22.1361 51.2052 21.8638 50.9228 21.4739C50.4307 20.795 50.4071 20.8177 50.3623 22.0056L50.3158 23.2464L49.9498 22.2715C49.5454 21.1956 49.0395 20.9736 49.0395 21.8716C49.0395 22.3428 48.9481 22.3672 48.5339 22.0056C48.1197 21.644 48.0284 21.6685 48.0284 22.1396C48.0284 22.8859 47.7089 22.8696 47.1494 22.0943C46.7295 21.5125 46.7005 21.5178 46.6836 22.1829C46.6668 22.8352 46.6125 22.821 46.0062 22.0056C45.4005 21.1913 45.3459 21.1768 45.3321 21.8284C45.3183 22.48 45.2637 22.4654 44.6581 21.6511L43.9988 20.7648L43.9715 21.8284C43.9473 22.7824 43.9031 22.8249 43.5428 22.2407C43.3221 21.8826 42.9416 21.3243 42.6972 20.9999C42.3083 20.4837 42.2776 20.5316 42.4508 21.3852C42.6911 22.5686 42.4404 22.6225 41.6234 21.5625C40.8948 20.617 40.3963 20.9162 40.9352 21.9751C41.3437 22.7781 40.9915 22.9703 40.3498 22.2953C39.5146 21.4168 39.5598 22.3818 40.4034 23.4357C41.4657 24.7641 41.5567 25.3725 40.6137 24.8417C40.1567 24.5844 39.9396 24.5805 39.9396 24.8293C39.9396 25.0311 39.7121 25.1963 39.4341 25.1963C38.7442 25.1963 38.7991 25.5373 39.641 26.4803L40.3538 27.2783L39.641 27.0823C39.0135 26.9096 38.9285 27.0376 38.9285 28.1572C38.9285 29.103 38.8075 29.3792 38.455 29.237C38.1358 29.1083 37.9087 29.3944 37.7584 30.1141C37.5989 30.877 37.389 31.1234 37.0229 30.9759C36.6657 30.8316 36.5316 30.9713 36.5791 31.4393C36.7847 33.4653 36.6758 33.5461 34.7156 32.8297C34.0854 32.5992 34.08 32.6166 34.6314 33.0945C35.5235 33.8677 35.3428 34.1431 34.1258 33.8659L33.0305 33.616L33.6725 34.3693C34.23 35.0234 34.2424 35.1227 33.7672 35.1227C33.4086 35.1227 33.29 35.3145 33.4231 35.6793C33.5943 36.1483 33.4198 36.2 32.3173 36.0082L31.0083 35.7803L31.8455 36.4904L32.683 37.2008L31.1714 37.3139C29.86 37.4121 29.6635 37.5305 29.6854 38.2105C29.7185 39.2322 28.8135 39.6147 28.5807 38.6777C28.4401 38.1123 28.2824 38.0453 27.7694 38.3342C26.1989 39.2184 27.9484 40.0859 31.3018 40.0859C36.0435 40.0859 42.0218 37.5075 45.317 34.041C46.2347 33.0761 47.1329 32.2865 47.3135 32.2865C47.4942 32.2865 47.7186 33.6826 47.8127 35.3885C47.9067 37.0948 48.0024 38.7784 48.0257 39.1301C48.0486 39.4818 48.2791 39.8547 48.5376 39.9593C48.9111 40.11 48.9262 40.2865 48.6101 40.8186C48.2272 41.4635 48.1976 41.4589 47.8079 40.6985C47.4551 40.0103 47.3749 39.9852 47.1834 40.5031C46.8713 41.3483 47.1103 42.6628 47.6071 42.8351C47.839 42.9152 48.0284 42.7192 48.0284 42.3987C48.0284 42.0786 48.18 41.9151 48.3654 42.0357C48.5508 42.1562 48.7024 42.6348 48.7024 43.0992C48.7024 44.0256 49.2066 44.5616 49.5416 43.9912C49.8069 43.5395 50.3876 43.5193 50.3876 43.9618C50.3876 44.1436 50.0843 44.3936 49.7135 44.5173C48.9309 44.7786 48.7978 45.7581 49.545 45.7581C49.8231 45.7581 50.0506 45.9293 50.0506 46.1385C50.0506 47.0205 48.8403 46.1817 48.4945 45.0604C48.2876 44.389 47.9461 43.7795 47.7362 43.7058C47.237 43.5307 47.2593 43.8462 47.8781 45.7148C48.5191 47.6515 48.2555 48.056 47.475 46.3338C47.1544 45.6273 46.7689 45.0491 46.6179 45.0491C46.2546 45.0491 46.2714 45.294 46.6991 46.2246C47.0533 46.9943 47.0517 46.9943 46.3924 46.2012C46.0278 45.7623 45.6402 45.4036 45.531 45.4036C45.4214 45.4036 45.3197 45.7623 45.3045 46.2012C45.2812 46.8805 45.2061 46.8277 44.7983 45.8467C44.1036 44.1762 43.8644 44.4297 44.1286 46.5557C44.3402 48.2571 44.317 48.356 43.8583 47.7079C43.3632 47.0085 43.3524 47.0106 43.0504 47.8607C42.7481 48.7122 42.742 48.7091 42.53 47.5948C42.4121 46.9744 42.1411 46.4671 41.9281 46.4671C41.6757 46.4671 41.6123 46.8443 41.7461 47.5484C41.8685 48.1915 41.8226 48.5456 41.6329 48.4223C41.4573 48.3081 41.2149 47.6604 41.094 46.9826C40.9733 46.3047 40.7502 45.6698 40.5989 45.5713C40.1182 45.2586 39.8945 46.0704 40.2618 46.7929C40.4758 47.213 40.4913 47.5682 40.3019 47.6916C40.1294 47.8036 39.8911 47.5743 39.7728 47.1815C39.4823 46.2193 38.9299 46.2735 38.9235 47.2648C38.9191 47.9252 38.8567 47.971 38.5608 47.5307C38.2915 47.1304 38.1608 47.1084 38.0324 47.442C37.7759 48.1064 37.3162 47.9763 37.0732 47.1708C36.8096 46.2977 36.2323 46.5887 36.2323 47.5948C36.2323 48.1667 36.1335 48.2404 35.78 47.9316C35.5313 47.7146 35.2262 47.6434 35.1025 47.7739C34.9785 47.904 34.656 47.7033 34.3857 47.3275C33.9192 46.6788 33.894 46.6968 33.8838 47.687C33.8734 48.6899 33.8532 48.7034 33.3463 48.0415C32.9287 47.4959 32.7797 47.4562 32.6271 47.8501C32.4845 48.2184 32.3092 48.1262 31.951 47.4956C31.6851 47.0276 31.5489 46.9234 31.6486 47.2648C31.7481 47.6062 31.7434 48.122 31.6375 48.412C31.4822 48.8374 31.3251 48.7867 30.8169 48.1461C30.2116 47.3828 30.1866 47.3796 30.1495 48.0624C30.1202 48.5981 29.9938 48.49 29.6319 47.6193C29.004 46.1094 28.6861 46.1516 28.9639 47.7079C29.2402 49.2571 29.0053 49.2866 28.2534 47.7965C27.765 46.8291 27.6498 46.7543 27.5342 47.3293C27.4054 47.9688 27.3522 47.9571 26.731 47.152L26.0657 46.2899L26.2562 47.5307C26.4331 48.6846 26.4115 48.7232 25.9468 48.0833C25.6721 47.7047 25.4473 47.2662 25.4473 47.1084C25.4473 46.4118 24.7705 46.9046 24.7456 47.6193C24.7223 48.2936 24.6431 48.2365 24.233 47.2485C23.7463 46.0771 22.9735 45.9556 23.2819 47.0989C23.3722 47.4339 23.2701 47.3573 23.055 46.929C22.8397 46.5004 22.3452 46.1016 21.9556 46.0428C21.3985 45.958 21.1575 45.5202 20.8249 43.9855C20.2715 41.4337 19.8913 33.3625 20.2014 30.7519C20.4211 28.9024 20.6207 28.5092 22.2216 26.7707C23.1983 25.71 24.172 24.8417 24.3853 24.8417C24.5986 24.8417 24.7732 24.6822 24.7732 24.4872C24.7732 24.2923 25.0054 24.1327 25.2892 24.1327C25.5733 24.1327 25.8928 23.8934 25.9993 23.6009C26.1062 23.3085 26.4644 23.0692 26.7954 23.0692C27.1264 23.0692 27.4856 22.8274 27.5932 22.5321C27.701 22.2368 28.1344 21.8337 28.5561 21.6366C29.3363 21.2725 29.8324 20.9063 33.3048 18.1333C35.262 16.5702 35.6738 16.4242 40.4206 15.6067Z\"\n        fill=\"white\"\n      />\n    </svg>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"i6nKFuwCXjBwf0XoFoQL\",\"sign\":\"cBNze6Jowwb_Uu8oK6Kw\",\"info\":\"LUkCkVuS9So_2GN27SzA\",\"title\":\"Kr3CImEjQaMCcYzgHwY8\",\"description\":\"Vpg3UEgyVMJQErng12JR\",\"buttons\":\"b1cNMYrlQ0zpmWjziPIJ\",\"link\":\"BPFu_QOTQ4tpN4JqyZEN\",\"primary-button\":\"eHA_Z3XccxCiCo360hvQ\",\"secondary-button\":\"huOhTeue2DDuz99tjhLb\"};","import { Button } from '@popup/shared/components/Button';\nimport { useHandlePremiumWithoutTelegram } from '@popup/shared/hooks/useHandlePremiumWithoutTelegram';\nimport { forwardRef, useCallback } from 'react';\nimport { StepProps } from '../../types';\nimport { VrubelIcon } from '../VrubelIcon';\n\nimport styles from './WelcomeStep.module.css';\nimport { useTranslation } from 'react-i18next';\n\nexport const WelcomeStep = forwardRef<HTMLDivElement, StepProps>(\n  ({ onStepChange }, ref) => {\n    const { t } = useTranslation();\n\n    const { handleClick, loading } = useHandlePremiumWithoutTelegram();\n\n    const handleTrial = useCallback(() => {\n      handleClick(false, false, true);\n    }, [handleClick]);\n\n    const handleLogIn = useCallback(() => {\n      onStepChange(1);\n    }, [onStepChange]);\n\n    return (\n      <div className={styles.wrapper} ref={ref}>\n        <div className={styles.sign}>\n          <VrubelIcon />\n        </div>\n        <div className={styles.info}>\n          <h1 className={styles.title}>\n            <span>{t('title', { ns: 'vrubel' })}</span>\n            <br />\n            <span>за 1 рубль в день!</span>\n          </h1>\n          <p className={styles.description}>\n            ВРубель - это простой и понятный <strong>ВПН для YouTube</strong>,\n            работающий прямо из браузера.\n          </p>\n          <br />\n          <p className={styles.description}>\n            4К-качество, быстрая загрузка и никакой рекламы всего за 1 рубль в\n            день!\n            <br />\n            <strong>Попробуйте бесплатно по кнопке ниже.</strong>\n          </p>\n        </div>\n        <div className={styles.buttons}>\n          <Button\n            className={styles['primary-button']}\n            onClick={handleTrial}\n            loading={loading}\n            disabled={loading}\n          >\n            Попробовать 24 часа бесплатно\n          </Button>\n          <Button\n            className={styles['secondary-button']}\n            variant=\"link\"\n            onClick={handleLogIn}\n          >\n            У меня есть ID для входа\n          </Button>\n        </div>\n      </div>\n    );\n  },\n);\n\nWelcomeStep.displayName = 'WelcomeStep';\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"O7v4G5YM9lJ2UZKu3HRS\",\"switcher\":\"wKExTybqp0JcwU8KOg3k\",\"page-enter-left\":\"QXLvi2JgDemAqGXcKSsE\",\"page-enter-active-left\":\"zgMbSvjggdzzP3B701TD\",\"page-exit-left\":\"Mqp9xBTUB8C3h6FtG53F\",\"page-exit-active-left\":\"aamYFWkjqDPuLN2wNxST\",\"page-enter-right\":\"nRcFwEmJ3YBEvPhamWMv\",\"page-enter-active-right\":\"ad_z3QsDk6KEGeGtHfYb\",\"page-exit-right\":\"_BilCwdVo9IsevrERxHy\",\"page-exit-active-right\":\"L7b6ZhQr3xPpe62VzZlc\"};","import { setLocalStorageData } from '@app/storage/local/shared';\nimport { memo, useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { CSSTransition, SwitchTransition } from 'react-transition-group';\nimport { EnterIdStep } from './components/EnterIdStep/EnterIdStep';\nimport { WelcomeStep } from './components/WelcomeStep/WelcomeStep';\nimport { OnboardingStep, stepMap, stepMapReverse } from './constants';\nimport { LimitedOnboardingStatus } from './types';\n\nimport styles from './Onboarding.module.css';\n\nfunction RawOnboarding({\n  onboardingStatus,\n}: {\n  onboardingStatus: LimitedOnboardingStatus;\n}): JSX.Element {\n  const [step, setStep] = useState(onboardingStatus);\n  const [isReversed, setIsReversed] = useState(false);\n  const [hasInteracted, setHasInteracted] = useState(false);\n\n  const zeroRef = useRef<HTMLDivElement>(null);\n  const oneRef = useRef<HTMLDivElement>(null);\n\n  const stepRefs = useMemo(\n    () => ({\n      [OnboardingStep.StepZero]: zeroRef,\n      [OnboardingStep.StepOne]: oneRef,\n      [OnboardingStep.Done]: null,\n    }),\n    [],\n  );\n\n  useEffect(() => {\n    if (onboardingStatus !== OnboardingStep.Done) {\n      setStep(onboardingStatus);\n    }\n  }, [onboardingStatus]);\n\n  const handleStepChange = useCallback(\n    (newStep: number) => {\n      if (!hasInteracted) setHasInteracted(true);\n      const nextStepNumber = newStep;\n      const prevStepNumber = stepMapReverse[step];\n\n      setLocalStorageData({\n        onboardingScreenStatus: stepMap[newStep],\n      });\n\n      setIsReversed(nextStepNumber < prevStepNumber);\n      setStep(stepMap[newStep]);\n    },\n    [hasInteracted, step],\n  );\n\n  const animationClasses = useMemo(() => {\n    if (hasInteracted) {\n      return isReversed\n        ? {\n            enter: styles['page-enter-right'],\n            enterActive: styles['page-enter-active-right'],\n            exit: styles['page-exit-right'],\n            exitActive: styles['page-exit-active-right'],\n          }\n        : {\n            enter: styles['page-enter-left'],\n            enterActive: styles['page-enter-active-left'],\n            exit: styles['page-exit-left'],\n            exitActive: styles['page-exit-active-left'],\n          };\n    }\n    return {};\n  }, [hasInteracted, isReversed]);\n\n  return (\n    <div className={styles.container}>\n      <SwitchTransition>\n        <CSSTransition\n          nodeRef={stepRefs[step]}\n          key={step}\n          timeout={300}\n          classNames={animationClasses}\n          unmountOnExit\n        >\n          <>\n            {step === OnboardingStep.StepZero && (\n              <WelcomeStep onStepChange={handleStepChange} ref={zeroRef} />\n            )}\n            {step === OnboardingStep.StepOne && (\n              <EnterIdStep onStepChange={handleStepChange} ref={oneRef} />\n            )}\n          </>\n        </CSSTransition>\n      </SwitchTransition>\n    </div>\n  );\n}\n\nexport const Onboarding = memo(RawOnboarding);\n","export function Icon({ className }: { className?: string }): JSX.Element {\n  return (\n    <svg\n      className={className}\n      width=\"12\"\n      height=\"13\"\n      viewBox=\"0 0 12 13\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M8.98949 2.75H8.99999C9.39782 2.75 9.77935 2.90804 10.0607 3.18934C10.342 3.47064 10.5 3.85218 10.5 4.25V8.75C10.5001 9.08261 10.3896 9.40581 10.186 9.66879C9.98231 9.93177 9.69704 10.1196 9.37499 10.2028V8.3105C9.37504 8.06425 9.32658 7.82041 9.23238 7.59289C9.13818 7.36538 9.00009 7.15864 8.82599 6.9845L6.26549 4.424C6.09135 4.2499 5.88461 4.11181 5.6571 4.01761C5.42958 3.92341 5.18574 3.87495 4.93949 3.875H3.04724C3.13039 3.55295 3.31823 3.26768 3.5812 3.06403C3.84418 2.86038 4.16738 2.74992 4.49999 2.75H4.51049C4.55661 2.33749 4.75315 1.95645 5.06252 1.67973C5.3719 1.40301 5.77241 1.25001 6.18749 1.25H7.31249C7.72757 1.25001 8.12808 1.40301 8.43746 1.67973C8.74684 1.95645 8.94337 2.33749 8.98949 2.75ZM7.87499 3.5V2.9375C7.87499 2.78832 7.81573 2.64524 7.71024 2.53975C7.60475 2.43426 7.46168 2.375 7.31249 2.375H6.18749C6.03831 2.375 5.89523 2.43426 5.78974 2.53975C5.68425 2.64524 5.62499 2.78832 5.62499 2.9375V3.5H7.87499Z\"\n        fill=\"currentColor\"\n      />\n      <path\n        d=\"M2.25 5C2.05109 5 1.86032 5.07902 1.71967 5.21967C1.57902 5.36032 1.5 5.55109 1.5 5.75V11C1.5 11.1989 1.57902 11.3897 1.71967 11.5303C1.86032 11.671 2.05109 11.75 2.25 11.75H7.5C7.69891 11.75 7.88968 11.671 8.03033 11.5303C8.17098 11.3897 8.25 11.1989 8.25 11V8.3105C8.24996 8.1116 8.17091 7.92087 8.03025 7.78025L5.46975 5.21975C5.32913 5.07909 5.1384 5.00004 4.9395 5H2.25Z\"\n        fill=\"currentColor\"\n      />\n    </svg>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"x9imigGpZcMFer2Eqehh\",\"small\":\"op2WZewKuJ5_ZX1USfax\",\"right\":\"j97DnYRcbzRw9DFMTKgZ\",\"big\":\"KhjkKFTmj_yd3rF6ObO7\",\"i-right\":\"z7wPJl3LujY2lSvWqpuh\",\"i-left\":\"JvVfN1QQP6hGOzU83WQY\",\"middle\":\"DwHH6C47EVluZrflzowe\",\"copied\":\"nV5uYrO4lYeVdIViLyDN\",\"id\":\"NH7E_wBJJUXMSgm4R9Oy\",\"copy-text\":\"MUFWcRo8oJwB8d4qqkZ3\",\"icon\":\"vwWTaj98UCihHhIo6t6N\"};","import clsx from 'clsx';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport { useCopyId } from '../hooks/useCopyId';\nimport { Icon } from './Icon';\n\nimport styles from './CopyId.module.css';\n\ntype CopyIdProps = {\n  userId: string;\n  size?: 'small' | 'big';\n  align?: 'middle' | 'right';\n  iconPlace?: 'i-left' | 'i-right';\n  className?: string;\n};\n\nexport function CopyId({\n  userId,\n  size = 'small',\n  align = 'middle',\n  iconPlace = 'i-left',\n  className,\n}: CopyIdProps): JSX.Element {\n  const { handleCopy, isCopied } = useCopyId();\n\n  return (\n    <>\n      <CopyToClipboard text={userId} onCopy={handleCopy}>\n        <div\n          className={clsx(\n            styles.wrapper,\n            styles[size],\n            styles[align],\n            styles[iconPlace],\n            className,\n          )}\n        >\n          <span\n            className={clsx(\n              styles.id,\n              { [styles.copied]: isCopied },\n              styles[size],\n              styles[align],\n            )}\n          >\n            {userId}\n          </span>\n          <span\n            className={clsx(\n              styles['copy-text'],\n              {\n                [styles.copied]: isCopied,\n              },\n              styles[size],\n              styles[align],\n            )}\n          >\n            Скопировано\n          </span>\n          <Icon\n            className={clsx(\n              styles.icon,\n              { [styles.copied]: isCopied },\n              styles[size],\n              styles[iconPlace],\n            )}\n          />\n        </div>\n      </CopyToClipboard>\n    </>\n  );\n}\n","import { useEffect, useRef, useState } from 'react';\n\ntype CopyIdHookValues = {\n  isCopied: boolean;\n  handleCopy: () => void;\n};\n\nexport function useCopyId(): CopyIdHookValues {\n  const [isCopied, setIsCopied] = useState(false);\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null);\n\n  useEffect(() => {\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, []);\n\n  function handleCopy(): void {\n    setIsCopied(true);\n    timeoutRef.current = setTimeout(() => {\n      setIsCopied(false);\n    }, 2000);\n  }\n\n  return {\n    isCopied,\n    handleCopy,\n  };\n}\n","import styles from './CloseIcon.module.css';\n\nexport function CloseIcon(): JSX.Element {\n  return (\n    <svg\n      width=\"16\"\n      height=\"16\"\n      viewBox=\"0 0 16 16\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className={styles.icon}\n      data-close=\"close-icon\"\n    >\n      <path\n        d=\"M5.28 4.22C5.13783 4.08752 4.94978 4.0154 4.75548 4.01882C4.56118 4.02225 4.37579 4.10096 4.23838 4.23838C4.10097 4.37579 4.02225 4.56118 4.01883 4.75548C4.0154 4.94978 4.08752 5.13782 4.22 5.28L6.94 8L4.22 10.72C4.14631 10.7887 4.08721 10.8715 4.04622 10.9635C4.00523 11.0555 3.98319 11.1548 3.98141 11.2555C3.97963 11.3562 3.99816 11.4562 4.03588 11.5496C4.0736 11.643 4.12974 11.7278 4.20096 11.799C4.27218 11.8703 4.35702 11.9264 4.4504 11.9641C4.54379 12.0018 4.64382 12.0204 4.74452 12.0186C4.84523 12.0168 4.94454 11.9948 5.03654 11.9538C5.12854 11.9128 5.21134 11.8537 5.28 11.78L8 9.06L10.72 11.78C10.7887 11.8537 10.8715 11.9128 10.9635 11.9538C11.0555 11.9948 11.1548 12.0168 11.2555 12.0186C11.3562 12.0204 11.4562 12.0018 11.5496 11.9641C11.643 11.9264 11.7278 11.8703 11.799 11.799C11.8703 11.7278 11.9264 11.643 11.9641 11.5496C12.0018 11.4562 12.0204 11.3562 12.0186 11.2555C12.0168 11.1548 11.9948 11.0555 11.9538 10.9635C11.9128 10.8715 11.8537 10.7887 11.78 10.72L9.06 8L11.78 5.28C11.9125 5.13782 11.9846 4.94978 11.9812 4.75548C11.9777 4.56118 11.899 4.37579 11.7616 4.23838C11.6242 4.10096 11.4388 4.02225 11.2445 4.01882C11.0502 4.0154 10.8622 4.08752 10.72 4.22L8 6.94L5.28 4.22Z\"\n        fill=\"currentColor\"\n      />\n    </svg>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"icon\":\"nKIIyqK8jZBPadz8C0Kk\"};","import { CloseIcon } from '@popup/shared/components/CloseIcon';\nimport clsx from 'clsx';\n\nimport styles from './PopUpContainer.module.css';\n\ntype PopUpContainerProps = {\n  children: React.ReactNode;\n  onClose?: () => void;\n};\nexport function PopUpContainer({\n  children,\n  onClose,\n}: PopUpContainerProps): JSX.Element {\n  return (\n    <div className={clsx(styles.overlay)}>\n      <div className={styles['overlay-content']}>\n        {!!onClose && (\n          <button\n            type=\"button\"\n            className={styles['close-button']}\n            onClick={onClose}\n          >\n            <CloseIcon />\n          </button>\n        )}\n        {children}\n      </div>\n    </div>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"overlay\":\"knPFKWuWIBB01LoFw81w\",\"overlay-content\":\"EuySsulQugVVhgQb_9sn\",\"close-button\":\"ixbdBKVf4TesSfzkb6C0\"};","import { clsx } from 'clsx';\nimport { type ButtonHTMLAttributes } from 'react';\nimport styles from './ActionButton.module.css';\n\ntype ActionButtonProps = ButtonHTMLAttributes<HTMLButtonElement> & {\n  children: React.ReactNode;\n};\n\nexport function ActionButton({\n  children,\n  className,\n  ...rest\n}: ActionButtonProps): JSX.Element {\n  return (\n    <button\n      type=\"button\"\n      className={clsx(styles['action-button'], className)}\n      {...rest}\n    >\n      {children}\n    </button>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"action-button\":\"PB37Y_3llEdh4Nwl1p0m\"};","import { ActionButton } from '@popup/shared/components/ActionButton';\nimport { usePremiumData } from '@popup/shared/hooks/usePremiumData';\n\ntype ExitPopUpProps = {\n  onClose: () => void;\n};\nexport function ExitPopUp({ onClose }: ExitPopUpProps): JSX.Element {\n  const { clearPremiumData } = usePremiumData();\n\n  return (\n    <>\n      <h3>Вы уверены что хотите выйти из аккаунта?</h3>\n      <ActionButton onClick={clearPremiumData}>Да</ActionButton>\n      <ActionButton onClick={onClose}>Нет</ActionButton>\n    </>\n  );\n}\n","export function Icon({ className }: { className?: string }): JSX.Element {\n  return (\n    <svg\n      className={className}\n      width=\"16\"\n      height=\"17\"\n      viewBox=\"0 0 16 17\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M14 5.25C14 4.52065 13.7103 3.82118 13.1945 3.30546C12.6788 2.78973 11.9793 2.5 11.25 2.5H8.25C7.52065 2.5 6.82118 2.78973 6.30546 3.30546C5.78973 3.82118 5.5 4.52065 5.5 5.25V5.75C5.5 5.94891 5.57902 6.13968 5.71967 6.28033C5.86032 6.42098 6.05109 6.5 6.25 6.5C6.44891 6.5 6.63968 6.42098 6.78033 6.28033C6.92098 6.13968 7 5.94891 7 5.75V5.25C7 4.56 7.56 4 8.25 4H11.25C11.94 4 12.5 4.56 12.5 5.25V11.75C12.5 12.44 11.94 13 11.25 13H8.25C7.56 13 7 12.44 7 11.75V11.25C7 11.0511 6.92098 10.8603 6.78033 10.7197C6.63968 10.579 6.44891 10.5 6.25 10.5C6.05109 10.5 5.86032 10.579 5.71967 10.7197C5.57902 10.8603 5.5 11.0511 5.5 11.25V11.75C5.5 12.4793 5.78973 13.1788 6.30546 13.6945C6.82118 14.2103 7.52065 14.5 8.25 14.5H11.25C11.9793 14.5 12.6788 14.2103 13.1945 13.6945C13.7103 13.1788 14 12.4793 14 11.75V5.25ZM4.53 5.72C4.38937 5.57955 4.19875 5.50066 4 5.50066C3.80125 5.50066 3.61063 5.57955 3.47 5.72L1.22 7.97C1.07955 8.11063 1.00066 8.30125 1.00066 8.5C1.00066 8.69875 1.07955 8.88937 1.22 9.03L3.47 11.28C3.53866 11.3537 3.62146 11.4128 3.71346 11.4538C3.80546 11.4948 3.90477 11.5168 4.00548 11.5186C4.10618 11.5204 4.20621 11.5018 4.2996 11.4641C4.39299 11.4264 4.47782 11.3703 4.54904 11.299C4.62026 11.2278 4.6764 11.143 4.71412 11.0496C4.75184 10.9562 4.77037 10.8562 4.76859 10.7555C4.76681 10.6548 4.74477 10.5555 4.70378 10.4635C4.66279 10.3715 4.60369 10.2887 4.53 10.22L3.56 9.25H10.75C10.9489 9.25 11.1397 9.17098 11.2803 9.03033C11.421 8.88968 11.5 8.69891 11.5 8.5C11.5 8.30109 11.421 8.11032 11.2803 7.96967C11.1397 7.82902 10.9489 7.75 10.75 7.75H3.56L4.53 6.78C4.67045 6.63937 4.74934 6.44875 4.74934 6.25C4.74934 6.05125 4.67045 5.86063 4.53 5.72Z\"\n        fill=\"currentColor\"\n      />\n    </svg>\n  );\n}\n","import { PopUpContainer } from '@popup/shared/components/PopUpContainer';\nimport { useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport { ExitPopUp } from '../../ExitPopUp';\nimport { Icon } from './Icon';\n\nimport styles from './ExitButton.module.css';\n\nexport function ExitButton(): JSX.Element {\n  const popUp = document.getElementById('popup');\n  const [isPopUpVisible, setIsPopUpVisible] = useState(false);\n\n  const handleClick = () => {\n    setIsPopUpVisible(true);\n  };\n\n  return (\n    <>\n      <button type=\"button\" onClick={handleClick} className={styles.button}>\n        <Icon className={styles.icon} />\n      </button>\n      {!!popUp &&\n        isPopUpVisible &&\n        createPortal(\n          <PopUpContainer onClose={() => setIsPopUpVisible(false)}>\n            <ExitPopUp onClose={() => setIsPopUpVisible(false)} />\n          </PopUpContainer>,\n          popUp,\n        )}\n    </>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"icon\":\"tnzKd6Lwj1HOaC6ECZCk\",\"button\":\"moOXjF8mOvUBtnZTDKVL\"};","export function getRussianHourEnding(hour: number): string {\n  let remainder = hour % 10;\n  if (remainder === 1) return 'час';\n  if (remainder >= 2 && remainder <= 4) return 'часа';\n  return 'часов';\n}\n\nexport function getRussianDayEnding(day: number): string {\n  let remainder = day % 10;\n  if (remainder === 1) return 'день';\n  if (remainder >= 2 && remainder <= 4) return 'дня';\n  return 'дней';\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"no-time-left\":\"XRTabmyfNOtxkPcobCpQ\",\"shake\":\"q27z1O4AElhbFKPce4zO\",\"wrapper\":\"oPPddb_oySy6uAG6gPDr\",\"days\":\"dL4oracsf6ZFbQgDGfcn\",\"personal-data\":\"Sz_QqgJt0VgxfhrYtdnJ\",\"payment-container\":\"smX67QD0NO73EiLrAaEk\",\"payment-data\":\"ix16GTlTewSLaTSlLArq\",\"text\":\"hcZpe07H8SRy6oROij1o\",\"copy-id\":\"VG8B3z2vPWSmxw_0aKqW\",\"time\":\"aUFg1nEeOGPVhX0isAxc\",\"warning\":\"brXcs7YuIMGBbHUL_6GT\",\"connected\":\"e2ihAVz9mD_DRSyhZPSe\",\"description\":\"IQRh8njcb7iRqlc5bFPC\",\"buttons\":\"FvciI3A9LVZsOR2pRj1h\",\"extend\":\"g69YE3dicGNMA6H78xKQ\"};","export enum RoutePath {\n  Root = '/',\n  PremiumInfo = '/premium-info',\n  EnterId = '/enter-id',\n  CancelPremium = '/cancel-premium',\n  ChangeDevice = '/change-device',\n  Payment = '/payment',\n}\n","import { Button } from '@popup/shared/components/Button';\nimport { CopyId } from '@popup/shared/components/CopyId';\nimport { ExitButton } from '@popup/shared/components/ExitButton';\nimport { usePaymentStatus } from '@popup/shared/hooks/usePaymentStatus';\nimport { usePremiumData } from '@popup/shared/hooks/usePremiumData';\nimport { clsx } from 'clsx';\nimport { Link } from 'react-router-dom';\nimport { RoutePath } from '../../../routes/types/RoutePath';\nimport { getRussianDayEnding, getRussianHourEnding } from './utils';\nimport styles from './PremiumData.module.css';\n\nimport { Loader } from '@popup/shared/components/Loader';\nimport { useFreePremiumTrial } from '@popup/project/vrubel/hooks/useFreePremiumTrial';\n\nexport function PremiumData(): JSX.Element | null {\n  const { premiumDaysLeft, userId, secondsLeft } = usePremiumData();\n\n  const paymentStatus = usePaymentStatus();\n\n  const {\n    canTryFreePremiumTrial,\n    isFreePremiumTrialLoading,\n    handleClickTryPremium,\n  } = useFreePremiumTrial();\n\n  if (userId === undefined || premiumDaysLeft === undefined) {\n    return null;\n  }\n\n  function renderTimeLeft(): JSX.Element | null {\n    if (premiumDaysLeft === undefined) {\n      return null;\n    }\n\n    if (premiumDaysLeft > 1 || !secondsLeft) {\n      return (\n        <div\n          className={clsx({\n            [styles['no-time-left']]: premiumDaysLeft <= 1,\n          })}\n        >\n          {premiumDaysLeft % 10 === 1 ? 'Остался' : 'Осталось'}{' '}\n          <span className={styles.time}>{premiumDaysLeft}</span>{' '}\n          {getRussianDayEnding(premiumDaysLeft)}\n        </div>\n      );\n    }\n\n    const hours = Math.ceil(secondsLeft / 3600);\n    return (\n      <div\n        className={clsx({\n          [styles['no-time-left']]: hours <= 3,\n        })}\n      >\n        {hours % 10 === 1 ? 'Остался' : 'Осталось'}{' '}\n        <span className={styles.time}>{hours}</span>{' '}\n        {getRussianHourEnding(hours)}\n      </div>\n    );\n  }\n\n  if (isFreePremiumTrialLoading) {\n    return <Loader className={styles['check-loader']} />;\n  }\n\n  return (\n    <>\n      <div className={styles.wrapper}>\n        <div className={styles['personal-data']}>\n          <div className={styles['payment-container']}>\n            <div className={styles['payment-data']}>\n              <span className={styles.text}>Ваш ID:</span>{' '}\n              <CopyId\n                userId={userId}\n                align=\"middle\"\n                className={styles['copy-id']}\n              />\n              <ExitButton />\n            </div>\n          </div>\n          <div className={clsx(styles.days)} id=\"days-left\">\n            {renderTimeLeft()}\n          </div>\n        </div>\n\n        <div className={styles.description}>\n          Продлите доступ за 1 рубль в день{' '}\n        </div>\n        <div className={styles.buttons}>\n          <Link to={RoutePath.Tariffs} tabIndex={-1} className={styles.extend}>\n            <Button variant=\"primary\" size=\"default\" className={styles.extend}>\n              Продлить\n            </Button>\n          </Link>\n        </div>\n\n        {paymentStatus === 'Paid' && (\n          <div className={styles.buttons}>\n            <Link\n              to={RoutePath.CancelPremium}\n              tabIndex={-1}\n              className={styles.extend}\n            >\n              <Button\n                variant=\"primary\"\n                size=\"default\"\n                className={styles.extend}\n              >\n                Вернуть деньги\n              </Button>\n            </Link>\n          </div>\n        )}\n\n        {canTryFreePremiumTrial && (\n          <div className={styles.buttons}>\n            <Button\n              variant=\"secondary\"\n              size=\"default\"\n              className={styles.extend}\n              onClick={handleClickTryPremium}\n            >\n              Попробовать бесплатно\n            </Button>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n","import {\n  fetchCheckTariffAvailability,\n  setupTariff,\n} from '@api/premium/fetchPremiumData';\nimport { Tariff } from '@api/premium/types/Tariff';\nimport {\n  LocalStoragePremiumKey,\n  getLocalStoragePremiumData,\n  getSubscriptionInfo,\n  setLocalStoragePremiumData,\n} from '@app/storage/local/premium';\nimport {\n  LocalStorageKey,\n  getLocalStorageData,\n  setLocalStorageData,\n} from '@app/storage/local/shared';\nimport { getSessionMetaApiData } from '@app/storage/session/metaApiData';\nimport { RoutePath } from '@popup/project/youboost/routes/types/RoutePath';\nimport { wait } from '@popup/shared/utils/wait';\nimport { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\ntype FreeTrialHookValues = {\n  isCheckingFreePremiumTrial: boolean;\n  canTryFreePremiumTrial: boolean;\n  handleClickTryPremium: () => Promise<void>;\n  isFreePremiumTrialLoading: boolean;\n  isFreePremiumTrialError: boolean;\n};\n\nexport function useFreePremiumTrial(): FreeTrialHookValues {\n  const [isChecking, setIsChecking] = useState(false);\n  const [canTryTrial, setCanTryTrial] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    async function checkFreePremiumTrial(): Promise<void> {\n      try {\n        setIsChecking(true);\n\n        const [{ apiBaseUrl }, { deviceId, deviceIp }, { userId }] =\n          await Promise.all([\n            getSessionMetaApiData(),\n            getLocalStorageData([\n              LocalStorageKey.DeviceId,\n              LocalStorageKey.DeviceIp,\n            ]),\n            getLocalStoragePremiumData(LocalStoragePremiumKey.UserId),\n          ]);\n        if (userId && deviceId) {\n          const { status } = await fetchCheckTariffAvailability(apiBaseUrl, {\n            userId,\n            deviceId,\n            deviceIp,\n            tariff: Tariff.FreeTrial,\n          });\n          const isAvailable = status === 'allowed';\n\n          await setLocalStoragePremiumData({\n            isFreePremiumTrialAvailable: isAvailable,\n          });\n\n          setCanTryTrial(isAvailable);\n        }\n      } catch (error) {\n        setIsError(true);\n\n        if (error instanceof Error) {\n          await setLocalStorageData({\n            [LocalStorageKey.ErrorMessage]: error.message,\n          });\n        }\n      } finally {\n        setIsChecking(false);\n      }\n    }\n    void checkFreePremiumTrial();\n  }, []);\n\n  async function handleClickTryPremium(): Promise<void> {\n    try {\n      setIsLoading(true);\n      const [{ apiBaseUrl }, { deviceId, deviceIp, currentState }, { userId }] =\n        await Promise.all([\n          getSessionMetaApiData(),\n          getLocalStorageData([\n            LocalStorageKey.DeviceId,\n            LocalStorageKey.DeviceIp,\n            LocalStorageKey.CurrentState,\n          ]),\n          getLocalStoragePremiumData(LocalStoragePremiumKey.UserId),\n        ]);\n\n      if (userId && deviceId && canTryTrial) {\n        await setupTariff(apiBaseUrl, {\n          userId,\n          deviceId,\n          deviceIp,\n          tariff: Tariff.FreeTrial,\n        });\n        await setLocalStoragePremiumData({\n          [LocalStoragePremiumKey.IsFreePremiumTrialAvailable]: false,\n        });\n\n        await getSubscriptionInfo();\n\n        if (currentState === 'connected') {\n          await wait(500);\n        }\n\n        navigate(RoutePath.Root);\n      } else if (!userId) {\n        await setLocalStorageData({ onboardingScreenStatus: 'step-two' });\n        navigate(RoutePath.Root);\n      }\n    } catch (error) {\n      console.error(error);\n      setIsError(true);\n\n      if (error instanceof Error) {\n        await setLocalStorageData({\n          [LocalStorageKey.ErrorMessage]: error.message,\n        });\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  return {\n    isCheckingFreePremiumTrial: isChecking,\n    canTryFreePremiumTrial: canTryTrial,\n    handleClickTryPremium,\n    isFreePremiumTrialLoading: isLoading,\n    isFreePremiumTrialError: isError,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"l1ag5VL6IHRmZctjm9JQ\",\"connect-button-container\":\"qrUotFdovwR5lKTDBdse\",\"debug-button\":\"BrpOodwLDLIIlARVmdvP\"};","import { TransitionWrapper } from '@popup/shared/components/TransitionWrapper';\nimport { Error } from '@popup/shared/components/errors/Error';\nimport { createMemoryRouter } from 'react-router-dom';\nimport { Header } from '../components/shared/Header';\nimport { CancelPremium } from './CancelPremium';\nimport { ChangeDevice } from './ChangeDevice';\nimport { PaymentScreen } from './PaymentScreen';\nimport { Root } from './Root';\nimport { TariffsScreen } from './TariffsScreen';\nimport { RoutePath } from './types/RoutePath';\n\nexport const router = createMemoryRouter([\n  {\n    path: RoutePath.Root,\n    element: (\n      <TransitionWrapper header={<Header />}>\n        <Root />\n      </TransitionWrapper>\n    ),\n    errorElement: <Error />,\n  },\n  {\n    path: RoutePath.Tariffs,\n    element: (\n      <TransitionWrapper header={<Header />}>\n        <TariffsScreen />\n      </TransitionWrapper>\n    ),\n    errorElement: <Error />,\n  },\n  {\n    path: RoutePath.Payment,\n    element: (\n      <TransitionWrapper header={<Header />}>\n        <PaymentScreen />\n      </TransitionWrapper>\n    ),\n    errorElement: <Error />,\n  },\n  {\n    path: RoutePath.CancelPremium,\n    element: (\n      <TransitionWrapper header={<Header />}>\n        <CancelPremium />\n      </TransitionWrapper>\n    ),\n    errorElement: <Error />,\n  },\n  {\n    path: RoutePath.ChangeDevice,\n    element: (\n      <TransitionWrapper header={<Header />}>\n        <ChangeDevice />\n      </TransitionWrapper>\n    ),\n    errorElement: <Error />,\n  },\n]);\n","import { OnboardingStep } from '@popup/project/vrubel/components/Onboarding/ui/constants';\nimport { LimitedOnboardingStatus } from '@popup/project/vrubel/components/Onboarding/ui/types';\nimport { useCorrectUserId } from '@popup/project/vrubel/hooks/useCorrectUserId';\nimport { useNavigateToTariffs } from '@popup/project/vrubel/hooks/useNavigateToTariffs';\nimport { ConnectButton } from '@popup/shared/components/ConnectButton';\nimport { DebugButton } from '@popup/shared/components/DebugButton';\nimport { useTheme } from '@popup/shared/contexts/Theme';\nimport { useOnboardingScreen } from '@popup/shared/hooks/useOnboardingScreen';\nimport { usePremiumAnimation } from '@popup/shared/hooks/usePremiumAnimation';\nimport { usePremiumData } from '@popup/shared/hooks/usePremiumData';\n\nimport { Feedback } from '../../../components/Feedback';\nimport { Onboarding } from '../../../components/Onboarding/ui/Onboarding';\nimport { PremiumData } from '../../../components/PremiumData';\nimport { useChangeDevice } from '../../../hooks/useChangeDevice';\nimport { RoutePath } from '../../types/RoutePath';\n\nimport styles from './Root.module.css';\n\nexport function Root(): JSX.Element | null {\n  const { hasPremium } = usePremiumData();\n  const { onboardingStatus } = useOnboardingScreen();\n\n  useTheme();\n  useChangeDevice();\n  usePremiumAnimation({ isFreeUser: !hasPremium });\n  useNavigateToTariffs();\n  useCorrectUserId();\n\n  if (onboardingStatus !== OnboardingStep.Done) {\n    return (\n      <Onboarding\n        onboardingStatus={onboardingStatus as LimitedOnboardingStatus}\n      />\n    );\n  }\n\n  return (\n    <div className={styles.wrapper}>\n      <ConnectButton\n        className={styles['connect-button-container']}\n        onExpiredRoute={RoutePath.Tariffs}\n      />\n      <PremiumData />\n      <DebugButton className={styles['debug-button']} />\n      <Feedback />\n    </div>\n  );\n}\n","import { useEffect, useMemo, useState } from 'react';\nimport {\n  getLocalStorageData,\n  LocalStorageKey,\n  OnboardingScreenStatus,\n} from '@app/storage/local/shared';\nimport { OnboardingStep } from '@popup/project/youboost-neo/components/Onboarding/ui/constants';\n\ntype PremiumDataHookValues = {\n  onboardingStatus: OnboardingScreenStatus;\n  isLoading: boolean;\n};\n\nexport function useOnboardingScreen(): PremiumDataHookValues {\n  const [cookieLoading, setCookieLoading] = useState<boolean>(true);\n  const [onboardingStatus, setOnboardingStatus] =\n    useState<OnboardingScreenStatus>(OnboardingStep.StepZero);\n\n  useEffect(() => {\n    async function getOnboardingData(): Promise<void> {\n      const { onboardingScreenStatus } = await getLocalStorageData(\n        LocalStorageKey.OnboardingScreenStatus,\n      );\n\n      setOnboardingStatus(onboardingScreenStatus || OnboardingStep.StepZero);\n    }\n    void getOnboardingData();\n  }, []);\n\n  useEffect(() => {\n    function listener(changes: {\n      onboardingScreenStatus?: { newValue?: OnboardingScreenStatus };\n    }): void {\n      if (changes.onboardingScreenStatus) {\n        const newOnboardingStatus =\n          changes.onboardingScreenStatus.newValue || OnboardingStep.StepZero;\n\n        setOnboardingStatus(newOnboardingStatus);\n      }\n    }\n    chrome.storage.onChanged.addListener(listener);\n    return () => {\n      chrome.storage.onChanged.removeListener(listener);\n    };\n  }, []);\n\n  useEffect(() => {\n    async function getCookieLoaded(): Promise<void> {\n      const { cookieLoaded } = await getLocalStorageData(\n        LocalStorageKey.CookieLoaded,\n      );\n\n      setCookieLoading(cookieLoaded === undefined ? false : !cookieLoaded);\n    }\n\n    const listener = (changes: {\n      cookieLoaded?: { newValue?: boolean };\n    }): void => {\n      if (changes.cookieLoaded) {\n        const { newValue } = changes.cookieLoaded;\n        const isCookieLoaded = newValue === undefined ? true : !!newValue;\n        setCookieLoading(!isCookieLoaded);\n      }\n    };\n\n    chrome.storage.local.onChanged.addListener(listener);\n    void getCookieLoaded();\n\n    return () => {\n      chrome.storage.local.onChanged.removeListener(listener);\n    };\n  }, [onboardingStatus]);\n\n  return useMemo(\n    () => ({\n      isLoading: cookieLoading,\n      onboardingStatus,\n    }),\n    [cookieLoading, onboardingStatus],\n  );\n}\n","import { useContext } from 'react';\nimport { ThemeContext, type ThemeContextType } from '../ThemeContext';\n\nexport function useTheme(): ThemeContextType {\n  const theme = useContext(ThemeContext);\n  if (theme === undefined) {\n    throw new Error(\n      'useThemeContext must be used within a ThemeContextProvider',\n    );\n  }\n  return theme;\n}\n","import { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport {\n  type PopupReadyMessage,\n  type Message,\n  type CreateNewUserSuccessMessage,\n} from '@app/messages/shared';\nimport { Actions } from '@app/actions/shared';\nimport { RoutePath } from '../routes/types/RoutePath';\n\nexport function useNavigateToTariffs(): void {\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const handleMessage = (message: Message | CreateNewUserSuccessMessage) => {\n      if (\n        message.action === Actions.NavigateToPayment ||\n        message.action === Actions.CreateNewUserSuccess\n      ) {\n        if (message.payload?.isTrial || message.payload?.isGuestMode) {\n          return;\n        }\n\n        navigate(RoutePath.Tariffs, {\n          state: {\n            hasOneMonthDiscount: message.payload?.isSaleActive ?? false,\n          },\n        });\n      }\n    };\n\n    chrome.runtime.onMessage.addListener(handleMessage);\n\n    return () => {\n      chrome.runtime.onMessage.removeListener(handleMessage);\n    };\n  }, [navigate]);\n\n  useEffect(() => {\n    void chrome.runtime.sendMessage<PopupReadyMessage>({\n      action: Actions.PopupReady,\n    });\n  });\n}\n","import {\n  CookieKey,\n  removeCookieData,\n} from '@app/storage/cookies/shared';\nimport {\n  getLocalStoragePremiumData,\n  getSubscriptionInfo,\n  LocalStoragePremiumKey,\n} from '@app/storage/local/premium';\n\nimport { useEffect } from 'react';\n\nexport function useCorrectUserId() {\n  useEffect(() => {\n    const clearAllLocalAndCookieStorage = async (): Promise<void> => {\n      await chrome.storage.local.clear();\n      await chrome.storage.session.clear();\n      await chrome.storage.sync.clear();\n      await chrome.storage.managed.clear();\n      await chrome.alarms.clearAll();\n\n      await removeCookieData(CookieKey.UserId);\n\n      chrome.runtime.reload();\n    };\n\n    async function checkUserIdFromStorage() {\n      try {\n        const { userId } = await getLocalStoragePremiumData(\n          LocalStoragePremiumKey.UserId,\n        );\n\n        if (userId) {\n          await getSubscriptionInfo();\n        }\n      } catch (error) {\n        if (error instanceof Error && error.message === 'userNotFound') {\n          await clearAllLocalAndCookieStorage();\n        }\n      }\n    }\n\n    checkUserIdFromStorage();\n  }, []);\n}\n","import { useChangeDevice } from '../../../hooks/useChangeDevice';\nimport { usePremiumAnimation } from '@popup/shared/hooks/usePremiumAnimation';\nimport { usePremiumData } from '@popup/shared/hooks/usePremiumData';\nimport { TariffsScreenContent } from '@popup/project/vrubel/components/PaymentProcess/ui';\n\nexport function TariffsScreen(): JSX.Element | null {\n  const { hasPremium } = usePremiumData();\n\n  useChangeDevice();\n  usePremiumAnimation({ isFreeUser: !hasPremium });\n\n  return <TariffsScreenContent />;\n}\n","import { useChangeDevice } from '../../../hooks/useChangeDevice';\nimport { usePremiumAnimation } from '@popup/shared/hooks/usePremiumAnimation';\nimport { usePremiumData } from '@popup/shared/hooks/usePremiumData';\n\nimport { PaymentScreenContent } from '@popup/project/vrubel/components/PaymentProcess/ui';\n\nexport function PaymentScreen(): JSX.Element | null {\n  const { hasPremium } = usePremiumData();\n\n  useChangeDevice();\n  usePremiumAnimation({ isFreeUser: !hasPremium });\n\n  return <PaymentScreenContent />;\n}\n","import { useCancelPremium } from '@popup/shared/hooks/useCancelPremium';\nimport { RoutePath } from '../../types/RoutePath';\nimport { Link } from 'react-router-dom';\nimport { Error } from '@popup/shared/components/errors/Error';\nimport { Loader } from '@popup/project/vrubel/components/shared/Loader/ui/Loader';\nimport { Button } from '@popup/shared/components/Button';\nimport { QuestionMarkIcon } from './components/QuestionMarkIcon';\n\nimport styles from './CancelPremium.module.css';\n\nexport function CancelPremium(): JSX.Element | null {\n  const {\n    status,\n    isSuccess,\n    cancelStatus,\n    handleCancelPremium,\n    isCancelPremiumError,\n    isCancelPremiumLoading,\n  } = useCancelPremium();\n\n  if (isCancelPremiumError) {\n    return (\n      <Error text=\"При отмене подписки произошла ошибка, попробуйте еще раз позже\" />\n    );\n  }\n\n  if (isCancelPremiumLoading) {\n    return (\n      <Loader className={styles.loader}>\n        Отмена подписки. Пожалуйста, подождите...\n      </Loader>\n    );\n  }\n\n  if (isSuccess) {\n    return (\n      <div className={styles.success}>\n        <h3>Подписка успешно отменена!</h3>\n        {cancelStatus === 'Canceled' ? (\n          <p>Остаток средств вернется Вам на карту через 1-7 дней</p>\n        ) : null}\n        <Link to={RoutePath.Root} tabIndex={-1}>\n          <Button\n            className={styles.button}\n            variant=\"primary\"\n            data-close=\"close-button\"\n          >\n            Вернуться на главный экран\n          </Button>\n        </Link>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.wrapper}>\n      <QuestionMarkIcon className={styles.question} />\n      <div className={styles.info}>\n        <h3 className={styles.title}>\n          Уверены, что хотите прекратить использование\n        </h3>\n        <br />\n        <span className={styles.text}>\n          и потерять доступ к YouTube всего за 1 рубль в день?\n        </span>\n      </div>\n      <div className={styles.buttons}>\n        <Button onClick={handleCancelPremium} variant=\"secondary\">\n          Да, продолжить\n        </Button>\n        <Link to={RoutePath.Root}>\n          <Button variant=\"primary\" data-close=\"close-button\">\n            Вернуться назад\n          </Button>\n        </Link>\n      </div>\n    </div>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"wuL9BKdsaYJcWmYk9XoT\",\"question\":\"mWM9XrzliNatjUyl4ZDH\",\"info\":\"Vcg_rVxIsUH9GjVE94Ol\",\"title\":\"wQBGB5o5hbcEFiF13kIs\",\"text\":\"K0d_7S9LOcbfN6HBv2gX\",\"buttons\":\"x2vWjHS1KfRlVE0DkLdU\",\"loader\":\"K946Wfo19IlhhiOV2zl_\",\"success\":\"YTvhvQ4c1fRwOMOz0orT\",\"button\":\"Rh2jXi8r7ExptFH1VU3H\"};","import {\n  LocalStoragePremiumKey,\n  setLocalStoragePremiumData,\n} from '@app/storage/local/premium';\nimport { Loader } from '@content/components/PageLoader/ui/Loader';\nimport { Button } from '@popup/shared/components/Button';\nimport { useChangeDevice } from '@popup/shared/components/ChangeDeviceContent';\nimport { Error } from '@popup/shared/components/errors/Error';\nimport { useHandlePremiumWithoutTelegram } from '@popup/shared/hooks/useHandlePremiumWithoutTelegram';\nimport { Prohibited } from '@popup/shared/icons/Prohibited';\nimport { BaseRoutePath } from '@popup/shared/routes/types/RoutePath';\nimport { useCallback, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { RoutePath } from '../../types/RoutePath';\n\nimport styles from './ChangeDevice.module.css';\n\nexport function ChangeDevice(): JSX.Element {\n  const navigate = useNavigate();\n  const {\n    handleCancelChangeDevice,\n    handleChangeDevice,\n    isChangeDeviceError,\n    isChangeDeviceLoading,\n  } = useChangeDevice(BaseRoutePath.Root);\n  const {\n    handleClick: createUser,\n    loading: isUserCreating,\n    isSuccess,\n  } = useHandlePremiumWithoutTelegram();\n\n  useEffect(() => {\n    if (!isSuccess) return;\n\n    async function finalizeUserIdCreate() {\n      await setLocalStoragePremiumData({\n        [LocalStoragePremiumKey.IsChangeDeviceError]: false,\n      });\n\n      navigate(RoutePath.Tariffs);\n    }\n\n    finalizeUserIdCreate();\n  }, [isSuccess, navigate]);\n\n  const handleCreateUser = useCallback(() => {\n    createUser();\n  }, [createUser]);\n\n  if (isUserCreating) {\n    return <Loader className={styles.loader}>Создание нового ID...</Loader>;\n  }\n\n  if (isChangeDeviceLoading) {\n    return <Loader className={styles.loader}>Смена устройства...</Loader>;\n  }\n\n  if (isChangeDeviceError) {\n    return <Error className={styles.error} />;\n  }\n\n  return (\n    <div className={styles.wrapper}>\n      <Prohibited className={styles.icon} />\n      <div className={styles.content}>\n        <p className={styles.title}>\n          Ваш ID уже используется на другом устройстве\n        </p>\n        <p className={styles.description}>\n          Перенос вашего ID на это устройство\n          <br />\n          отключит его на предыдущем.\n        </p>\n      </div>\n      <div className={styles.buttons}>\n        <Button onClick={handleCreateUser} variant=\"primary\">\n          Добавить это устройство за 1₽ в день\n        </Button>\n        <Button onClick={handleChangeDevice} variant=\"secondary\">\n          Использовать ID здесь\n        </Button>\n        <Button\n          onClick={handleCancelChangeDevice}\n          variant=\"link\"\n          className={styles.link}\n        >\n          Выйти\n        </Button>\n      </div>\n    </div>\n  );\n}\n","import { useState } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { changeDevice } from '../api/changeDevice';\nimport {\n  getSubscriptionInfo,\n  LocalStoragePremiumKey,\n  setLocalStoragePremiumData,\n} from '@app/storage/local/premium';\nimport { wait } from '@popup/shared/utils/wait';\nimport {\n  LocalStorageKey,\n  setLocalStorageData,\n} from '@app/storage/local/shared';\nimport { usePremiumData } from '@popup/shared/hooks/usePremiumData';\n\ntype ChangeDeviceHookValues = {\n  handleChangeDevice: () => Promise<void>;\n  handleCancelChangeDevice: () => Promise<void>;\n  isChangeDeviceError: boolean;\n  isChangeDeviceLoading: boolean;\n};\n\ntype NavigationState = {\n  userId: string;\n};\n\nexport function useChangeDevice(route: string): ChangeDeviceHookValues {\n  const [isChangeDeviceError, setIsChangeDeviceError] = useState(false);\n  const [isChangeDeviceLoading, setIsChangeDeviceLoading] = useState(false);\n\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { clearPremiumData } = usePremiumData();\n\n  async function handleChangeDevice(): Promise<void> {\n    try {\n      setIsChangeDeviceLoading(true);\n      const { userId } = location.state as NavigationState;\n      await Promise.all([wait(1500), changeDevice(userId)]);\n\n      await getSubscriptionInfo();\n\n      await setLocalStorageData({\n        [LocalStorageKey.OnboardingScreenStatus]: 'done',\n      });\n\n      await setLocalStoragePremiumData({\n        [LocalStoragePremiumKey.UserId]: userId,\n        [LocalStoragePremiumKey.IsChangeDeviceError]: false,\n      });\n\n      navigate(route);\n    } catch (error) {\n      console.error(error);\n      setIsChangeDeviceError(true);\n    } finally {\n      setIsChangeDeviceLoading(false);\n    }\n  }\n\n  async function handleCancelChangeDevice(): Promise<void> {\n    await clearPremiumData();\n    navigate(route);\n  }\n\n  return {\n    handleChangeDevice,\n    handleCancelChangeDevice,\n    isChangeDeviceError,\n    isChangeDeviceLoading,\n  };\n}\n","import { getSessionMetaApiData } from '@app/storage/session/metaApiData';\nimport { FeatureToggler } from '@popup/shared/components/FeatureToggler';\nimport { FeedbackOverlayContextProvider } from '@popup/shared/contexts/FeedbackOverlayContext';\nimport { ProxyControlledByOtherExtensions } from '@popup/shared/components/ProxyControlledByOtherExtensions/ProxyControlledByOtherExtensions';\nimport { BrowserError } from '@popup/shared/components/errors/BrowserError';\nimport { Error } from '@popup/shared/components/errors/Error';\nimport { ErrorBoundary } from '@popup/shared/components/errors/ErrorBoundary';\nimport { OldVersionError } from '@popup/shared/components/errors/oldVersionError';\nimport { ThemeContextProvider } from '@popup/shared/contexts/Theme';\nimport { useApp } from '@popup/shared/hooks/useApp';\nimport { useFetchSubscriptionInfo } from '@popup/shared/hooks/useFetchSubscriptionInfo';\nimport { usePremiumData } from '@popup/shared/hooks/usePremiumData';\nimport { useVersion } from '@popup/shared/hooks/useVersion';\nimport React, { useEffect } from 'react';\nimport { RouterProvider } from 'react-router-dom';\nimport { Header } from './components/shared/Header';\nimport { router } from './routes/router';\nimport './styles/popup.css';\nimport './styles/variables.css';\nimport { useErrorScreen } from '@popup/shared/hooks/useErrorScreen';\n\nexport function App(): JSX.Element {\n  const {\n    handleBrowserErrorClick,\n    handleProxyControlledByOtherExtensionsClick,\n    isBrowserError,\n    showIsProxyControlledByOtherExtensions,\n    showIsAdBlockersWork,\n    handleAdBlockersWorkClick,\n  } = useApp();\n\n  const { errorMessage, handleRetry } = useErrorScreen();\n\n  const { isError } = usePremiumData();\n  const { isVersionOld } = useVersion();\n\n  useFetchSubscriptionInfo();\n\n  useEffect(() => {\n    void getSessionMetaApiData();\n  }, []);\n\n  if (isVersionOld) {\n    return <OldVersionError header={<Header />} />;\n  }\n\n  if (errorMessage) {\n    return <Error text={errorMessage} onClick={handleRetry} />;\n  }\n\n  if (isError) {\n    return <Error code={1002} header={<Header />} />;\n  }\n\n  if (isBrowserError) {\n    return (\n      <BrowserError onClick={handleBrowserErrorClick} header={<Header />} />\n    );\n  }\n\n  if (showIsProxyControlledByOtherExtensions) {\n    return (\n      <ProxyControlledByOtherExtensions\n        onClick={handleProxyControlledByOtherExtensionsClick}\n        conflictType=\"proxy\"\n      >\n        <Header />\n      </ProxyControlledByOtherExtensions>\n    );\n  }\n\n  if (showIsAdBlockersWork) {\n    return (\n      <ProxyControlledByOtherExtensions\n        onClick={handleAdBlockersWorkClick}\n        conflictType=\"adBlocker\"\n      >\n        <Header />\n      </ProxyControlledByOtherExtensions>\n    );\n  }\n\n  return (\n    <React.StrictMode>\n      <ErrorBoundary>\n        <FeedbackOverlayContextProvider>\n          <ThemeContextProvider>\n            <RouterProvider router={router} />\n            <FeatureToggler />\n          </ThemeContextProvider>\n        </FeedbackOverlayContextProvider>\n      </ErrorBoundary>\n    </React.StrictMode>\n  );\n}\n","import { useEffect, useState } from 'react';\nimport {\n  LocalStorageKey,\n  getLocalStorageData,\n  setLocalStorageData,\n} from '../../../app/storage/local/shared';\nimport {\n  SessionStorageKey,\n  getSessionStorageData,\n  setSessionStorageData,\n} from '../../../app/storage/session/shared';\nimport { Alarms } from '@app/alarms/shared';\n\ntype AppHookValues = {\n  showIsProxyControlledByOtherExtensions: boolean;\n  showIsAdBlockersWork: boolean;\n  isBrowserError: boolean;\n  handleProxyControlledByOtherExtensionsClick: () => Promise<void>;\n  handleAdBlockersWorkClick: () => Promise<void>;\n  handleBrowserErrorClick: () => Promise<void>;\n};\n\nexport function useApp(): AppHookValues {\n  const [\n    showIsProxyControlledByOtherExtensions,\n    setShowIsProxyControlledByOtherExtensions,\n  ] = useState(false);\n  const [showIsAdBlockersWork, setShowIsAdBlockersWorks] = useState(false);\n  const [browserError, setBrowserError] = useState(false);\n\n  useEffect(() => {\n    async function checkIsProxyControlledByOtherExtensions(): Promise<void> {\n      const { isProxyControlledByOtherExtensions } =\n        await getSessionStorageData(\n          SessionStorageKey.IsProxyControlledByOtherExtensions,\n        );\n\n      const warningAlarm = await chrome.alarms.get(\n        Alarms.ExtensionConflictWarningProxy,\n      );\n\n      setShowIsProxyControlledByOtherExtensions(\n        Boolean(isProxyControlledByOtherExtensions) && !warningAlarm,\n      );\n    }\n\n    void checkIsProxyControlledByOtherExtensions();\n  }, []);\n\n  useEffect(() => {\n    async function checkIsAdBlockersWork(): Promise<void> {\n      const { isAdBlockersWork } = await getSessionStorageData(\n        SessionStorageKey.IsAdBlockersWork,\n      );\n\n      const warningAlarm = await chrome.alarms.get(\n        Alarms.ExtensionConflictWarningAdBlocker,\n      );\n\n      setShowIsAdBlockersWorks(Boolean(isAdBlockersWork) && !warningAlarm);\n    }\n\n    void checkIsAdBlockersWork();\n  }, []);\n\n  useEffect(() => {\n    async function checkIsBrowserError(): Promise<void> {\n      const { isBrowserError } = await getLocalStorageData(\n        LocalStorageKey.IsBrowserError,\n      );\n      setBrowserError(Boolean(isBrowserError));\n    }\n    void checkIsBrowserError();\n  }, []);\n\n  async function handleProxyControlledByOtherExtensionsClick(): Promise<void> {\n    await setSessionStorageData({ popupWasOpened: true });\n    setShowIsProxyControlledByOtherExtensions(false);\n\n    // Set up alarm to show the proxy warning again after 24 hours\n    await chrome.alarms.create(Alarms.ExtensionConflictWarningProxy, {\n      periodInMinutes: 24 * 60, // 24 hours\n    });\n  }\n\n  async function handleAdBlockersWorkClick(): Promise<void> {\n    await setSessionStorageData({ popupWasOpened: true });\n    setShowIsAdBlockersWorks(false);\n\n    // Set up alarm to show the ad blocker warning again after 24 hours\n    await chrome.alarms.create(Alarms.ExtensionConflictWarningAdBlocker, {\n      periodInMinutes: 24 * 60, // 24 hours\n    });\n  }\n\n  async function handleBrowserErrorClick(): Promise<void> {\n    await setLocalStorageData({ isBrowserError: false });\n    setBrowserError(false);\n  }\n\n  return {\n    showIsProxyControlledByOtherExtensions,\n    showIsAdBlockersWork,\n    isBrowserError: browserError,\n    handleProxyControlledByOtherExtensionsClick,\n    handleAdBlockersWorkClick,\n    handleBrowserErrorClick,\n  };\n}\n","import {\n  deleteLocalStorageData,\n  getLocalStorageData,\n  LocalStorageKey,\n} from '@app/storage/local/shared';\nimport { useCallback, useEffect, useState } from 'react';\n\nexport function useErrorScreen() {\n  const [errorMessage, setErrorMessage] = useState<string>('');\n\n  const handleRetry = useCallback(async () => {\n    await deleteLocalStorageData([LocalStorageKey.ErrorMessage]);\n  }, []);\n\n  useEffect(() => {\n    async function getErrorData() {\n      const { errorMessage } = await getLocalStorageData(\n        LocalStorageKey.ErrorMessage,\n      );\n      if (errorMessage) {\n        setErrorMessage(errorMessage);\n      }\n    }\n\n    void getErrorData();\n  }, []);\n\n  useEffect(() => {\n    const listener = async (changes: chrome.storage.StorageChange) => {\n      const { errorMessage } = changes as {\n        [LocalStorageKey.ErrorMessage]: { newValue: string };\n      };\n\n      if (errorMessage) {\n        setErrorMessage(errorMessage.newValue);\n      }\n    };\n\n    chrome.storage.local.onChanged.addListener(listener);\n\n    return () => {\n      chrome.storage.local.onChanged.removeListener(listener);\n    };\n  }, []);\n\n  return {\n    errorMessage,\n    handleRetry,\n  };\n}\n","import { getSessionMetaApiData } from '@app/storage/session/metaApiData';\nimport { useEffect, useMemo, useState } from 'react';\nimport { versionStringToNumber } from '../helpers/versionStringToNumber';\n\ntype VersionData = {\n  requiredVersion: number;\n  currentVersion: number;\n} | null;\n\nexport function useVersion(): { isVersionOld: boolean } {\n  const [versionData, setVersionData] = useState<VersionData>(null);\n\n  const isVersionOld = useMemo(\n    () =>\n      versionData\n        ? versionData.currentVersion < versionData.requiredVersion\n        : false,\n\n    [versionData],\n  );\n\n  useEffect(() => {\n    async function getVersionData(): Promise<void> {\n      const currentVersion = versionStringToNumber(\n        chrome.runtime.getManifest().version,\n      );\n      const { requiredVersion } = await getSessionMetaApiData();\n\n      setVersionData({\n        requiredVersion: versionStringToNumber(requiredVersion),\n        currentVersion,\n      });\n    }\n\n    void getVersionData();\n  }, []);\n\n  return {\n    isVersionOld,\n  };\n}\n","import { useEffect } from 'react';\nimport {\n  getLocalStoragePremiumData,\n  getSubscriptionInfo,\n  LocalStoragePremiumKey,\n} from '@app/storage/local/premium';\n\nexport function useFetchSubscriptionInfo(): void {\n  useEffect(() => {\n    async function checkUserIdFromStorage() {\n      const { userId } = await getLocalStoragePremiumData(\n        LocalStoragePremiumKey.UserId,\n      );\n\n      if (userId) {\n        await getSubscriptionInfo();\n      }\n    }\n\n    checkUserIdFromStorage();\n  }, []);\n}\n","import { createRoot } from 'react-dom/client';\nimport { App } from './App';\nimport { initSentryReact } from '@app/sentry/initSentryReact';\nimport '@app/i18n';\n\ninitSentryReact();\n\nexport function initPopup(): void {\n  const root = document.createElement('div');\n  root.id = 'popup';\n  document.body.appendChild(root);\n\n  document.addEventListener('DOMContentLoaded', () => {\n    const title = document.createElement('title');\n    title.textContent = process.env.EXTENSION_TITLE;\n    document.head.appendChild(title);\n  });\n\n  createRoot(root).render(<App />);\n}\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport en from '@locales/en';\nimport ru from '@locales/ru';\n\ni18n.use(LanguageDetector).use(initReactI18next).init({\n  fallbackLng: 'en',\n  debug: true,\n  defaultNS: 'shared',\n  resources: {\n    en,\n    ru,\n  },\n});\n\nexport default i18n;\n","import shared from './shared.json';\nimport vrubel from './vrubel.json';\nimport youboostNeo from './youboost-neo.json';\n\nconst en = {\n  shared,\n  vrubel,\n  'youboost-neo': youboostNeo,\n};\n\nexport default en;\n","import shared from './shared.json';\nimport vrubel from './vrubel.json';\nimport youboostNeo from './youboost-neo.json';\n\nconst ru = {\n  shared,\n  vrubel,\n  'youboost-neo': youboostNeo,\n};\n\nexport default ru;\n","import * as Sentry from '@sentry/react';\n\nexport function initSentryReact() {\n  Sentry.init({\n    dsn: process.env.SENTRY_DSN,\n    environment: process.env.NODE_ENV,\n    integrations: [\n      Sentry.browserTracingIntegration(),\n      Sentry.replayIntegration(),\n    ],\n    // Tracing\n    tracesSampleRate: 1.0, //  Capture 100% of the transactions\n    // Set 'tracePropagationTargets' to control for which URLs distributed tracing should be enabled\n    tracePropagationTargets: ['localhost', '*'],\n    // Session Replay\n    replaysSessionSampleRate: 0.1, // This sets the sample rate at 10%. You may want to change it to 100% while in development and then sample at a lower rate in production.\n    replaysOnErrorSampleRate: 1.0, // If you're not already sampling the entire session, change the sample rate to 100% when sampling sessions where errors occur.\n    skipBrowserExtensionCheck: true,\n    // enabled: process.env.NODE_ENV === 'production',\n  });\n}\n"],"names":["apiScope","createSentryScope","limitInSeconds","getTimingWithLimit","timingInSec","limitInSec","extend","utc","httpClient","ky","retry","limit","methods","hooks","beforeRequest","metaApiData","getSessionStorageData","SessionStorageKey","MetaApiData","apiUrl","apiBaseUrl","cookieDomain","url","URL","request","hostname","includes","customHeaders","chrome","runtime","getManifest","version","Object","entries","forEach","key","value","headers","set","beforeRetry","error","retryCount","HTTPError","wait","getFibonacciNumber","retryAfterHeader","response","get","retryAfterTiming","Number","NaN","isNaN","afterResponse","options","ok","responseClone","clone","timestampUtc","dayjs","format","responseData","json","err","requestLog","status","statusText","apiHttpSuccess","ApiHttpSuccess","setSessionStorageData","beforeError","message","requestClone","setExtra","setLevel","setTag","method","captureException","Error","requestData","errorData","errorLog","apiHttpErrors","ApiHttpErrors","fetchCheckTariffAvailability","userId","deviceId","deviceIp","tariff","checkTariffUrl","getCheckTariffApiUrl","post","setupTariff","setupTariffUrl","getSetupTariffApiUrl","errors","length","errorMessage","map","description","filter","Boolean","join","fetchSubscriptionInfo","getSubscriptionApiUrl","console","code","PREFIX","GET_SUBSCRIPTION_API","apiBase","createApiUrl","CANCEL_SUBSCRIPTION_API","getCancelSubscriptionApiUrl","CHANGE_DEVICE_API","getChangeDeviceApiUrl","CHECK_TARIFF_API","SETUP_TARIFF_API","FETCH_TARIFFS_API","getFetchTariffsApiUrl","CREATE_NEW_PAYMENT_LINK_API","getCreateNewPaymentLinkUrl","apiRoute","Actions","LocalStoragePremiumKey","getLocalStoragePremiumData","keys","Array","isArray","storage","local","setLocalStoragePremiumData","data","deleteLocalStoragePremiumData","remove","getSubscriptionInfo","subscriptionInfo","isSubscriptionInfoError","getSessionMetaApiData","getDeviceId","getDeviceIP","localStorageScope","sendMessage","action","OpenPopupChangeDevice","isChangeDeviceError","setLocalStorageData","targetState","requestBlockedError","daysLeft","paidUntil","secondsLeft","subscription","getIsPremiumStatus","hasPremium","currentState","getLocalStorageData","LocalStorageKey","CurrentState","process","DeviceId","generateDeviceId","cookieDeviceId","getCookieData","CookieKey","crypto","randomUUID","setCookieData","ip","DeviceIp","warn","FeatureToggler","featuresList","features","useSyncExternalStore","featureStore","subscribe","getSnapshot","isVisible","setIsVisible","useState","toggleFeature","useCallback","isActive","setFeatureValues","useEffect","defineProperty","window","configurable","magicToggler","div","className","h3","feature","label","input","type","checked","onChange","button","styles","onClick","reload","applyChanges","reset","handleReset","useLocalStorage","defaultValue","setValue","storageKey","result","listener","changes","newValue","onChanged","addListener","removeListener","FeedbackOverlayContext","createContext","undefined","FeedbackOverlayContextProvider","children","isFeedbackOverlayShown","setIsFeedbackOverlayShown","HasPremium","checkAndShowFeedbackOverlay","feedbackProvided","connectionCount","ConnectionCount","FeedbackProvided","closeFeedbackOverlay","useMemo","Provider","useFeedbackOverlay","context","useContext","extensionsMap","cfhdojbkjhnklbpkdaibdccddilifddb","gighmmpiobklfepjocnamgkkbiglidom","ProxyControlledByOtherExtensions","conflictType","dataMonitoring","ExtensionMonitoring","name","setName","fullName","setFullName","icon","setIcon","extensionTitle","hasConflictingExtension","conflictingExtensionIcon","conflictingExtensionId","conflictingExtensionName","extensionNameFromMap","container","content","h2","title","img","src","alt","span","br","p","buttons","extensionCode","defaultText","defaultButtonText","isLoading","text","textLink","buttonText","header","footer","handleClick","clsx","wrapper","emoji","h1","disabled","loader","useConfigsBaseUrl","configsUrl","setConfigsUrl","configsBaseUrl","ConfigsBaseUrl","BrowserError","ErrorBoundary","Component","getDerivedStateFromError","hasError","render","this","state","props","constructor","super","OldVersionError","usePaymentStatus","paymentStatus","Status","ThemeContext","ThemeContextProvider","theme","isThemeLoading","setTheme","setIsThemeLoading","useLayoutEffect","document","body","classList","toggle","useThemeContext","Alarms","usePremiumData","setIsLoading","premiumDaysLeft","setPremiumDaysLeft","setUserId","setHasPremium","isError","setIsError","premiumSecondsLeft","setPremiumSecondsLeft","getPremiumInfo","id","hasPremiumCurrently","UserId","DaysLeft","IsSubscriptionInfoError","SecondsLeft","clearAllAlarms","alarms","clearAll","clearLocalStoragePremiumData","values","clearLocalStorageData","deleteLocalStorageData","clearSessionStorageData","deleteSessionStorageData","clearCookies","removeCookieData","clearPremiumData","onboardingScreenStatus","Logo","svg","width","height","viewBox","fill","xmlns","path","d","fillRule","clipRule","fillOpacity","TelegramIcon","TelegramPromo","a","href","target","size","telegram","Header","TransitionWrapper","isReversed","setIsReversed","location","useLocation","ref","useRef","onMouseDown","event","closest","SwitchTransition","CSSTransition","unmountOnExit","nodeRef","timeout","classNames","enter","enterActive","exit","exitActive","PremiumActions","useCancelPremium","isCancelPremiumLoading","setIsCancelPremiumLoading","isCancelPremiumError","setIsCancelPremiumError","isSuccess","setIsSuccess","cancelStatus","setCancelStatus","setErrorMessage","handleCancelPremium","cancelStatusResponse","cancelSubscription","Promise","all","cancelSubscriptionApiUrl","PremiumCanceled","RoutePath","Loader","xmlnsXlink","enableBackground","xmlSpace","circle","stroke","cx","cy","r","animate","attributeName","dur","repeatCount","begin","ButtonLoader","variant","Button","forwardRef","sharp","loading","loaderVariant","loaderClassName","rest","common","data-variant","QuestionMarkIcon","displayName","changeDevice","changeDeviceApiUrl","ms","setTimeout","resolve","BaseRoutePath","Prohibited","useHandlePremiumWithoutTelegram","setLoading","setSuccess","isSaleActive","isGuestMode","isTrial","CreateNewUser","payload","CreateNewUserSuccess","onMessage","useChangeDevice","navigate","useNavigate","handleDeviceChangeError","IsChangeDeviceError","usePremiumAnimation","isFreeUser","add","useNewPaymentLink","paymentMethod","tariffName","createNewPaymentLink","Tariff","TariffType","usePaymentScreen","selectedPaymentMethod","setSelectedPaymentMethod","PaymentMethod","Sbp","setError","selectedTariff","hasOneMonthDiscount","availablePaymentMethods","paymentMethods","setPaymentMethods","Card","usePaymentMethods","publicOfferUrl","setPublicOfferUrl","usePublicOfferUrl","getPaymentLink","handlePaymentClick","DefaultOneMonth","Discount","paymentLink","open","onPaymentClick","SBPIcon","MastercardIcon","ellipse","rx","ry","MirIcon","defs","linearGradient","x1","x2","y1","y2","gradientUnits","stop","stopColor","offset","VisaIcon","CardsIcons","PaymentMethodItem","active","PaymentScreenContent","data-close","useTariffs","tariffs","setTariffs","isTariffsLoading","setIsTariffsLoading","isTariffError","setIsTariffError","setSelectedTariff","fetchAllTariffs","getSnapshotAsync","isMultiDeviceSupported","Feature","MultiDeviceSupport","tariffType","LimitedDevices","Base","fetchTariffs","TariffItem","selected","price","period","TariffsScreenContent","Link","to","OnboardingStep","stepMap","stepMapReverse","STATUS_MAP","connected","disconnected","connecting","ConnectButton","onExpiredRoute","setStatus","getStatus","TargetState","useConnectButton","reducePacScript","storageData","pacPremiumData","pacData","updatedAt","DebugButton","handleCopy","isCopied","setIsCopied","timeoutRef","handleGetDebugInfo","browserInfo","detect","extensionInfo","platformInfo","getPlatformInfo","session","debugData","JSON","stringify","chromeRuntimeLastError","lastError","encodedDebugData","btoa","encodeURIComponent","navigator","clipboard","writeText","current","clearTimeout","useDebugButton","getNegativeFeedbackUrl","proxy","port","NegativeIcon","PositiveIcon","VrubelIcon","setFeedbackProvided","Feedback","negativeFeedbackUrl","setProxy","setPort","lastProxyHost","lastProxyPort","LastProxyHost","LastProxyPort","useNegativeFeedbackUrl","isPositive","setIsPositive","isNegative","setIsNegative","handleClickOnBack","rel","EnterIdForm","onIdSettled","enteredId","handleChange","handleSubmit","inputRef","clearError","isIdSettled","setEnteredId","setIsIdSettled","e","preventDefault","trim","focus","ChangeDevice","useEnterIdForm","form","onSubmit","placeholder","onFocus","EnterIdStep","onStepChange","updateOnboardingScreenStatus","WelcomeStep","useTranslation","handleTrial","handleLogIn","t","ns","strong","Onboarding","memo","onboardingStatus","step","setStep","hasInteracted","setHasInteracted","zeroRef","oneRef","stepRefs","StepZero","StepOne","Done","handleStepChange","nextStepNumber","newStep","prevStepNumber","animationClasses","Icon","CopyId","align","iconPlace","useCopyId","CopyToClipboard","onCopy","copied","CloseIcon","PopUpContainer","onClose","ActionButton","ExitPopUp","ExitButton","popUp","getElementById","isPopUpVisible","setIsPopUpVisible","createPortal","getRussianHourEnding","hour","remainder","getRussianDayEnding","day","PremiumData","canTryFreePremiumTrial","isFreePremiumTrialLoading","handleClickTryPremium","isChecking","setIsChecking","canTryTrial","setCanTryTrial","checkFreePremiumTrial","FreeTrial","isAvailable","isFreePremiumTrialAvailable","ErrorMessage","isCheckingFreePremiumTrial","IsFreePremiumTrialAvailable","Root","isFreePremiumTrialError","useFreePremiumTrial","days","time","hours","Math","ceil","renderTimeLeft","tabIndex","router","createMemoryRouter","element","cookieLoading","setCookieLoading","setOnboardingStatus","getOnboardingData","OnboardingScreenStatus","newOnboardingStatus","cookieLoaded","getCookieLoaded","CookieLoaded","useOnboardingScreen","useTheme","handleMessage","NavigateToPayment","PopupReady","useNavigateToTariffs","checkUserIdFromStorage","clear","sync","managed","errorElement","TariffsScreen","PaymentScreen","CancelPremium","handleCancelChangeDevice","handleChangeDevice","isChangeDeviceLoading","route","setIsChangeDeviceError","setIsChangeDeviceLoading","createUser","isUserCreating","finalizeUserIdCreate","handleCreateUser","App","handleBrowserErrorClick","handleProxyControlledByOtherExtensionsClick","isBrowserError","showIsProxyControlledByOtherExtensions","showIsAdBlockersWork","handleAdBlockersWorkClick","setShowIsProxyControlledByOtherExtensions","setShowIsAdBlockersWorks","browserError","setBrowserError","checkIsProxyControlledByOtherExtensions","isProxyControlledByOtherExtensions","IsProxyControlledByOtherExtensions","warningAlarm","ExtensionConflictWarningProxy","checkIsAdBlockersWork","isAdBlockersWork","IsAdBlockersWork","ExtensionConflictWarningAdBlocker","checkIsBrowserError","IsBrowserError","popupWasOpened","create","periodInMinutes","useApp","handleRetry","getErrorData","useErrorScreen","isVersionOld","versionData","setVersionData","currentVersion","requiredVersion","getVersionData","versionStringToNumber","useVersion","React","RouterProvider","initPopup","root","createElement","appendChild","addEventListener","textContent","head","createRoot","i18n","LanguageDetector","use","initReactI18next","init","fallbackLng","debug","defaultNS","resources","en","shared","vrubel","ru","Sentry","dsn","environment","integrations","tracesSampleRate","tracePropagationTargets","replaysSessionSampleRate","replaysOnErrorSampleRate","skipBrowserExtensionCheck"],"sourceRoot":""}