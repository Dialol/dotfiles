var Z=Object.defineProperty;var G=(o,e,t)=>e in o?Z(o,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):o[e]=t;var k=(o,e,t)=>G(o,typeof e!="symbol"?e+"":e,t);import{r as p,s as n,_ as b,z as f,N as B,F as j,t as y,v as W,S as $,x as q,o as T,g as H,m as C,u as F,O as L,K as X,h as z,j as J,d as Y,c as K,w as ee,b as v,y as te,q as ie,k as se,p as ae,f as oe,e as ne,n as ce}from"./index-DGeqQweJ.js";const P="nl",h="optimal";var I=(o=>(o[o.public=0]="public",o[o.private=1]="private",o))(I||{}),x=(o=>(o[o.free=0]="free",o[o.premium=1]="premium",o))(x||{}),R=(o=>(o[o.country=1]="country",o[o.location=2]="location",o))(R||{}),re=(o=>(o.free="free",o.premium="premium",o.custom="custom",o))(re||{});const ue=p({id:n(),name:n(),code:n(),phrases:n().array()}),le=p({id:n(),name:n(),phrases:n().array(),region:n(),via:n(),target:n(),countryCode:n(),type:b(I),proxyType:b(x)}),he=p({region:n(),name:n(),description:n(),countryCode:n(),latitude:n(),longitude:n(),networkLoad:n(),priority:f(),type:b(I),proxy_type:b(x)}),pe=p({id:n(),type:B(2)}),de=p({id:n(),type:B(1),items:pe.array()}),ve=p({countries:ue.array(),locations:le.array(),items:de.array()}),Se=p({data:ve.optional(),updatedAt:f()}),me=p({type:b(I),region:n(),regionName:n(),countryName:n(),countryCode:n(),custom:j()}),ge=p({activeId:n().optional().describe(y.persist),favoriteIds:n().array().optional().describe(y.persist),locations:Se.optional().describe(y.persist),lastActiveLocationData:me.optional().describe(y.persist),optimalLocationId:n().optional().describe(y.persist)}).default({}),ye=new W(ge);function N(o){return he.safeParse(o).success}const fe=12*60*60*1e3;class we extends ${constructor(e){super(),this.locationStorage=e}get activeLocation(){var i;if(!this.locationStorage.state.activeId||!((i=this.locationStorage.state.locations)!=null&&i.data))return null;const e=this.locationStorage.state.activeId===h&&this.locationStorage.state.optimalLocationId?this.locationStorage.state.optimalLocationId:this.locationStorage.state.activeId;return this.locationStorage.state.locations.data.locations.find(s=>s.id===e)??null}get activeLocationId(){return this.locationStorage.state.activeId??""}get favoriteLocations(){return this.locationStorage.state.favoriteIds??[]}get locationsData(){const{data:e}=this.locationStorage.state.locations??{};return e?this.addOptimalLocation(e):null}get lastActiveLocation(){return this.locationStorage.state.lastActiveLocationData??null}get needUpdateLocations(){return this.locationStorage.state.locations?this.locationStorage.state.locations.updatedAt+fe<Date.now():!0}get defaultLocationId(){var t;const e=(t=this.locationsData)==null?void 0:t.locations.find(i=>i.region===P);return e==null?void 0:e.id}get optimalLocationId(){return this.locationStorage.state.optimalLocationId??""}async boot(){await this.locationStorage.sync(),await this.setDefaultStoreValues(),this.bootResolve(),await this.bootPromise}async setDefaultStoreValues(){this.defaultLocationId&&(this.activeLocation?this.optimalLocationId||await this.setOptimalLocation(this.defaultLocationId):(await this.setOptimalLocation(this.defaultLocationId),await this.setActiveLocation(h)))}async setLocationsData(e){await this.locationStorage.setItems({locations:{data:e,updatedAt:Date.now()}}),await this.setDefaultStoreValues()}async setActiveLocation(e){var i,s,c;let t;if(typeof e=="string")t=e;else if(N(e)){const a=(i=this.locationsData)==null?void 0:i.locations.find(r=>{const u=r.region===e.region,S=r.proxyType===e.proxy_type;return u&&S});t=a==null?void 0:a.id}else{const a=(s=this.locationsData)==null?void 0:s.locations.find(r=>r.region===P);t=a==null?void 0:a.id}if(t?await this.locationStorage.setItems({activeId:t}):await this.locationStorage.removeItems("activeId"),this.activeLocation){const a=(c=this.locationsData)==null?void 0:c.countries.find(u=>u.code===this.activeLocation.countryCode),r={type:this.activeLocation.type,region:this.activeLocation.region,regionName:this.activeLocation.name,countryName:(a==null?void 0:a.name)??"N/A",countryCode:this.activeLocation.countryCode,custom:this.activeLocation.id===h};await this.locationStorage.setItems({lastActiveLocationData:r})}else await this.locationStorage.removeItems("lastActiveLocationData")}async setFavoriteLocations(e){const t=[...new Set([...this.favoriteLocations,...e])];await this.locationStorage.setItems({favoriteIds:t})}async removeFavoriteLocations(e){const t=this.favoriteLocations.filter(i=>!e.includes(i));await this.locationStorage.setItems({favoriteIds:t})}async setOptimalLocation(e){var i,s;let t;if(typeof e=="string")t=e;else if(N(e)){const c=(i=this.locationsData)==null?void 0:i.locations.find(a=>{const r=a.region===e.region,u=a.proxyType===e.proxy_type;return r&&u});t=c==null?void 0:c.id}else{const c=(s=this.locationsData)==null?void 0:s.locations.find(a=>a.region===P);t=c==null?void 0:c.id}t?await this.locationStorage.setItems({optimalLocationId:t}):await this.locationStorage.removeItems("optimalLocationId")}addOptimalLocation(e){const t=JSON.parse(JSON.stringify(e)),i=t.locations.find(s=>s.id===this.optimalLocationId);return i&&(t.countries.push({id:h,name:"Optimal location",code:"optimal",phrases:["optimal location"]}),t.locations.push({...i,id:h,countryCode:h,phrases:["optimal location"]}),t.items.push({id:h,type:R.country,items:[{id:h,type:R.location}]})),t}}const _e=new q("location",ye,T),Q=new we(_e),Le=p({active:j(),interval:f(),count:f(),nextTimestamp:f(),startedAt:f()}),be=p({showState:Le.optional().describe(y.session)}).default({}),Ce=new W(be),Ae=24*60*60*1e3,De=5*1e3,M=[10*1e3,5*60*1e3,15*60*1e3,50*60*1e3];class Te extends ${constructor(e,t,i,s){super(),this.lockScreenStorage=e,this.globalStateService=t,this.messageService=i,this.userService=s}get active(){const e={active:!1},t=this.userService.userType==="free",i=this.globalStateService.installedAt+Ae,s=Date.now()>i;return e.active&&t&&s}get showState(){return this.lockScreenStorage.state.showState}async boot(){await this.lockScreenStorage.sync(),this.bootResolve(),await this.bootPromise}async iterateShowState(){const{showState:e}=this.lockScreenStorage.state,t=e?e.count+1:0,i=M[t]??M.at(-1),s=(e==null?void 0:e.startedAt)??Date.now();await this.lockScreenStorage.setItems({showState:{startedAt:s,active:this.active,count:t,interval:De,nextTimestamp:Date.now()+i}}),this.messageService.notifyTab({type:"lock-screen-show-state-change",success:!0,data:this.showState})}async removeShowState(){await this.lockScreenStorage.removeItems("showState"),this.messageService.notifyTab({type:"lock-screen-show-state-change",success:!0,data:this.showState})}}const Ie=new q("lock-screen",Ce,T),ke=new Te(Ie,H,C,F);class Pe{constructor(e,t,i,s,c,a,r,u,S,d){this.globalStateService=e,this.apiFreeService=t,this.apiPremiumService=i,this.userService=s,this.locationService=c,this.accessService=a,this.analyticsService=r,this.messageService=u,this.eventService=S,this.webrtcService=d,this.eventService.subscribe({"premium-refresh-token-failed":this.premiumRefreshTokenFailedListener.bind(this),"free-refresh-token-failed":this.freeRefreshTokenFailedListener.bind(this)})}async init(){this.apiFreeService.hasTokens||await this.launch()}async launch(){const e=await this.apiFreeService.fetch({method:"POST",url:"apiLaunch",body:{...this.apiFreeService.deviceInfo}});if(!e.success)return await this.criticalErrorOccured({status_code:L.getStatusCodeMessage(e)}),e;await this.apiFreeService.setTokens({accessToken:e.data.accessToken,refreshToken:""});const t=await this.apiFreeService.fetch({method:"POST",url:"apiLocationList"});if(!t.success)return await this.criticalErrorOccured({status_code:L.getStatusCodeMessage(t)}),t;if(await this.locationService.setLocationsData(t.data),!this.locationService.activeLocation){const i=e.data.user.default.location;await this.locationService.setOptimalLocation(i),await this.locationService.setActiveLocation(h)}return await this.globalStateService.setCriticalError(!1),{success:!0,data:{success:!0}}}async getCriticalError(){return await Promise.resolve(),{success:!0,data:{state:this.globalStateService.criticalError}}}async login(e){var c;const t=await this.apiPremiumService.fetch({method:"POST",url:"authLogin",body:{...this.apiFreeService.deviceInfo,...e}});if(!t.success)return t;await this.apiPremiumService.setTokens({accessToken:t.data.accessToken,refreshToken:t.data.refreshToken});const i=await this.apiPremiumService.fetch({method:"POST",url:"apiLocationList"});if(!i.success)return i;await this.locationService.setLocationsData(i.data),await this.userService.setUser(t.data.user),await this.userService.setSubscription(t.data.user.subscription);const s=await this.apiPremiumService.fetch({method:"GET",url:"apiSubscriptionShield"});if(s.success&&await this.userService.setSubscriptionBundle(s.data),this.userService.userType==="trial"){const a=await this.apiPremiumService.fetch({method:"GET",url:"apiSubscriptionCheckUsedTrial"});if(!a.success){const r={...t.data.user.subscription,status:X.disabled};await this.userService.setSubscription(r);const u=((c=a.errors[0])==null?void 0:c.message)??"";u&&this.messageService.notifyPopup({type:"toast-message",success:!0,data:{id:"0",message:u,type:"warning"}})}}if(this.userService.hasPermitions("locations","premium")){const a=t.data.user.default.location;await this.locationService.setOptimalLocation(a),await this.locationService.setActiveLocation(h)}else{const a=this.locationService.defaultLocationId;await this.locationService.setOptimalLocation(a),await this.locationService.setActiveLocation(h)}return await this.syncSubscriptionSlots(),this.webrtcService.needEnableWebrtc&&this.webrtcService.enable().catch(()=>{}),{success:!0,data:{success:!0}}}async logout(){const e=await this.apiPremiumService.fetch({method:"POST",url:"authLogout"});if(!e.success)return e;await this.userService.removeSubscription(),await this.userService.removeSubscriptionSlots(),await this.userService.removeSubscriptionBundle(),await this.userService.removeUser();const t=await this.apiFreeService.fetch({method:"POST",url:"apiLaunch",body:{...this.apiFreeService.deviceInfo}});if(!t.success)return await this.criticalErrorOccured({status_code:L.getStatusCodeMessage(t)}),t;await this.apiFreeService.setTokens({accessToken:t.data.accessToken,refreshToken:""});const i=await this.apiFreeService.fetch({method:"POST",url:"apiLocationList"});if(!i.success)return i;await this.locationService.setLocationsData(i.data);const s=t.data.user.default.location;return await this.locationService.setOptimalLocation(s),await this.locationService.setActiveLocation(h),this.webrtcService.disable().catch(()=>{}),{success:!0,data:{success:!0}}}async showAccountPage(e){const t=await this.apiPremiumService.fetch({method:"POST",url:"apiAccountAuthToken"});return t.success?(await this.accessService.proceedToWebsiteAccount({authToken:t.data.token,route:e.route,params:e.params??{}}),{success:!0,data:{success:!0}}):t}async registerAccount(){return await this.accessService.proceedToWebsitePage({page:"pricing",params:{utm_campaign:"signup"}}),{success:!0,data:{success:!0}}}async getUserData(){return await Promise.resolve(),{success:!0,data:{user:this.userService.user,subscription:this.userService.subscription,slots:this.userService.subscriptionSlots,hasBundle:this.userService.hasBundleSubscription,canUsePremium:this.userService.canUsePremium}}}async syncSubscriptionSlots(){const e=await this.apiPremiumService.fetch({method:"GET",url:"apiSubscriptionSlot"});return e.success?(await this.userService.setSubscriptionSlots(e.data),{success:!0,data:{slots:e.data}}):e}async logoutAllDevices(){const e=await this.apiPremiumService.fetch({method:"POST",url:"apiSlotRelease"});if(!e.success)return e;const t=await this.syncSubscriptionSlots();return t.success?{success:!0,data:t.data}:t}async premiumRefreshTokenFailedListener(e){(await this.logout()).success&&this.messageService.notifyPopup({type:"authentication-change",success:!0,data:{success:!0}}),this.analyticsService.sendEvent({types:["google-analytics"],name:"premium_refresh_token_failed",data:{status_message:e.disconnectReason,status_code:e.failedReason}})}async criticalErrorOccured(e){this.analyticsService.sendEvent({types:["google-analytics"],name:"critical_error_occured",data:{...e}}),await this.globalStateService.setCriticalError(!0),await this.apiFreeService.removeTokens()}async freeRefreshTokenFailedListener(e){await this.criticalErrorOccured({status_code:"free-refresh-token-failed"}),this.messageService.notifyPopup({type:"critical-error",success:!0,data:{success:!0}}),this.analyticsService.sendEvent({types:["google-analytics"],name:"free_refresh_token_failed",data:{status_message:e.disconnectReason,status_code:e.failedReason}})}}class Re{constructor(e,t){this.messageService=e,this.authController=t}init(){this.messageService.subscribe({"get-critical-error":this.getCriticalError.bind(this),login:this.login.bind(this),logout:this.logout.bind(this),"register-account":this.registerAccount.bind(this),"show-account-page":this.showAccountPage.bind(this),"get-user-data":this.getUserData.bind(this),"sync-subscription-slots":this.syncSubscriptionSlots.bind(this),"logout-all-devices":this.logoutAllDevices.bind(this)})}async getCriticalError(){return{...await this.authController.getCriticalError(),type:"get-critical-error"}}async login(e){return{...await this.authController.login(e),type:"login"}}async logout(){return{...await this.authController.logout(),type:"logout"}}async registerAccount(){return{...await this.authController.registerAccount(),type:"register-account"}}async showAccountPage(e){return{...await this.authController.showAccountPage(e),type:"show-account-page"}}async getUserData(){return{...await this.authController.getUserData(),type:"get-user-data"}}async syncSubscriptionSlots(){return{...await this.authController.syncSubscriptionSlots(),type:"sync-subscription-slots"}}async logoutAllDevices(){return{...await this.authController.logoutAllDevices(),type:"logout-all-devices"}}}const Ee=new Pe(H,z,J,F,Q,Y,K,C,T,ee),We=new Re(C,Ee),w=class w{async setImage(e){const t=e==="connected"?w.CONNECTED_ICONS:w.DISCONNECTED_ICONS;await v.action.setIcon({path:t}),await Promise.resolve(this)}async setTooltip(e){const i=v.runtime.getManifest().name;await v.action.setTitle({title:`${i}
${e}`}),await Promise.resolve(this)}};k(w,"CONNECTED_ICONS",{16:"/icons/16.png",32:"/icons/32.png",48:"/icons/48.png",64:"/icons/64.png",128:"/icons/128.png"}),k(w,"DISCONNECTED_ICONS",{16:"/icons/16-grey.png",32:"/icons/32-grey.png",48:"/icons/48-grey.png",64:"/icons/64-grey.png",128:"/icons/128-grey.png"});let E=w;const Fe=new E,xe=["https://captive.apple.com/"],Ue="https://cloudflare.com/cdn-cgi/trace",V="n/a";class Oe{constructor(e,t,i,s,c,a,r,u,S,d,g,_,A,l,m,D){this.messageService=e,this.analyticsService=t,this.eventService=i,this.fetchService=s,this.connectionService=c,this.apiFreeService=a,this.apiPremiumService=r,this.userService=u,this.locationService=S,this.exclusionsService=d,this.proxyService=g,this.iconService=_,this.i18nService=A,this.appService=l,this.notificationService=m,this.lockScreenService=D,this.eventService.subscribe({"free-refresh-token-failed":this.disconnect.bind(this),"premium-refresh-token-failed":this.disconnect.bind(this)})}get needAuthTrigger(){return this.appService.majorBrowserVersion===0?!1:this.appService.majorBrowserVersion<122}async init(){await this.updateIcon(),(!this.locationService.locationsData||this.locationService.needUpdateLocations)&&await this.updateLocationData(),this.connectionService.currentIp||await this.updateIpAddress()}async getLocationsData(){return await Promise.resolve(),{success:!0,data:{data:this.locationService.locationsData,activeId:this.locationService.activeLocationId,favoriteIds:this.locationService.favoriteLocations}}}async getLastActiveLocation(){return await Promise.resolve(),this.locationService.lastActiveLocation?{success:!0,data:this.locationService.lastActiveLocation}:{success:!1,errors:[{code:0,status:0,name:"",message:this.i18nService.t("base:connect-errors.no-location")}]}}async updateLocations(){const e=this.userService.hasPermitions("domain","premium")?await this.apiPremiumService.fetch({method:"POST",url:"apiLocationList"}):await this.apiFreeService.fetch({method:"POST",url:"apiLocationList"});return e.success?(await this.locationService.setLocationsData(e.data),{success:!0,data:{data:this.locationService.locationsData,activeId:this.locationService.activeLocationId,favoriteIds:this.locationService.favoriteLocations}}):e}async setActiveLocation(e){return await this.locationService.setActiveLocation(e),{success:!0,data:{success:!0}}}async setFavoriteLocations(e){return e.action==="add"?await this.locationService.setFavoriteLocations(e.list):await this.locationService.removeFavoriteLocations(e.list),{success:!0,data:{success:!0}}}async connect(){const e=Date.now();if(await this.changeConnectionStatus("connecting"),!this.locationService.activeLocation)return await this.changeConnectionStatus("disconnected"),{success:!1,errors:[{code:0,status:0,name:"",message:this.i18nService.t("base:connect-errors.no-location")}]};const{name:t,region:i}=this.locationService.activeLocation,s=`${i}, ${t}`;this.analyticsService.sendEvent({types:["aws-kinesis"],name:"connection_tried",data:{event_properties__screen_name:"vpn",event_properties__location:s}}),this.analyticsService.sendEvent({types:["google-analytics","amplitude"],name:"connection_tried",data:{country:this.locationService.activeLocation.countryCode,city:this.locationService.activeLocation.name,server_type:this.locationService.activeLocation.type,server_address:"no_addresses",server_region:this.locationService.activeLocation.id}});const c={protocol:"https",region:this.locationService.activeLocation.region,type:this.locationService.activeLocation.type},a=this.userService.hasPermitions("domain","premium")?await this.apiPremiumService.fetch({method:"POST",url:"apiServerList",body:c}):await this.apiFreeService.fetch({method:"POST",url:"apiServerList",body:c});if(!a.success)return await this.changeConnectionStatus("disconnected"),this.analyticsService.sendEvent({types:["google-analytics","amplitude"],name:"connection_failed_backend",data:{country:this.locationService.activeLocation.countryCode,city:this.locationService.activeLocation.name,server_type:this.locationService.activeLocation.type,server_address:"no_addresses",server_region:this.locationService.activeLocation.id,status_code:L.getStatusCodeMessage(a)}}),this.analyticsService.sendEvent({types:["aws-kinesis"],name:"connection_failed_backend",data:{event_properties__screen_name:"vpn",event_properties__location:s,event_properties__time_to_connect:Date.now()-e,event_properties__auto_connection:"",event_properties__server_address:"no_addresses"}}),{success:!1,errors:[{code:0,status:0,name:"",message:this.i18nService.t("base:connect-errors.server-config")}]};const r=a.data.map(l=>{const m=this.appService.isBlockAds?l.rpz_port:l.port;return{addresses:l.addresses,protocol:l.protocol,port:m}}),{username:u,password:S}=a.data[0];let d=!1,g="";for(let l=0;l<r.length;l+=1){const m=r[l],D=await this.proxyService.enable({serverConfig:[m],credentials:{username:u,password:S},nonRoutableNets:this.exclusionsService.nonRoutableNets,exclusionList:this.exclusionsService.exclusionList});if(!D.status){await this.changeConnectionStatus("disconnected"),d=!1,g=D.cause==="not_controllable"?this.i18nService.t("base:connect-errors.not-controllable"):this.i18nService.t("base:connect-errors.controlled-by-other-extensions");break}const U={country:this.locationService.activeLocation.countryCode,city:this.locationService.activeLocation.name,server_type:this.locationService.activeLocation.type,server_address:m.addresses[0],server_region:this.locationService.activeLocation.id};if(this.needAuthTrigger&&!await this.triggerAuthRequiredListener()){await this.proxyService.disable(),this.analyticsService.sendEvent({types:["google-analytics"],name:"connection_failed_create_tab",data:{...U,status_code:"tab-create"}}),this.analyticsService.sendEvent({types:["aws-kinesis"],name:"connection_failed_create_tab",data:{event_properties__screen_name:"vpn",event_properties__location:s,event_properties__time_to_connect:Date.now()-e,event_properties__auto_connection:"",event_properties__server_address:m.addresses[0]}});continue}const O=await this.checkInternetConnection();if(O.success){d=!0;break}else await this.proxyService.disable(),this.analyticsService.sendEvent({types:["google-analytics"],name:"connection_failed_availability_domain_1",data:{...U,status_code:L.getStatusCodeMessage(O)}})}const _=r.flatMap(l=>l.addresses).join(", "),A={country:this.locationService.activeLocation.countryCode,city:this.locationService.activeLocation.name,server_type:this.locationService.activeLocation.type,server_address:_,server_region:this.locationService.activeLocation.id};return d?(await this.connectionService.incrementConnectionCount(),await this.updateIpAddress(),await this.changeConnectionStatus("connected"),await this.updateIcon(),await this.createDownloadNotification(),this.analyticsService.sendEvent({types:["google-analytics","amplitude"],name:"connection_succeeded",data:A}),this.analyticsService.sendEvent({types:["aws-kinesis"],name:"connection_succeeded",data:{event_properties__screen_name:"vpn",event_properties__location:s,event_properties__time_to_connect:Date.now()-e,event_properties__auto_connection:"",event_properties__server_address:_}}),{success:!0,data:{success:!0}}):(await this.changeConnectionStatus("disconnected"),await this.proxyService.disable(),this.analyticsService.sendEvent({types:["google-analytics","amplitude"],name:"connection_failed_check",data:{...A,status_code:"loop_fixed_server"}}),this.analyticsService.sendEvent({types:["aws-kinesis"],name:"connection_failed_check",data:{event_properties__screen_name:"vpn",event_properties__location:s,event_properties__time_to_connect:Date.now()-e,event_properties__auto_connection:"",event_properties__server_address:_}}),{success:!1,errors:[{code:0,status:0,name:"",message:g||this.i18nService.t("base:connect-errors.captive")}]})}async disconnect(e){if(await this.changeConnectionStatus("disconnecting"),!await this.proxyService.disable())return{success:!1,errors:[{code:0,status:0,name:"",message:this.i18nService.t("base:disconnect-errors.remove-proxy")}]};await this.updateIpAddress(),await this.changeConnectionStatus("disconnected"),await this.updateIcon();const{name:i,region:s}=this.locationService.activeLocation??{name:"",region:""},c=`${s}, ${i}`;return this.analyticsService.sendEvent({types:["aws-kinesis"],name:"disconnected",data:{event_properties__screen_name:"vpn",event_properties__location:c,event_properties__disconnect_reason:e.disconnectReason,event_properties__failed_reason:e.failedReason}}),{success:!0,data:{success:!0}}}async getConnectionState(){await Promise.resolve();const e=this.connectionService.currentIp??V;return{success:!0,data:{status:this.connectionService.status,ip:e,connectionCount:this.connectionService.connectionCount}}}async getAutoConnectSetting(){return await Promise.resolve(),{success:!0,data:{status:this.connectionService.useAutoConnect}}}async setAutoConnectSetting(e){return await this.connectionService.setAutoConnect(e.status),{success:!0,data:{success:!0}}}async updateApiDomain(){return this.apiFreeService.isDomainAvailable||await this.apiFreeService.updateDomainData(),this.apiPremiumService.isDomainAvailable||await this.apiPremiumService.updateDomainData(),{success:!0,data:{success:!0}}}async triggerAuthRequiredListener(){const e=function(i){return new Promise((s,c)=>{v.tabs.create({url:i,active:!1}).then(a=>{const r=function(d,g){g.status==="complete"&&d===a.id&&(v.tabs.onUpdated.removeListener(r),v.tabs.remove(d).catch(()=>{}),clearTimeout(u),s(a))},u=setTimeout(()=>{v.tabs.onUpdated.removeListener(r),a.id&&v.tabs.remove(a.id).catch(()=>{}),clearTimeout(u),c(new Error("triggerAuthRequiredListener timeout reject"))},5e3);v.tabs.onUpdated.addListener(r)}).catch(c)})};try{const t=this.userService.hasPermitions("domain","premium")?this.apiPremiumService.apiDomainUrl:this.apiFreeService.apiDomainUrl;return await e(t),!0}catch{return!1}}async updateIpAddress(){const e=await this.fetchService.request({method:"GET",url:Ue});if(e.success)try{const t=e.data.trim().split(/\n/).map(s=>s.split("=")),i=Object.fromEntries(t);await this.connectionService.setIpAddress(i.ip)}catch{this.analyticsService.sendEvent({types:["google-analytics"],name:"ip_parse_failed"})}else await this.connectionService.removeIpAddress(),this.analyticsService.sendEvent({types:["google-analytics","amplitude"],name:"ip_check_failed"})}async updateIcon(){var e;if(this.connectionService.isConnected){const t=((e=this.locationService.activeLocation)==null?void 0:e.name)??"VeePN",i=this.i18nService.t("base:connect-status.on",{tr_location:t});await this.iconService.setImage("connected"),await this.iconService.setTooltip(i)}else{const t=this.i18nService.t("base:connect-status.off");await this.iconService.setImage("disconnected"),await this.iconService.setTooltip(t)}}async updateLocationData(){const e=this.userService.hasPermitions("domain","premium")?await this.apiPremiumService.fetch({method:"POST",url:"apiLocationList"}):await this.apiFreeService.fetch({method:"POST",url:"apiLocationList"});e.success&&await this.locationService.setLocationsData(e.data)}async changeConnectionStatus(e){e==="disconnected"&&(await this.appService.setBlockAds(!1),await this.lockScreenService.removeShowState()),e==="connected"&&await this.lockScreenService.iterateShowState(),await this.connectionService.setConnectionStatus(e);const t=this.connectionService.currentIp??V;this.messageService.notifyPopup({type:"connection-change",success:!0,data:{status:this.connectionService.status,ip:t,connectionCount:this.connectionService.connectionCount}})}async createDownloadNotification(){this.connectionService.connectionCount<=3||Date.now()<this.appService.downloadNotificationTimestamp||(await this.notificationService.notify({options:{type:"image",title:this.i18nService.t("base:download-notification.title"),imageUrl:v.runtime.getURL("/images/desktop-notification.jpg"),message:this.i18nService.t("base:download-notification.message")},callback:"download-app"}),await this.appService.incrementDownloadNotificationTimestamp(),this.analyticsService.sendEvent({types:["google-analytics","amplitude"],name:"notify_popup_pc_download_shown"}))}async checkInternetConnection(){const e=await this.fetchService.request({method:"GET",url:xe[0],cache:"no-cache"});return e.success&&e.data.toLocaleLowerCase().includes("success")?{success:!0,data:{success:!0}}:{success:!1,errors:[{code:0,status:0,name:"",message:this.i18nService.t("base:connect-errors.captive")}]}}}class Ne{constructor(e,t){this.messageService=e,this.connectionController=t}init(){this.messageService.subscribe({connect:this.connect.bind(this),disconnect:this.disconnect.bind(this),"get-connection-state":this.getConnectionState.bind(this),"get-locations-data":this.getLocationsData.bind(this),"get-last-active-location":this.getLastActiveLocation.bind(this),"update-locations-data":this.updateLocations.bind(this),"set-active-location":this.setActiveLocation.bind(this),"set-favorite-locations":this.setFavoriteLocations.bind(this),"update-api-domain":this.updateApiDomain.bind(this),"get-auto-connect-setting":this.getAutoConnectSetting.bind(this),"set-auto-connect-setting":this.setAutoConnectSetting.bind(this)})}async connect(){return{...await this.connectionController.connect(),type:"connect"}}async disconnect(e){return{...await this.connectionController.disconnect(e),type:"disconnect"}}async getConnectionState(){return{...await this.connectionController.getConnectionState(),type:"get-connection-state"}}async getLocationsData(){return{...await this.connectionController.getLocationsData(),type:"get-locations-data"}}async getLastActiveLocation(){return{...await this.connectionController.getLastActiveLocation(),type:"get-last-active-location"}}async updateLocations(){return{...await this.connectionController.updateLocations(),type:"update-locations-data"}}async setActiveLocation(e){return{...await this.connectionController.setActiveLocation(e),type:"set-active-location"}}async setFavoriteLocations(e){return{...await this.connectionController.setFavoriteLocations(e),type:"set-favorite-locations"}}async updateApiDomain(){return{...await this.connectionController.updateApiDomain(),type:"update-api-domain"}}async getAutoConnectSetting(){return{...await this.connectionController.getAutoConnectSetting(),type:"get-auto-connect-setting"}}async setAutoConnectSetting(e){return{...await this.connectionController.setAutoConnectSetting(e),type:"set-auto-connect-setting"}}}const Me=new Oe(C,K,T,te,ie,z,J,F,Q,se,ae,Fe,oe,ne,ce,ke),$e=new Ne(C,Me);export{x as L,h as O,re as R,We as a,$e as b,Me as c,Q as d,Ee as e,I as f,ke as l};
